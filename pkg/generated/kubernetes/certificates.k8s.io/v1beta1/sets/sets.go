// Code generated by skv2. DO NOT EDIT.

package v1beta1sets

import (
	. "k8s.io/api/certificates/v1beta1"

	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/sets"
)

type CertificateSigningRequestSet interface {
	Keys() sets.String
	List() []*CertificateSigningRequest
	Map() map[string]*CertificateSigningRequest
	Insert(certificateSigningRequest ...*CertificateSigningRequest)
	Equal(certificateSigningRequestSet CertificateSigningRequestSet) bool
	Has(certificateSigningRequest *CertificateSigningRequest) bool
	Delete(certificateSigningRequest *CertificateSigningRequest)
	Union(set CertificateSigningRequestSet) CertificateSigningRequestSet
	Difference(set CertificateSigningRequestSet) CertificateSigningRequestSet
	Intersection(set CertificateSigningRequestSet) CertificateSigningRequestSet
}

func makeGenericCertificateSigningRequestSet(certificateSigningRequestList []*CertificateSigningRequest) sksets.ResourceSet {
	var genericResources []metav1.Object
	for _, obj := range certificateSigningRequestList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type certificateSigningRequestSet struct {
	set sksets.ResourceSet
}

func NewCertificateSigningRequestSet(certificateSigningRequestList ...*CertificateSigningRequest) CertificateSigningRequestSet {
	return &certificateSigningRequestSet{set: makeGenericCertificateSigningRequestSet(certificateSigningRequestList)}
}

func (s certificateSigningRequestSet) Keys() sets.String {
	return s.set.Keys()
}

func (s certificateSigningRequestSet) List() []*CertificateSigningRequest {
	var certificateSigningRequestList []*CertificateSigningRequest
	for _, obj := range s.set.List() {
		certificateSigningRequestList = append(certificateSigningRequestList, obj.(*CertificateSigningRequest))
	}
	return certificateSigningRequestList
}

func (s certificateSigningRequestSet) Map() map[string]*CertificateSigningRequest {
	newMap := map[string]*CertificateSigningRequest{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*CertificateSigningRequest)
	}
	return newMap
}

func (s certificateSigningRequestSet) Insert(
	certificateSigningRequestList ...*CertificateSigningRequest,
) {
	for _, obj := range certificateSigningRequestList {
		s.set.Insert(obj)
	}
}

func (s certificateSigningRequestSet) Has(certificateSigningRequest *CertificateSigningRequest) bool {
	return s.set.Has(certificateSigningRequest)
}

func (s certificateSigningRequestSet) Equal(
	certificateSigningRequestSet CertificateSigningRequestSet,
) bool {
	return s.set.Equal(makeGenericCertificateSigningRequestSet(certificateSigningRequestSet.List()))
}

func (s certificateSigningRequestSet) Delete(CertificateSigningRequest *CertificateSigningRequest) {
	s.set.Delete(CertificateSigningRequest)
}

func (s certificateSigningRequestSet) Union(set CertificateSigningRequestSet) CertificateSigningRequestSet {
	return NewCertificateSigningRequestSet(append(s.List(), set.List()...)...)
}

func (s certificateSigningRequestSet) Difference(set CertificateSigningRequestSet) CertificateSigningRequestSet {
	newSet := s.set.Difference(makeGenericCertificateSigningRequestSet(set.List()))
	return certificateSigningRequestSet{set: newSet}
}

func (s certificateSigningRequestSet) Intersection(set CertificateSigningRequestSet) CertificateSigningRequestSet {
	newSet := s.set.Intersection(makeGenericCertificateSigningRequestSet(set.List()))
	var certificateSigningRequestList []*CertificateSigningRequest
	for _, obj := range newSet.List() {
		certificateSigningRequestList = append(certificateSigningRequestList, obj.(*CertificateSigningRequest))
	}
	return NewCertificateSigningRequestSet(certificateSigningRequestList...)
}
