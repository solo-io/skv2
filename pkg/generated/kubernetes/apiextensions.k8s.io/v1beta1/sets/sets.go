// Code generated by skv2. DO NOT EDIT.

package v1beta1sets

import (
	. "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1"

	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/sets"
)

type CustomResourceDefinitionSet interface {
	Keys() sets.String
	List() []*CustomResourceDefinition
	Map() map[string]*CustomResourceDefinition
	Insert(customResourceDefinition ...*CustomResourceDefinition)
	Equal(customResourceDefinitionSet CustomResourceDefinitionSet) bool
	Has(customResourceDefinition *CustomResourceDefinition) bool
	Delete(customResourceDefinition *CustomResourceDefinition)
	Union(set CustomResourceDefinitionSet) CustomResourceDefinitionSet
	Difference(set CustomResourceDefinitionSet) CustomResourceDefinitionSet
	Intersection(set CustomResourceDefinitionSet) CustomResourceDefinitionSet
}

func makeGenericCustomResourceDefinitionSet(customResourceDefinitionList []*CustomResourceDefinition) sksets.ResourceSet {
	var genericResources []metav1.Object
	for _, obj := range customResourceDefinitionList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type customResourceDefinitionSet struct {
	set sksets.ResourceSet
}

func NewCustomResourceDefinitionSet(customResourceDefinitionList ...*CustomResourceDefinition) CustomResourceDefinitionSet {
	return &customResourceDefinitionSet{set: makeGenericCustomResourceDefinitionSet(customResourceDefinitionList)}
}

func (s customResourceDefinitionSet) Keys() sets.String {
	return s.set.Keys()
}

func (s customResourceDefinitionSet) List() []*CustomResourceDefinition {
	var customResourceDefinitionList []*CustomResourceDefinition
	for _, obj := range s.set.List() {
		customResourceDefinitionList = append(customResourceDefinitionList, obj.(*CustomResourceDefinition))
	}
	return customResourceDefinitionList
}

func (s customResourceDefinitionSet) Map() map[string]*CustomResourceDefinition {
	newMap := map[string]*CustomResourceDefinition{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*CustomResourceDefinition)
	}
	return newMap
}

func (s customResourceDefinitionSet) Insert(
	customResourceDefinitionList ...*CustomResourceDefinition,
) {
	for _, obj := range customResourceDefinitionList {
		s.set.Insert(obj)
	}
}

func (s customResourceDefinitionSet) Has(customResourceDefinition *CustomResourceDefinition) bool {
	return s.set.Has(customResourceDefinition)
}

func (s customResourceDefinitionSet) Equal(
	customResourceDefinitionSet CustomResourceDefinitionSet,
) bool {
	return s.set.Equal(makeGenericCustomResourceDefinitionSet(customResourceDefinitionSet.List()))
}

func (s customResourceDefinitionSet) Delete(CustomResourceDefinition *CustomResourceDefinition) {
	s.set.Delete(CustomResourceDefinition)
}

func (s customResourceDefinitionSet) Union(set CustomResourceDefinitionSet) CustomResourceDefinitionSet {
	return NewCustomResourceDefinitionSet(append(s.List(), set.List()...)...)
}

func (s customResourceDefinitionSet) Difference(set CustomResourceDefinitionSet) CustomResourceDefinitionSet {
	newSet := s.set.Difference(makeGenericCustomResourceDefinitionSet(set.List()))
	return customResourceDefinitionSet{set: newSet}
}

func (s customResourceDefinitionSet) Intersection(set CustomResourceDefinitionSet) CustomResourceDefinitionSet {
	newSet := s.set.Intersection(makeGenericCustomResourceDefinitionSet(set.List()))
	var customResourceDefinitionList []*CustomResourceDefinition
	for _, obj := range newSet.List() {
		customResourceDefinitionList = append(customResourceDefinitionList, obj.(*CustomResourceDefinition))
	}
	return NewCustomResourceDefinitionSet(customResourceDefinitionList...)
}
