// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/skv2/pkg/generated/kubernetes/rbac.authorization.k8s.io/v1 (interfaces: Clientset,ClusterRoleBindingClient)

// Package mock_k8s_rbac_clients is a generated GoMock package.
package mock_k8s_rbac_clients

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/skv2/pkg/generated/kubernetes/rbac.authorization.k8s.io/v1"
	v10 "k8s.io/api/rbac/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockClientset is a mock of Clientset interface.
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset.
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance.
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// ClusterRoleBindings mocks base method.
func (m *MockClientset) ClusterRoleBindings() v1.ClusterRoleBindingClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterRoleBindings")
	ret0, _ := ret[0].(v1.ClusterRoleBindingClient)
	return ret0
}

// ClusterRoleBindings indicates an expected call of ClusterRoleBindings.
func (mr *MockClientsetMockRecorder) ClusterRoleBindings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterRoleBindings", reflect.TypeOf((*MockClientset)(nil).ClusterRoleBindings))
}

// ClusterRoles mocks base method.
func (m *MockClientset) ClusterRoles() v1.ClusterRoleClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterRoles")
	ret0, _ := ret[0].(v1.ClusterRoleClient)
	return ret0
}

// ClusterRoles indicates an expected call of ClusterRoles.
func (mr *MockClientsetMockRecorder) ClusterRoles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterRoles", reflect.TypeOf((*MockClientset)(nil).ClusterRoles))
}

// RoleBindings mocks base method.
func (m *MockClientset) RoleBindings() v1.RoleBindingClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleBindings")
	ret0, _ := ret[0].(v1.RoleBindingClient)
	return ret0
}

// RoleBindings indicates an expected call of RoleBindings.
func (mr *MockClientsetMockRecorder) RoleBindings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleBindings", reflect.TypeOf((*MockClientset)(nil).RoleBindings))
}

// Roles mocks base method.
func (m *MockClientset) Roles() v1.RoleClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roles")
	ret0, _ := ret[0].(v1.RoleClient)
	return ret0
}

// Roles indicates an expected call of Roles.
func (mr *MockClientsetMockRecorder) Roles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roles", reflect.TypeOf((*MockClientset)(nil).Roles))
}

// MockClusterRoleBindingClient is a mock of ClusterRoleBindingClient interface.
type MockClusterRoleBindingClient struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRoleBindingClientMockRecorder
}

// MockClusterRoleBindingClientMockRecorder is the mock recorder for MockClusterRoleBindingClient.
type MockClusterRoleBindingClientMockRecorder struct {
	mock *MockClusterRoleBindingClient
}

// NewMockClusterRoleBindingClient creates a new mock instance.
func NewMockClusterRoleBindingClient(ctrl *gomock.Controller) *MockClusterRoleBindingClient {
	mock := &MockClusterRoleBindingClient{ctrl: ctrl}
	mock.recorder = &MockClusterRoleBindingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterRoleBindingClient) EXPECT() *MockClusterRoleBindingClientMockRecorder {
	return m.recorder
}

// CreateClusterRoleBinding mocks base method.
func (m *MockClusterRoleBindingClient) CreateClusterRoleBinding(arg0 context.Context, arg1 *v10.ClusterRoleBinding, arg2 ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClusterRoleBinding indicates an expected call of CreateClusterRoleBinding.
func (mr *MockClusterRoleBindingClientMockRecorder) CreateClusterRoleBinding(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterRoleBinding", reflect.TypeOf((*MockClusterRoleBindingClient)(nil).CreateClusterRoleBinding), varargs...)
}

// DeleteAllOfClusterRoleBinding mocks base method.
func (m *MockClusterRoleBindingClient) DeleteAllOfClusterRoleBinding(arg0 context.Context, arg1 ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfClusterRoleBinding indicates an expected call of DeleteAllOfClusterRoleBinding.
func (mr *MockClusterRoleBindingClientMockRecorder) DeleteAllOfClusterRoleBinding(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfClusterRoleBinding", reflect.TypeOf((*MockClusterRoleBindingClient)(nil).DeleteAllOfClusterRoleBinding), varargs...)
}

// DeleteClusterRoleBinding mocks base method.
func (m *MockClusterRoleBindingClient) DeleteClusterRoleBinding(arg0 context.Context, arg1 string, arg2 ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRoleBinding indicates an expected call of DeleteClusterRoleBinding.
func (mr *MockClusterRoleBindingClientMockRecorder) DeleteClusterRoleBinding(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRoleBinding", reflect.TypeOf((*MockClusterRoleBindingClient)(nil).DeleteClusterRoleBinding), varargs...)
}

// GetClusterRoleBinding mocks base method.
func (m *MockClusterRoleBindingClient) GetClusterRoleBinding(arg0 context.Context, arg1 string) (*v10.ClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleBinding", arg0, arg1)
	ret0, _ := ret[0].(*v10.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleBinding indicates an expected call of GetClusterRoleBinding.
func (mr *MockClusterRoleBindingClientMockRecorder) GetClusterRoleBinding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleBinding", reflect.TypeOf((*MockClusterRoleBindingClient)(nil).GetClusterRoleBinding), arg0, arg1)
}

// ListClusterRoleBinding mocks base method.
func (m *MockClusterRoleBindingClient) ListClusterRoleBinding(arg0 context.Context, arg1 ...client.ListOption) (*v10.ClusterRoleBindingList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(*v10.ClusterRoleBindingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterRoleBinding indicates an expected call of ListClusterRoleBinding.
func (mr *MockClusterRoleBindingClientMockRecorder) ListClusterRoleBinding(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterRoleBinding", reflect.TypeOf((*MockClusterRoleBindingClient)(nil).ListClusterRoleBinding), varargs...)
}

// PatchClusterRoleBinding mocks base method.
func (m *MockClusterRoleBindingClient) PatchClusterRoleBinding(arg0 context.Context, arg1 *v10.ClusterRoleBinding, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleBinding indicates an expected call of PatchClusterRoleBinding.
func (mr *MockClusterRoleBindingClientMockRecorder) PatchClusterRoleBinding(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleBinding", reflect.TypeOf((*MockClusterRoleBindingClient)(nil).PatchClusterRoleBinding), varargs...)
}

// PatchClusterRoleBindingStatus mocks base method.
func (m *MockClusterRoleBindingClient) PatchClusterRoleBindingStatus(arg0 context.Context, arg1 *v10.ClusterRoleBinding, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchClusterRoleBindingStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleBindingStatus indicates an expected call of PatchClusterRoleBindingStatus.
func (mr *MockClusterRoleBindingClientMockRecorder) PatchClusterRoleBindingStatus(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleBindingStatus", reflect.TypeOf((*MockClusterRoleBindingClient)(nil).PatchClusterRoleBindingStatus), varargs...)
}

// UpdateClusterRoleBinding mocks base method.
func (m *MockClusterRoleBindingClient) UpdateClusterRoleBinding(arg0 context.Context, arg1 *v10.ClusterRoleBinding, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterRoleBinding indicates an expected call of UpdateClusterRoleBinding.
func (mr *MockClusterRoleBindingClientMockRecorder) UpdateClusterRoleBinding(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterRoleBinding", reflect.TypeOf((*MockClusterRoleBindingClient)(nil).UpdateClusterRoleBinding), varargs...)
}

// UpdateClusterRoleBindingStatus mocks base method.
func (m *MockClusterRoleBindingClient) UpdateClusterRoleBindingStatus(arg0 context.Context, arg1 *v10.ClusterRoleBinding, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterRoleBindingStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterRoleBindingStatus indicates an expected call of UpdateClusterRoleBindingStatus.
func (mr *MockClusterRoleBindingClientMockRecorder) UpdateClusterRoleBindingStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterRoleBindingStatus", reflect.TypeOf((*MockClusterRoleBindingClient)(nil).UpdateClusterRoleBindingStatus), varargs...)
}

// UpsertClusterRoleBinding mocks base method.
func (m *MockClusterRoleBindingClient) UpsertClusterRoleBinding(arg0 context.Context, arg1 *v10.ClusterRoleBinding, arg2 ...v1.ClusterRoleBindingTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertClusterRoleBinding indicates an expected call of UpsertClusterRoleBinding.
func (mr *MockClusterRoleBindingClientMockRecorder) UpsertClusterRoleBinding(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertClusterRoleBinding", reflect.TypeOf((*MockClusterRoleBindingClient)(nil).UpsertClusterRoleBinding), varargs...)
}
