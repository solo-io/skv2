// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/skv2/pkg/generated/kubernetes/rbac.authorization.k8s.io/v1 (interfaces: Clientset,ClusterRoleBindingClient,RoleBindingClient,ClusterRoleClient,RoleClient)

// Package mock_k8s_rbac_clients is a generated GoMock package.
package mock_k8s_rbac_clients

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/skv2/pkg/generated/kubernetes/rbac.authorization.k8s.io/v1"
	v10 "k8s.io/api/rbac/v1"
	types "k8s.io/apimachinery/pkg/types"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockClientset is a mock of Clientset interface.
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset.
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance.
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// ClusterRoleBindings mocks base method.
func (m *MockClientset) ClusterRoleBindings() v1.ClusterRoleBindingClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterRoleBindings")
	ret0, _ := ret[0].(v1.ClusterRoleBindingClient)
	return ret0
}

// ClusterRoleBindings indicates an expected call of ClusterRoleBindings.
func (mr *MockClientsetMockRecorder) ClusterRoleBindings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterRoleBindings", reflect.TypeOf((*MockClientset)(nil).ClusterRoleBindings))
}

// ClusterRoles mocks base method.
func (m *MockClientset) ClusterRoles() v1.ClusterRoleClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterRoles")
	ret0, _ := ret[0].(v1.ClusterRoleClient)
	return ret0
}

// ClusterRoles indicates an expected call of ClusterRoles.
func (mr *MockClientsetMockRecorder) ClusterRoles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterRoles", reflect.TypeOf((*MockClientset)(nil).ClusterRoles))
}

// RoleBindings mocks base method.
func (m *MockClientset) RoleBindings() v1.RoleBindingClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleBindings")
	ret0, _ := ret[0].(v1.RoleBindingClient)
	return ret0
}

// RoleBindings indicates an expected call of RoleBindings.
func (mr *MockClientsetMockRecorder) RoleBindings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleBindings", reflect.TypeOf((*MockClientset)(nil).RoleBindings))
}

// Roles mocks base method.
func (m *MockClientset) Roles() v1.RoleClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roles")
	ret0, _ := ret[0].(v1.RoleClient)
	return ret0
}

// Roles indicates an expected call of Roles.
func (mr *MockClientsetMockRecorder) Roles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roles", reflect.TypeOf((*MockClientset)(nil).Roles))
}

// MockClusterRoleBindingClient is a mock of ClusterRoleBindingClient interface.
type MockClusterRoleBindingClient struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRoleBindingClientMockRecorder
}

// MockClusterRoleBindingClientMockRecorder is the mock recorder for MockClusterRoleBindingClient.
type MockClusterRoleBindingClientMockRecorder struct {
	mock *MockClusterRoleBindingClient
}

// NewMockClusterRoleBindingClient creates a new mock instance.
func NewMockClusterRoleBindingClient(ctrl *gomock.Controller) *MockClusterRoleBindingClient {
	mock := &MockClusterRoleBindingClient{ctrl: ctrl}
	mock.recorder = &MockClusterRoleBindingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterRoleBindingClient) EXPECT() *MockClusterRoleBindingClientMockRecorder {
	return m.recorder
}

// CreateClusterRoleBinding mocks base method.
func (m *MockClusterRoleBindingClient) CreateClusterRoleBinding(arg0 context.Context, arg1 *v10.ClusterRoleBinding, arg2 ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClusterRoleBinding indicates an expected call of CreateClusterRoleBinding.
func (mr *MockClusterRoleBindingClientMockRecorder) CreateClusterRoleBinding(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterRoleBinding", reflect.TypeOf((*MockClusterRoleBindingClient)(nil).CreateClusterRoleBinding), varargs...)
}

// DeleteAllOfClusterRoleBinding mocks base method.
func (m *MockClusterRoleBindingClient) DeleteAllOfClusterRoleBinding(arg0 context.Context, arg1 ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfClusterRoleBinding indicates an expected call of DeleteAllOfClusterRoleBinding.
func (mr *MockClusterRoleBindingClientMockRecorder) DeleteAllOfClusterRoleBinding(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfClusterRoleBinding", reflect.TypeOf((*MockClusterRoleBindingClient)(nil).DeleteAllOfClusterRoleBinding), varargs...)
}

// DeleteClusterRoleBinding mocks base method.
func (m *MockClusterRoleBindingClient) DeleteClusterRoleBinding(arg0 context.Context, arg1 string, arg2 ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRoleBinding indicates an expected call of DeleteClusterRoleBinding.
func (mr *MockClusterRoleBindingClientMockRecorder) DeleteClusterRoleBinding(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRoleBinding", reflect.TypeOf((*MockClusterRoleBindingClient)(nil).DeleteClusterRoleBinding), varargs...)
}

// GetClusterRoleBinding mocks base method.
func (m *MockClusterRoleBindingClient) GetClusterRoleBinding(arg0 context.Context, arg1 string) (*v10.ClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRoleBinding", arg0, arg1)
	ret0, _ := ret[0].(*v10.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleBinding indicates an expected call of GetClusterRoleBinding.
func (mr *MockClusterRoleBindingClientMockRecorder) GetClusterRoleBinding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleBinding", reflect.TypeOf((*MockClusterRoleBindingClient)(nil).GetClusterRoleBinding), arg0, arg1)
}

// ListClusterRoleBinding mocks base method.
func (m *MockClusterRoleBindingClient) ListClusterRoleBinding(arg0 context.Context, arg1 ...client.ListOption) (*v10.ClusterRoleBindingList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(*v10.ClusterRoleBindingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterRoleBinding indicates an expected call of ListClusterRoleBinding.
func (mr *MockClusterRoleBindingClientMockRecorder) ListClusterRoleBinding(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterRoleBinding", reflect.TypeOf((*MockClusterRoleBindingClient)(nil).ListClusterRoleBinding), varargs...)
}

// PatchClusterRoleBinding mocks base method.
func (m *MockClusterRoleBindingClient) PatchClusterRoleBinding(arg0 context.Context, arg1 *v10.ClusterRoleBinding, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleBinding indicates an expected call of PatchClusterRoleBinding.
func (mr *MockClusterRoleBindingClientMockRecorder) PatchClusterRoleBinding(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleBinding", reflect.TypeOf((*MockClusterRoleBindingClient)(nil).PatchClusterRoleBinding), varargs...)
}

// PatchClusterRoleBindingStatus mocks base method.
func (m *MockClusterRoleBindingClient) PatchClusterRoleBindingStatus(arg0 context.Context, arg1 *v10.ClusterRoleBinding, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchClusterRoleBindingStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleBindingStatus indicates an expected call of PatchClusterRoleBindingStatus.
func (mr *MockClusterRoleBindingClientMockRecorder) PatchClusterRoleBindingStatus(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleBindingStatus", reflect.TypeOf((*MockClusterRoleBindingClient)(nil).PatchClusterRoleBindingStatus), varargs...)
}

// UpdateClusterRoleBinding mocks base method.
func (m *MockClusterRoleBindingClient) UpdateClusterRoleBinding(arg0 context.Context, arg1 *v10.ClusterRoleBinding, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterRoleBinding indicates an expected call of UpdateClusterRoleBinding.
func (mr *MockClusterRoleBindingClientMockRecorder) UpdateClusterRoleBinding(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterRoleBinding", reflect.TypeOf((*MockClusterRoleBindingClient)(nil).UpdateClusterRoleBinding), varargs...)
}

// UpdateClusterRoleBindingStatus mocks base method.
func (m *MockClusterRoleBindingClient) UpdateClusterRoleBindingStatus(arg0 context.Context, arg1 *v10.ClusterRoleBinding, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterRoleBindingStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterRoleBindingStatus indicates an expected call of UpdateClusterRoleBindingStatus.
func (mr *MockClusterRoleBindingClientMockRecorder) UpdateClusterRoleBindingStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterRoleBindingStatus", reflect.TypeOf((*MockClusterRoleBindingClient)(nil).UpdateClusterRoleBindingStatus), varargs...)
}

// UpsertClusterRoleBinding mocks base method.
func (m *MockClusterRoleBindingClient) UpsertClusterRoleBinding(arg0 context.Context, arg1 *v10.ClusterRoleBinding, arg2 ...v1.ClusterRoleBindingTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertClusterRoleBinding indicates an expected call of UpsertClusterRoleBinding.
func (mr *MockClusterRoleBindingClientMockRecorder) UpsertClusterRoleBinding(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertClusterRoleBinding", reflect.TypeOf((*MockClusterRoleBindingClient)(nil).UpsertClusterRoleBinding), varargs...)
}

// MockRoleBindingClient is a mock of RoleBindingClient interface.
type MockRoleBindingClient struct {
	ctrl     *gomock.Controller
	recorder *MockRoleBindingClientMockRecorder
}

// MockRoleBindingClientMockRecorder is the mock recorder for MockRoleBindingClient.
type MockRoleBindingClientMockRecorder struct {
	mock *MockRoleBindingClient
}

// NewMockRoleBindingClient creates a new mock instance.
func NewMockRoleBindingClient(ctrl *gomock.Controller) *MockRoleBindingClient {
	mock := &MockRoleBindingClient{ctrl: ctrl}
	mock.recorder = &MockRoleBindingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleBindingClient) EXPECT() *MockRoleBindingClientMockRecorder {
	return m.recorder
}

// CreateRoleBinding mocks base method.
func (m *MockRoleBindingClient) CreateRoleBinding(arg0 context.Context, arg1 *v10.RoleBinding, arg2 ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoleBinding indicates an expected call of CreateRoleBinding.
func (mr *MockRoleBindingClientMockRecorder) CreateRoleBinding(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoleBinding", reflect.TypeOf((*MockRoleBindingClient)(nil).CreateRoleBinding), varargs...)
}

// DeleteAllOfRoleBinding mocks base method.
func (m *MockRoleBindingClient) DeleteAllOfRoleBinding(arg0 context.Context, arg1 ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfRoleBinding indicates an expected call of DeleteAllOfRoleBinding.
func (mr *MockRoleBindingClientMockRecorder) DeleteAllOfRoleBinding(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfRoleBinding", reflect.TypeOf((*MockRoleBindingClient)(nil).DeleteAllOfRoleBinding), varargs...)
}

// DeleteRoleBinding mocks base method.
func (m *MockRoleBindingClient) DeleteRoleBinding(arg0 context.Context, arg1 types.NamespacedName, arg2 ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleBinding indicates an expected call of DeleteRoleBinding.
func (mr *MockRoleBindingClientMockRecorder) DeleteRoleBinding(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleBinding", reflect.TypeOf((*MockRoleBindingClient)(nil).DeleteRoleBinding), varargs...)
}

// GetRoleBinding mocks base method.
func (m *MockRoleBindingClient) GetRoleBinding(arg0 context.Context, arg1 types.NamespacedName) (*v10.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleBinding", arg0, arg1)
	ret0, _ := ret[0].(*v10.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleBinding indicates an expected call of GetRoleBinding.
func (mr *MockRoleBindingClientMockRecorder) GetRoleBinding(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleBinding", reflect.TypeOf((*MockRoleBindingClient)(nil).GetRoleBinding), arg0, arg1)
}

// ListRoleBinding mocks base method.
func (m *MockRoleBindingClient) ListRoleBinding(arg0 context.Context, arg1 ...client.ListOption) (*v10.RoleBindingList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoleBinding", varargs...)
	ret0, _ := ret[0].(*v10.RoleBindingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoleBinding indicates an expected call of ListRoleBinding.
func (mr *MockRoleBindingClientMockRecorder) ListRoleBinding(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoleBinding", reflect.TypeOf((*MockRoleBindingClient)(nil).ListRoleBinding), varargs...)
}

// PatchRoleBinding mocks base method.
func (m *MockRoleBindingClient) PatchRoleBinding(arg0 context.Context, arg1 *v10.RoleBinding, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRoleBinding indicates an expected call of PatchRoleBinding.
func (mr *MockRoleBindingClientMockRecorder) PatchRoleBinding(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRoleBinding", reflect.TypeOf((*MockRoleBindingClient)(nil).PatchRoleBinding), varargs...)
}

// PatchRoleBindingStatus mocks base method.
func (m *MockRoleBindingClient) PatchRoleBindingStatus(arg0 context.Context, arg1 *v10.RoleBinding, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRoleBindingStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRoleBindingStatus indicates an expected call of PatchRoleBindingStatus.
func (mr *MockRoleBindingClientMockRecorder) PatchRoleBindingStatus(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRoleBindingStatus", reflect.TypeOf((*MockRoleBindingClient)(nil).PatchRoleBindingStatus), varargs...)
}

// UpdateRoleBinding mocks base method.
func (m *MockRoleBindingClient) UpdateRoleBinding(arg0 context.Context, arg1 *v10.RoleBinding, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoleBinding indicates an expected call of UpdateRoleBinding.
func (mr *MockRoleBindingClientMockRecorder) UpdateRoleBinding(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleBinding", reflect.TypeOf((*MockRoleBindingClient)(nil).UpdateRoleBinding), varargs...)
}

// UpdateRoleBindingStatus mocks base method.
func (m *MockRoleBindingClient) UpdateRoleBindingStatus(arg0 context.Context, arg1 *v10.RoleBinding, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoleBindingStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoleBindingStatus indicates an expected call of UpdateRoleBindingStatus.
func (mr *MockRoleBindingClientMockRecorder) UpdateRoleBindingStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleBindingStatus", reflect.TypeOf((*MockRoleBindingClient)(nil).UpdateRoleBindingStatus), varargs...)
}

// UpsertRoleBinding mocks base method.
func (m *MockRoleBindingClient) UpsertRoleBinding(arg0 context.Context, arg1 *v10.RoleBinding, arg2 ...v1.RoleBindingTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRoleBinding indicates an expected call of UpsertRoleBinding.
func (mr *MockRoleBindingClientMockRecorder) UpsertRoleBinding(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRoleBinding", reflect.TypeOf((*MockRoleBindingClient)(nil).UpsertRoleBinding), varargs...)
}

// MockClusterRoleClient is a mock of ClusterRoleClient interface.
type MockClusterRoleClient struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRoleClientMockRecorder
}

// MockClusterRoleClientMockRecorder is the mock recorder for MockClusterRoleClient.
type MockClusterRoleClientMockRecorder struct {
	mock *MockClusterRoleClient
}

// NewMockClusterRoleClient creates a new mock instance.
func NewMockClusterRoleClient(ctrl *gomock.Controller) *MockClusterRoleClient {
	mock := &MockClusterRoleClient{ctrl: ctrl}
	mock.recorder = &MockClusterRoleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterRoleClient) EXPECT() *MockClusterRoleClientMockRecorder {
	return m.recorder
}

// CreateClusterRole mocks base method.
func (m *MockClusterRoleClient) CreateClusterRole(arg0 context.Context, arg1 *v10.ClusterRole, arg2 ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClusterRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClusterRole indicates an expected call of CreateClusterRole.
func (mr *MockClusterRoleClientMockRecorder) CreateClusterRole(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterRole", reflect.TypeOf((*MockClusterRoleClient)(nil).CreateClusterRole), varargs...)
}

// DeleteAllOfClusterRole mocks base method.
func (m *MockClusterRoleClient) DeleteAllOfClusterRole(arg0 context.Context, arg1 ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfClusterRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfClusterRole indicates an expected call of DeleteAllOfClusterRole.
func (mr *MockClusterRoleClientMockRecorder) DeleteAllOfClusterRole(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfClusterRole", reflect.TypeOf((*MockClusterRoleClient)(nil).DeleteAllOfClusterRole), varargs...)
}

// DeleteClusterRole mocks base method.
func (m *MockClusterRoleClient) DeleteClusterRole(arg0 context.Context, arg1 string, arg2 ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteClusterRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRole indicates an expected call of DeleteClusterRole.
func (mr *MockClusterRoleClientMockRecorder) DeleteClusterRole(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRole", reflect.TypeOf((*MockClusterRoleClient)(nil).DeleteClusterRole), varargs...)
}

// GetClusterRole mocks base method.
func (m *MockClusterRoleClient) GetClusterRole(arg0 context.Context, arg1 string) (*v10.ClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterRole", arg0, arg1)
	ret0, _ := ret[0].(*v10.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRole indicates an expected call of GetClusterRole.
func (mr *MockClusterRoleClientMockRecorder) GetClusterRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRole", reflect.TypeOf((*MockClusterRoleClient)(nil).GetClusterRole), arg0, arg1)
}

// ListClusterRole mocks base method.
func (m *MockClusterRoleClient) ListClusterRole(arg0 context.Context, arg1 ...client.ListOption) (*v10.ClusterRoleList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusterRole", varargs...)
	ret0, _ := ret[0].(*v10.ClusterRoleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterRole indicates an expected call of ListClusterRole.
func (mr *MockClusterRoleClientMockRecorder) ListClusterRole(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterRole", reflect.TypeOf((*MockClusterRoleClient)(nil).ListClusterRole), varargs...)
}

// PatchClusterRole mocks base method.
func (m *MockClusterRoleClient) PatchClusterRole(arg0 context.Context, arg1 *v10.ClusterRole, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchClusterRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRole indicates an expected call of PatchClusterRole.
func (mr *MockClusterRoleClientMockRecorder) PatchClusterRole(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRole", reflect.TypeOf((*MockClusterRoleClient)(nil).PatchClusterRole), varargs...)
}

// PatchClusterRoleStatus mocks base method.
func (m *MockClusterRoleClient) PatchClusterRoleStatus(arg0 context.Context, arg1 *v10.ClusterRole, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchClusterRoleStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchClusterRoleStatus indicates an expected call of PatchClusterRoleStatus.
func (mr *MockClusterRoleClientMockRecorder) PatchClusterRoleStatus(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchClusterRoleStatus", reflect.TypeOf((*MockClusterRoleClient)(nil).PatchClusterRoleStatus), varargs...)
}

// UpdateClusterRole mocks base method.
func (m *MockClusterRoleClient) UpdateClusterRole(arg0 context.Context, arg1 *v10.ClusterRole, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterRole indicates an expected call of UpdateClusterRole.
func (mr *MockClusterRoleClientMockRecorder) UpdateClusterRole(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterRole", reflect.TypeOf((*MockClusterRoleClient)(nil).UpdateClusterRole), varargs...)
}

// UpdateClusterRoleStatus mocks base method.
func (m *MockClusterRoleClient) UpdateClusterRoleStatus(arg0 context.Context, arg1 *v10.ClusterRole, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterRoleStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterRoleStatus indicates an expected call of UpdateClusterRoleStatus.
func (mr *MockClusterRoleClientMockRecorder) UpdateClusterRoleStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterRoleStatus", reflect.TypeOf((*MockClusterRoleClient)(nil).UpdateClusterRoleStatus), varargs...)
}

// UpsertClusterRole mocks base method.
func (m *MockClusterRoleClient) UpsertClusterRole(arg0 context.Context, arg1 *v10.ClusterRole, arg2 ...v1.ClusterRoleTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertClusterRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertClusterRole indicates an expected call of UpsertClusterRole.
func (mr *MockClusterRoleClientMockRecorder) UpsertClusterRole(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertClusterRole", reflect.TypeOf((*MockClusterRoleClient)(nil).UpsertClusterRole), varargs...)
}

// MockRoleClient is a mock of RoleClient interface.
type MockRoleClient struct {
	ctrl     *gomock.Controller
	recorder *MockRoleClientMockRecorder
}

// MockRoleClientMockRecorder is the mock recorder for MockRoleClient.
type MockRoleClientMockRecorder struct {
	mock *MockRoleClient
}

// NewMockRoleClient creates a new mock instance.
func NewMockRoleClient(ctrl *gomock.Controller) *MockRoleClient {
	mock := &MockRoleClient{ctrl: ctrl}
	mock.recorder = &MockRoleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleClient) EXPECT() *MockRoleClientMockRecorder {
	return m.recorder
}

// CreateRole mocks base method.
func (m *MockRoleClient) CreateRole(arg0 context.Context, arg1 *v10.Role, arg2 ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockRoleClientMockRecorder) CreateRole(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRoleClient)(nil).CreateRole), varargs...)
}

// DeleteAllOfRole mocks base method.
func (m *MockRoleClient) DeleteAllOfRole(arg0 context.Context, arg1 ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfRole indicates an expected call of DeleteAllOfRole.
func (mr *MockRoleClientMockRecorder) DeleteAllOfRole(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfRole", reflect.TypeOf((*MockRoleClient)(nil).DeleteAllOfRole), varargs...)
}

// DeleteRole mocks base method.
func (m *MockRoleClient) DeleteRole(arg0 context.Context, arg1 types.NamespacedName, arg2 ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockRoleClientMockRecorder) DeleteRole(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockRoleClient)(nil).DeleteRole), varargs...)
}

// GetRole mocks base method.
func (m *MockRoleClient) GetRole(arg0 context.Context, arg1 types.NamespacedName) (*v10.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", arg0, arg1)
	ret0, _ := ret[0].(*v10.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockRoleClientMockRecorder) GetRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockRoleClient)(nil).GetRole), arg0, arg1)
}

// ListRole mocks base method.
func (m *MockRoleClient) ListRole(arg0 context.Context, arg1 ...client.ListOption) (*v10.RoleList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRole", varargs...)
	ret0, _ := ret[0].(*v10.RoleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRole indicates an expected call of ListRole.
func (mr *MockRoleClientMockRecorder) ListRole(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRole", reflect.TypeOf((*MockRoleClient)(nil).ListRole), varargs...)
}

// PatchRole mocks base method.
func (m *MockRoleClient) PatchRole(arg0 context.Context, arg1 *v10.Role, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRole indicates an expected call of PatchRole.
func (mr *MockRoleClientMockRecorder) PatchRole(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRole", reflect.TypeOf((*MockRoleClient)(nil).PatchRole), varargs...)
}

// PatchRoleStatus mocks base method.
func (m *MockRoleClient) PatchRoleStatus(arg0 context.Context, arg1 *v10.Role, arg2 client.Patch, arg3 ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRoleStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRoleStatus indicates an expected call of PatchRoleStatus.
func (mr *MockRoleClientMockRecorder) PatchRoleStatus(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRoleStatus", reflect.TypeOf((*MockRoleClient)(nil).PatchRoleStatus), varargs...)
}

// UpdateRole mocks base method.
func (m *MockRoleClient) UpdateRole(arg0 context.Context, arg1 *v10.Role, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockRoleClientMockRecorder) UpdateRole(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockRoleClient)(nil).UpdateRole), varargs...)
}

// UpdateRoleStatus mocks base method.
func (m *MockRoleClient) UpdateRoleStatus(arg0 context.Context, arg1 *v10.Role, arg2 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoleStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoleStatus indicates an expected call of UpdateRoleStatus.
func (mr *MockRoleClientMockRecorder) UpdateRoleStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleStatus", reflect.TypeOf((*MockRoleClient)(nil).UpdateRoleStatus), varargs...)
}

// UpsertRole mocks base method.
func (m *MockRoleClient) UpsertRole(arg0 context.Context, arg1 *v10.Role, arg2 ...v1.RoleTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRole indicates an expected call of UpsertRole.
func (mr *MockRoleClientMockRecorder) UpsertRole(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRole", reflect.TypeOf((*MockRoleClient)(nil).UpsertRole), varargs...)
}
