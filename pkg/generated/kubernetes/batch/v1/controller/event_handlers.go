// Code generated by skv2. DO NOT EDIT.

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	batch_v1 "k8s.io/api/batch/v1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"k8s.io/apimachinery/pkg/runtime"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the Job Resource
// DEPRECATED: Prefer reconciler pattern.
type JobEventHandler interface {
	CreateJob(obj *batch_v1.Job) error
	UpdateJob(old, new *batch_v1.Job) error
	DeleteJob(obj *batch_v1.Job) error
	GenericJob(obj *batch_v1.Job) error
}

type JobEventHandlerFuncs struct {
	OnCreate  func(obj *batch_v1.Job) error
	OnUpdate  func(old, new *batch_v1.Job) error
	OnDelete  func(obj *batch_v1.Job) error
	OnGeneric func(obj *batch_v1.Job) error
}

func (f *JobEventHandlerFuncs) CreateJob(obj *batch_v1.Job) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *JobEventHandlerFuncs) DeleteJob(obj *batch_v1.Job) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *JobEventHandlerFuncs) UpdateJob(objOld, objNew *batch_v1.Job) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *JobEventHandlerFuncs) GenericJob(obj *batch_v1.Job) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type JobEventWatcher interface {
	AddEventHandler(ctx context.Context, h JobEventHandler, predicates ...predicate.Predicate) error
}

type jobEventWatcher struct {
	watcher events.EventWatcher
}

func NewJobEventWatcher(name string, mgr manager.Manager) JobEventWatcher {
	return &jobEventWatcher{
		watcher: events.NewWatcher(name, mgr, &batch_v1.Job{}),
	}
}

func (c *jobEventWatcher) AddEventHandler(ctx context.Context, h JobEventHandler, predicates ...predicate.Predicate) error {
	handler := genericJobHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericJobHandler implements a generic events.EventHandler
type genericJobHandler struct {
	handler JobEventHandler
}

func (h genericJobHandler) Create(object runtime.Object) error {
	obj, ok := object.(*batch_v1.Job)
	if !ok {
		return errors.Errorf("internal error: Job handler received event for %T", object)
	}
	return h.handler.CreateJob(obj)
}

func (h genericJobHandler) Delete(object runtime.Object) error {
	obj, ok := object.(*batch_v1.Job)
	if !ok {
		return errors.Errorf("internal error: Job handler received event for %T", object)
	}
	return h.handler.DeleteJob(obj)
}

func (h genericJobHandler) Update(old, new runtime.Object) error {
	objOld, ok := old.(*batch_v1.Job)
	if !ok {
		return errors.Errorf("internal error: Job handler received event for %T", old)
	}
	objNew, ok := new.(*batch_v1.Job)
	if !ok {
		return errors.Errorf("internal error: Job handler received event for %T", new)
	}
	return h.handler.UpdateJob(objOld, objNew)
}

func (h genericJobHandler) Generic(object runtime.Object) error {
	obj, ok := object.(*batch_v1.Job)
	if !ok {
		return errors.Errorf("internal error: Job handler received event for %T", object)
	}
	return h.handler.GenericJob(obj)
}
