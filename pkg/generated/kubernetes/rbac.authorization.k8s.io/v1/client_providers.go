// Code generated by skv2. DO NOT EDIT.

package v1

import (
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

/*
  The intention of these providers are to be used for Mocking.
  They expose the Clients as interfaces, as well as factories to provide mocked versions
  of the clients when they require building within a component.

  See package `github.com/solo-io/skv2/pkg/multicluster/register` for example
*/

// Provider for RoleClient from Client
func RoleClientProvider(client client.Client) RoleClient {
	return NewRoleClient(client)
}

type RoleClientFactory func(client client.Client) RoleClient

func RoleClientFactoryProvider() RoleClientFactory {
	return RoleClientProvider
}

type RoleClientFromConfigFactory func(cfg *rest.Config) (RoleClient, error)

func RoleClientFromConfigFactoryProvider() RoleClientFromConfigFactory {
	return func(cfg *rest.Config) (RoleClient, error) {
		clients, err := NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.Roles(), nil
	}
}

// Provider for RoleBindingClient from Client
func RoleBindingClientProvider(client client.Client) RoleBindingClient {
	return NewRoleBindingClient(client)
}

type RoleBindingClientFactory func(client client.Client) RoleBindingClient

func RoleBindingClientFactoryProvider() RoleBindingClientFactory {
	return RoleBindingClientProvider
}

type RoleBindingClientFromConfigFactory func(cfg *rest.Config) (RoleBindingClient, error)

func RoleBindingClientFromConfigFactoryProvider() RoleBindingClientFromConfigFactory {
	return func(cfg *rest.Config) (RoleBindingClient, error) {
		clients, err := NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.RoleBindings(), nil
	}
}

// Provider for ClusterRoleClient from Client
func ClusterRoleClientProvider(client client.Client) ClusterRoleClient {
	return NewClusterRoleClient(client)
}

type ClusterRoleClientFactory func(client client.Client) ClusterRoleClient

func ClusterRoleClientFactoryProvider() ClusterRoleClientFactory {
	return ClusterRoleClientProvider
}

type ClusterRoleClientFromConfigFactory func(cfg *rest.Config) (ClusterRoleClient, error)

func ClusterRoleClientFromConfigFactoryProvider() ClusterRoleClientFromConfigFactory {
	return func(cfg *rest.Config) (ClusterRoleClient, error) {
		clients, err := NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.ClusterRoles(), nil
	}
}

// Provider for ClusterRoleBindingClient from Client
func ClusterRoleBindingClientProvider(client client.Client) ClusterRoleBindingClient {
	return NewClusterRoleBindingClient(client)
}

type ClusterRoleBindingClientFactory func(client client.Client) ClusterRoleBindingClient

func ClusterRoleBindingClientFactoryProvider() ClusterRoleBindingClientFactory {
	return ClusterRoleBindingClientProvider
}

type ClusterRoleBindingClientFromConfigFactory func(cfg *rest.Config) (ClusterRoleBindingClient, error)

func ClusterRoleBindingClientFromConfigFactoryProvider() ClusterRoleBindingClientFromConfigFactory {
	return func(cfg *rest.Config) (ClusterRoleBindingClient, error) {
		clients, err := NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.ClusterRoleBindings(), nil
	}
}
