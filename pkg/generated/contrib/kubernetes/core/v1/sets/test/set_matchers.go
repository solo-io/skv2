// Code generated by skv2. DO NOT EDIT.

package v1_test

import (
	"fmt"

	"github.com/onsi/gomega/types"

	. "pkg/generated/contrib/kubernetes/sets"
)

func MatchServiceSet(expected ServiceSet) types.GomegaMatcher {
	return &serviceSetMatcher{
		expected: expected,
	}
}

type serviceSetMatcher struct {
	expected ServiceSet
}

func (matcher *serviceSetMatcher) Match(actual interface{}) (success bool, err error) {
	serviceSet, ok := actual.(ServiceSet)
	if !ok {
		return false, fmt.Errorf("MatchServiceSet expects a ServiceSet")
	}
	return matcher.expected.Equal(serviceSet), nil
}

func (matcher *serviceSetMatcher) FailureMessage(actual interface{}) (message string) {
	return fmt.Sprintf("Expected\n\t%#v\nto equal the set \n\t%#v", actual, matcher.expected)
}

func (matcher *serviceSetMatcher) NegatedFailureMessage(actual interface{}) (message string) {
	return fmt.Sprintf("Expected\n\t%#v\nnot to equal the set\n\t%#v", actual, matcher.expected)
}

func MatchPodSet(expected PodSet) types.GomegaMatcher {
	return &podSetMatcher{
		expected: expected,
	}
}

type podSetMatcher struct {
	expected PodSet
}

func (matcher *podSetMatcher) Match(actual interface{}) (success bool, err error) {
	podSet, ok := actual.(PodSet)
	if !ok {
		return false, fmt.Errorf("MatchPodSet expects a PodSet")
	}
	return matcher.expected.Equal(podSet), nil
}

func (matcher *podSetMatcher) FailureMessage(actual interface{}) (message string) {
	return fmt.Sprintf("Expected\n\t%#v\nto equal the set \n\t%#v", actual, matcher.expected)
}

func (matcher *podSetMatcher) NegatedFailureMessage(actual interface{}) (message string) {
	return fmt.Sprintf("Expected\n\t%#v\nnot to equal the set\n\t%#v", actual, matcher.expected)
}
