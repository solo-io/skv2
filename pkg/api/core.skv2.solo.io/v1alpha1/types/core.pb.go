// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/skv2/api/core/v1alpha1/core.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The State of a reconciled object
type State int32

const (
	// Waiting to be processed.
	State_Pending State = 0
	// Currently processing.
	State_Processing State = 1
	// Invalid parameters supplied, will not continue.
	State_Invalid State = 2
	// Failed during processing.
	State_Failed State = 3
	// Finished processing successfully.
	State_Succeeded State = 4
)

var State_name = map[int32]string{
	0: "Pending",
	1: "Processing",
	2: "Invalid",
	3: "Failed",
	4: "Succeeded",
}

var State_value = map[string]int32{
	"Pending":    0,
	"Processing": 1,
	"Invalid":    2,
	"Failed":     3,
	"Succeeded":  4,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}

func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a89b7bcde339f7f6, []int{0}
}

// Resource reference for an object
type ObjectRef struct {
	ApiGroup             *types.StringValue `protobuf:"bytes,1,opt,name=api_group,json=apiGroup,proto3" json:"api_group,omitempty"`
	Kind                 *types.StringValue `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Name                 string             `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string             `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ObjectRef) Reset()         { *m = ObjectRef{} }
func (m *ObjectRef) String() string { return proto.CompactTextString(m) }
func (*ObjectRef) ProtoMessage()    {}
func (*ObjectRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_a89b7bcde339f7f6, []int{0}
}
func (m *ObjectRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectRef.Unmarshal(m, b)
}
func (m *ObjectRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectRef.Marshal(b, m, deterministic)
}
func (m *ObjectRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectRef.Merge(m, src)
}
func (m *ObjectRef) XXX_Size() int {
	return xxx_messageInfo_ObjectRef.Size(m)
}
func (m *ObjectRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectRef.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectRef proto.InternalMessageInfo

func (m *ObjectRef) GetApiGroup() *types.StringValue {
	if m != nil {
		return m.ApiGroup
	}
	return nil
}

func (m *ObjectRef) GetKind() *types.StringValue {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *ObjectRef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ObjectRef) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func init() {
	proto.RegisterEnum("core.skv2.solo.io.State", State_name, State_value)
	proto.RegisterType((*ObjectRef)(nil), "core.skv2.solo.io.ObjectRef")
}

func init() {
	proto.RegisterFile("github.com/solo-io/skv2/api/core/v1alpha1/core.proto", fileDescriptor_a89b7bcde339f7f6)
}

var fileDescriptor_a89b7bcde339f7f6 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x4a, 0xeb, 0x40,
	0x14, 0x86, 0x6f, 0xda, 0xdc, 0xde, 0x9b, 0x29, 0xf7, 0x12, 0x07, 0x17, 0xa1, 0x94, 0x52, 0x5c,
	0x15, 0xc1, 0x8c, 0xad, 0x6e, 0xdc, 0x89, 0x0b, 0x45, 0x11, 0x2c, 0x2d, 0xb8, 0x70, 0x23, 0x93,
	0xe4, 0x74, 0x3a, 0x36, 0xcd, 0x19, 0x32, 0x93, 0x5a, 0xdf, 0x48, 0x7c, 0x02, 0x9f, 0xc7, 0x77,
	0x70, 0x2f, 0x33, 0x51, 0x8b, 0x0b, 0xc1, 0xd5, 0xfc, 0xe7, 0x3f, 0xff, 0xcf, 0x61, 0xf8, 0xc8,
	0xa1, 0x90, 0x66, 0x5e, 0x25, 0x71, 0x8a, 0x4b, 0xa6, 0x31, 0xc7, 0x3d, 0x89, 0x4c, 0x2f, 0x56,
	0x23, 0xc6, 0x95, 0x64, 0x29, 0x96, 0xc0, 0x56, 0x43, 0x9e, 0xab, 0x39, 0x1f, 0xba, 0x29, 0x56,
	0x25, 0x1a, 0xa4, 0x5b, 0x4e, 0xdb, 0x5c, 0x6c, 0x4b, 0xb1, 0xc4, 0x4e, 0x4f, 0x20, 0x8a, 0x1c,
	0x98, 0x0b, 0x24, 0xd5, 0x8c, 0xdd, 0x97, 0x5c, 0x29, 0x28, 0x75, 0x5d, 0xe9, 0x6c, 0x0b, 0x14,
	0xe8, 0x24, 0xb3, 0xea, 0xdd, 0xa5, 0xb0, 0x36, 0xb5, 0x09, 0x6b, 0x53, 0x7b, 0x3b, 0x4f, 0x1e,
	0x09, 0xae, 0x92, 0x3b, 0x48, 0xcd, 0x04, 0x66, 0xf4, 0x88, 0x04, 0x5c, 0xc9, 0x5b, 0x51, 0x62,
	0xa5, 0x22, 0xaf, 0xef, 0x0d, 0xda, 0xa3, 0x6e, 0x5c, 0xdf, 0x8a, 0x3f, 0x6e, 0xc5, 0x53, 0x53,
	0xca, 0x42, 0x5c, 0xf3, 0xbc, 0x82, 0xc9, 0x5f, 0xae, 0xe4, 0x99, 0x4d, 0xd3, 0x7d, 0xe2, 0x2f,
	0x64, 0x91, 0x45, 0x8d, 0x1f, 0xb4, 0x5c, 0x92, 0x52, 0xe2, 0x17, 0x7c, 0x09, 0x51, 0xb3, 0xef,
	0x0d, 0x82, 0x89, 0xd3, 0xb4, 0x4b, 0x02, 0xfb, 0x6a, 0xc5, 0x53, 0x88, 0x7c, 0xb7, 0xd8, 0x18,
	0xbb, 0x97, 0xe4, 0xf7, 0xd4, 0x70, 0x03, 0xb4, 0x4d, 0xfe, 0x8c, 0xa1, 0xc8, 0x64, 0x21, 0xc2,
	0x5f, 0xf4, 0x3f, 0x21, 0xe3, 0x12, 0x53, 0xd0, 0xda, 0xce, 0x9e, 0x5d, 0x9e, 0x17, 0x2b, 0x9e,
	0xcb, 0x2c, 0x6c, 0x50, 0x42, 0x5a, 0xa7, 0x5c, 0xe6, 0x90, 0x85, 0x4d, 0xfa, 0x8f, 0x04, 0xd3,
	0x2a, 0x4d, 0x01, 0x32, 0xc8, 0x42, 0xff, 0xe4, 0xe2, 0xf9, 0xd5, 0xf7, 0x1e, 0x5f, 0x7a, 0xde,
	0xcd, 0xf1, 0x77, 0x5c, 0xd4, 0x42, 0x7c, 0xb2, 0xf9, 0x42, 0x60, 0x03, 0xca, 0x3c, 0x28, 0xd0,
	0x49, 0xcb, 0xfd, 0xf3, 0xe0, 0x2d, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x74, 0x95, 0x06, 0xe2, 0x01,
	0x00, 0x00,
}

func (this *ObjectRef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ObjectRef)
	if !ok {
		that2, ok := that.(ObjectRef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiGroup.Equal(that1.ApiGroup) {
		return false
	}
	if !this.Kind.Equal(that1.Kind) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
