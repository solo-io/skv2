// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	multicluster_solo_io_v1alpha1 "github.com/solo-io/skv2/pkg/api/multicluster.solo.io/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the KubernetesCluster Resource
// DEPRECATED: Prefer reconciler pattern.
type KubernetesClusterEventHandler interface {
	CreateKubernetesCluster(obj *multicluster_solo_io_v1alpha1.KubernetesCluster) error
	UpdateKubernetesCluster(old, new *multicluster_solo_io_v1alpha1.KubernetesCluster) error
	DeleteKubernetesCluster(obj *multicluster_solo_io_v1alpha1.KubernetesCluster) error
	GenericKubernetesCluster(obj *multicluster_solo_io_v1alpha1.KubernetesCluster) error
}

type KubernetesClusterEventHandlerFuncs struct {
	OnCreate  func(obj *multicluster_solo_io_v1alpha1.KubernetesCluster) error
	OnUpdate  func(old, new *multicluster_solo_io_v1alpha1.KubernetesCluster) error
	OnDelete  func(obj *multicluster_solo_io_v1alpha1.KubernetesCluster) error
	OnGeneric func(obj *multicluster_solo_io_v1alpha1.KubernetesCluster) error
}

func (f *KubernetesClusterEventHandlerFuncs) CreateKubernetesCluster(obj *multicluster_solo_io_v1alpha1.KubernetesCluster) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *KubernetesClusterEventHandlerFuncs) DeleteKubernetesCluster(obj *multicluster_solo_io_v1alpha1.KubernetesCluster) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *KubernetesClusterEventHandlerFuncs) UpdateKubernetesCluster(objOld, objNew *multicluster_solo_io_v1alpha1.KubernetesCluster) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *KubernetesClusterEventHandlerFuncs) GenericKubernetesCluster(obj *multicluster_solo_io_v1alpha1.KubernetesCluster) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type KubernetesClusterEventWatcher interface {
	AddEventHandler(ctx context.Context, h KubernetesClusterEventHandler, predicates ...predicate.Predicate) error
}

type kubernetesClusterEventWatcher struct {
	watcher events.EventWatcher
}

func NewKubernetesClusterEventWatcher(name string, mgr manager.Manager) KubernetesClusterEventWatcher {
	return &kubernetesClusterEventWatcher{
		watcher: events.NewWatcher(name, mgr, &multicluster_solo_io_v1alpha1.KubernetesCluster{}),
	}
}

func (c *kubernetesClusterEventWatcher) AddEventHandler(ctx context.Context, h KubernetesClusterEventHandler, predicates ...predicate.Predicate) error {
	handler := genericKubernetesClusterHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericKubernetesClusterHandler implements a generic events.EventHandler
type genericKubernetesClusterHandler struct {
	handler KubernetesClusterEventHandler
}

func (h genericKubernetesClusterHandler) Create(object client.Object) error {
	obj, ok := object.(*multicluster_solo_io_v1alpha1.KubernetesCluster)
	if !ok {
		return errors.Errorf("internal error: KubernetesCluster handler received event for %T", object)
	}
	return h.handler.CreateKubernetesCluster(obj)
}

func (h genericKubernetesClusterHandler) Delete(object client.Object) error {
	obj, ok := object.(*multicluster_solo_io_v1alpha1.KubernetesCluster)
	if !ok {
		return errors.Errorf("internal error: KubernetesCluster handler received event for %T", object)
	}
	return h.handler.DeleteKubernetesCluster(obj)
}

func (h genericKubernetesClusterHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*multicluster_solo_io_v1alpha1.KubernetesCluster)
	if !ok {
		return errors.Errorf("internal error: KubernetesCluster handler received event for %T", old)
	}
	objNew, ok := new.(*multicluster_solo_io_v1alpha1.KubernetesCluster)
	if !ok {
		return errors.Errorf("internal error: KubernetesCluster handler received event for %T", new)
	}
	return h.handler.UpdateKubernetesCluster(objOld, objNew)
}

func (h genericKubernetesClusterHandler) Generic(object client.Object) error {
	obj, ok := object.(*multicluster_solo_io_v1alpha1.KubernetesCluster)
	if !ok {
		return errors.Errorf("internal error: KubernetesCluster handler received event for %T", object)
	}
	return h.handler.GenericKubernetesCluster(obj)
}
