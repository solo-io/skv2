// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	multicluster_solo_io_v1alpha1 "github.com/solo-io/skv2/pkg/api/multicluster.solo.io/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the KubernetesCluster Resource across clusters.
// implemented by the user
type MulticlusterKubernetesClusterReconciler interface {
	ReconcileKubernetesCluster(clusterName string, obj *multicluster_solo_io_v1alpha1.KubernetesCluster) (reconcile.Result, error)
}

// Reconcile deletion events for the KubernetesCluster Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterKubernetesClusterDeletionReconciler interface {
	ReconcileKubernetesClusterDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterKubernetesClusterReconcilerFuncs struct {
	OnReconcileKubernetesCluster         func(clusterName string, obj *multicluster_solo_io_v1alpha1.KubernetesCluster) (reconcile.Result, error)
	OnReconcileKubernetesClusterDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterKubernetesClusterReconcilerFuncs) ReconcileKubernetesCluster(clusterName string, obj *multicluster_solo_io_v1alpha1.KubernetesCluster) (reconcile.Result, error) {
	if f.OnReconcileKubernetesCluster == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileKubernetesCluster(clusterName, obj)
}

func (f *MulticlusterKubernetesClusterReconcilerFuncs) ReconcileKubernetesClusterDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileKubernetesClusterDeletion == nil {
		return nil
	}
	return f.OnReconcileKubernetesClusterDeletion(clusterName, req)
}

type MulticlusterKubernetesClusterReconcileLoop interface {
	// AddMulticlusterKubernetesClusterReconciler adds a MulticlusterKubernetesClusterReconciler to the MulticlusterKubernetesClusterReconcileLoop.
	AddMulticlusterKubernetesClusterReconciler(ctx context.Context, rec MulticlusterKubernetesClusterReconciler, predicates ...predicate.Predicate)
}

type multiclusterKubernetesClusterReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterKubernetesClusterReconcileLoop) AddMulticlusterKubernetesClusterReconciler(ctx context.Context, rec MulticlusterKubernetesClusterReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericKubernetesClusterMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterKubernetesClusterReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterKubernetesClusterReconcileLoop {
	return &multiclusterKubernetesClusterReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &multicluster_solo_io_v1alpha1.KubernetesCluster{}, options)}
}

type genericKubernetesClusterMulticlusterReconciler struct {
	reconciler MulticlusterKubernetesClusterReconciler
}

func (g genericKubernetesClusterMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterKubernetesClusterDeletionReconciler); ok {
		return deletionReconciler.ReconcileKubernetesClusterDeletion(cluster, req)
	}
	return nil
}

func (g genericKubernetesClusterMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*multicluster_solo_io_v1alpha1.KubernetesCluster)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: KubernetesCluster handler received event for %T", object)
	}
	return g.reconciler.ReconcileKubernetesCluster(cluster, obj)
}
