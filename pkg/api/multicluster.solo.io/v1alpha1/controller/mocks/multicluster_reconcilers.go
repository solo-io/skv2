// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/skv2/pkg/api/multicluster.solo.io/v1alpha1"
	controller "github.com/solo-io/skv2/pkg/api/multicluster.solo.io/v1alpha1/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockMulticlusterKubernetesClusterReconciler is a mock of MulticlusterKubernetesClusterReconciler interface.
type MockMulticlusterKubernetesClusterReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterKubernetesClusterReconcilerMockRecorder
}

// MockMulticlusterKubernetesClusterReconcilerMockRecorder is the mock recorder for MockMulticlusterKubernetesClusterReconciler.
type MockMulticlusterKubernetesClusterReconcilerMockRecorder struct {
	mock *MockMulticlusterKubernetesClusterReconciler
}

// NewMockMulticlusterKubernetesClusterReconciler creates a new mock instance.
func NewMockMulticlusterKubernetesClusterReconciler(ctrl *gomock.Controller) *MockMulticlusterKubernetesClusterReconciler {
	mock := &MockMulticlusterKubernetesClusterReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterKubernetesClusterReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterKubernetesClusterReconciler) EXPECT() *MockMulticlusterKubernetesClusterReconcilerMockRecorder {
	return m.recorder
}

// ReconcileKubernetesCluster mocks base method.
func (m *MockMulticlusterKubernetesClusterReconciler) ReconcileKubernetesCluster(clusterName string, obj *v1alpha1.KubernetesCluster) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileKubernetesCluster", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileKubernetesCluster indicates an expected call of ReconcileKubernetesCluster.
func (mr *MockMulticlusterKubernetesClusterReconcilerMockRecorder) ReconcileKubernetesCluster(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileKubernetesCluster", reflect.TypeOf((*MockMulticlusterKubernetesClusterReconciler)(nil).ReconcileKubernetesCluster), clusterName, obj)
}

// MockMulticlusterKubernetesClusterDeletionReconciler is a mock of MulticlusterKubernetesClusterDeletionReconciler interface.
type MockMulticlusterKubernetesClusterDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterKubernetesClusterDeletionReconcilerMockRecorder
}

// MockMulticlusterKubernetesClusterDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterKubernetesClusterDeletionReconciler.
type MockMulticlusterKubernetesClusterDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterKubernetesClusterDeletionReconciler
}

// NewMockMulticlusterKubernetesClusterDeletionReconciler creates a new mock instance.
func NewMockMulticlusterKubernetesClusterDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterKubernetesClusterDeletionReconciler {
	mock := &MockMulticlusterKubernetesClusterDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterKubernetesClusterDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterKubernetesClusterDeletionReconciler) EXPECT() *MockMulticlusterKubernetesClusterDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileKubernetesClusterDeletion mocks base method.
func (m *MockMulticlusterKubernetesClusterDeletionReconciler) ReconcileKubernetesClusterDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileKubernetesClusterDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileKubernetesClusterDeletion indicates an expected call of ReconcileKubernetesClusterDeletion.
func (mr *MockMulticlusterKubernetesClusterDeletionReconcilerMockRecorder) ReconcileKubernetesClusterDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileKubernetesClusterDeletion", reflect.TypeOf((*MockMulticlusterKubernetesClusterDeletionReconciler)(nil).ReconcileKubernetesClusterDeletion), clusterName, req)
}

// MockMulticlusterKubernetesClusterReconcileLoop is a mock of MulticlusterKubernetesClusterReconcileLoop interface.
type MockMulticlusterKubernetesClusterReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterKubernetesClusterReconcileLoopMockRecorder
}

// MockMulticlusterKubernetesClusterReconcileLoopMockRecorder is the mock recorder for MockMulticlusterKubernetesClusterReconcileLoop.
type MockMulticlusterKubernetesClusterReconcileLoopMockRecorder struct {
	mock *MockMulticlusterKubernetesClusterReconcileLoop
}

// NewMockMulticlusterKubernetesClusterReconcileLoop creates a new mock instance.
func NewMockMulticlusterKubernetesClusterReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterKubernetesClusterReconcileLoop {
	mock := &MockMulticlusterKubernetesClusterReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterKubernetesClusterReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterKubernetesClusterReconcileLoop) EXPECT() *MockMulticlusterKubernetesClusterReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterKubernetesClusterReconciler mocks base method.
func (m *MockMulticlusterKubernetesClusterReconcileLoop) AddMulticlusterKubernetesClusterReconciler(ctx context.Context, rec controller.MulticlusterKubernetesClusterReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterKubernetesClusterReconciler", varargs...)
}

// AddMulticlusterKubernetesClusterReconciler indicates an expected call of AddMulticlusterKubernetesClusterReconciler.
func (mr *MockMulticlusterKubernetesClusterReconcileLoopMockRecorder) AddMulticlusterKubernetesClusterReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterKubernetesClusterReconciler", reflect.TypeOf((*MockMulticlusterKubernetesClusterReconcileLoop)(nil).AddMulticlusterKubernetesClusterReconciler), varargs...)
}
