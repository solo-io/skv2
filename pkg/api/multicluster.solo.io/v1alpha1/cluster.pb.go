// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/skv2/api/multicluster/v1alpha1/cluster.proto

package v1alpha1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	v1alpha1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1alpha1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//Representation of a Kubernetes cluster that has been registered.
type KubernetesClusterSpec struct {
	// name of the secret which contains the kubeconfig with information to connect to the remote cluster.
	Secret               *v1alpha1.ObjectRef `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *KubernetesClusterSpec) Reset()         { *m = KubernetesClusterSpec{} }
func (m *KubernetesClusterSpec) String() string { return proto.CompactTextString(m) }
func (*KubernetesClusterSpec) ProtoMessage()    {}
func (*KubernetesClusterSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_533baf1d8d7a56a7, []int{0}
}
func (m *KubernetesClusterSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KubernetesClusterSpec.Unmarshal(m, b)
}
func (m *KubernetesClusterSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KubernetesClusterSpec.Marshal(b, m, deterministic)
}
func (m *KubernetesClusterSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubernetesClusterSpec.Merge(m, src)
}
func (m *KubernetesClusterSpec) XXX_Size() int {
	return xxx_messageInfo_KubernetesClusterSpec.Size(m)
}
func (m *KubernetesClusterSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_KubernetesClusterSpec.DiscardUnknown(m)
}

var xxx_messageInfo_KubernetesClusterSpec proto.InternalMessageInfo

func (m *KubernetesClusterSpec) GetSecret() *v1alpha1.ObjectRef {
	if m != nil {
		return m.Secret
	}
	return nil
}

type KubernetesClusterStatus struct {
	// List of statuses about the kubernetes cluster.
	// This list allows for multiple applications/pods to record their connection status.
	Status []*v1alpha1.Status `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty"`
	// version of kubernetes
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// cloud provider, empty if unknown
	Cloud string `protobuf:"bytes,3,opt,name=cloud,proto3" json:"cloud,omitempty"`
	// Discovered information can be found here: https://kubernetes.io/docs/reference/kubernetes-api/labels-annotations-taints/
	// Geographic location in which a kubernetes cluster resides
	Region string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	// The specific zone within a region in which a the cluster resides
	Zone                 string   `protobuf:"bytes,5,opt,name=zone,proto3" json:"zone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KubernetesClusterStatus) Reset()         { *m = KubernetesClusterStatus{} }
func (m *KubernetesClusterStatus) String() string { return proto.CompactTextString(m) }
func (*KubernetesClusterStatus) ProtoMessage()    {}
func (*KubernetesClusterStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_533baf1d8d7a56a7, []int{1}
}
func (m *KubernetesClusterStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KubernetesClusterStatus.Unmarshal(m, b)
}
func (m *KubernetesClusterStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KubernetesClusterStatus.Marshal(b, m, deterministic)
}
func (m *KubernetesClusterStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubernetesClusterStatus.Merge(m, src)
}
func (m *KubernetesClusterStatus) XXX_Size() int {
	return xxx_messageInfo_KubernetesClusterStatus.Size(m)
}
func (m *KubernetesClusterStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_KubernetesClusterStatus.DiscardUnknown(m)
}

var xxx_messageInfo_KubernetesClusterStatus proto.InternalMessageInfo

func (m *KubernetesClusterStatus) GetStatus() []*v1alpha1.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *KubernetesClusterStatus) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *KubernetesClusterStatus) GetCloud() string {
	if m != nil {
		return m.Cloud
	}
	return ""
}

func (m *KubernetesClusterStatus) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *KubernetesClusterStatus) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func init() {
	proto.RegisterType((*KubernetesClusterSpec)(nil), "multicluster.solo.io.KubernetesClusterSpec")
	proto.RegisterType((*KubernetesClusterStatus)(nil), "multicluster.solo.io.KubernetesClusterStatus")
}

func init() {
	proto.RegisterFile("github.com/solo-io/skv2/api/multicluster/v1alpha1/cluster.proto", fileDescriptor_533baf1d8d7a56a7)
}

var fileDescriptor_533baf1d8d7a56a7 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcf, 0x4a, 0x3b, 0x31,
	0x10, 0xc7, 0xc9, 0xaf, 0xed, 0xfe, 0x30, 0xbd, 0x85, 0xaa, 0xb1, 0x88, 0xd4, 0x9e, 0x7a, 0x31,
	0xa1, 0xd5, 0xab, 0x08, 0x7a, 0xf0, 0x20, 0x22, 0xac, 0x37, 0x6f, 0xbb, 0x71, 0xdc, 0xc6, 0x6e,
	0x3b, 0x4b, 0xfe, 0x94, 0xe2, 0x13, 0xf5, 0x11, 0x7c, 0x1e, 0xdf, 0xc1, 0xbb, 0x6c, 0xb2, 0x2d,
	0x85, 0xea, 0x6d, 0xe6, 0xc3, 0x27, 0xdf, 0x09, 0x33, 0xf4, 0xa6, 0xd0, 0x6e, 0xea, 0x73, 0xa1,
	0x70, 0x2e, 0x2d, 0x96, 0x78, 0xa1, 0x51, 0xda, 0xd9, 0x72, 0x22, 0xb3, 0x4a, 0xcb, 0xb9, 0x2f,
	0x9d, 0x56, 0xa5, 0xb7, 0x0e, 0x8c, 0x5c, 0x8e, 0xb3, 0xb2, 0x9a, 0x66, 0x63, 0xd9, 0x00, 0x51,
	0x19, 0x74, 0xc8, 0x7a, 0xbb, 0x92, 0xa8, 0x23, 0x84, 0xc6, 0x7e, 0xaf, 0xc0, 0x02, 0x83, 0x20,
	0xeb, 0x2a, 0xba, 0x7d, 0x06, 0x2b, 0x17, 0x21, 0xac, 0x5c, 0xc3, 0xce, 0xb7, 0xd3, 0x14, 0x1a,
	0xd8, 0x99, 0x82, 0x06, 0xa2, 0x32, 0x7c, 0xa4, 0x87, 0x0f, 0x3e, 0x07, 0xb3, 0x00, 0x07, 0xf6,
	0x2e, 0x4e, 0x7a, 0xae, 0x40, 0xb1, 0x2b, 0x9a, 0x58, 0x50, 0x06, 0x1c, 0x27, 0x03, 0x32, 0xea,
	0x4e, 0x4e, 0x45, 0x78, 0x55, 0x27, 0x6e, 0x7e, 0x22, 0x9e, 0xf2, 0x77, 0x50, 0x2e, 0x85, 0xb7,
	0xb4, 0x71, 0x87, 0x6b, 0x42, 0x8f, 0xf7, 0xf3, 0x5c, 0xe6, 0xbc, 0x65, 0x63, 0x9a, 0xd8, 0x50,
	0x71, 0x32, 0x68, 0x8d, 0xba, 0x93, 0x93, 0x5f, 0x12, 0xa3, 0x9a, 0x36, 0x22, 0xe3, 0xf4, 0xff,
	0x12, 0x8c, 0xd5, 0xb8, 0xe0, 0xff, 0x06, 0x64, 0x74, 0x90, 0x6e, 0x5a, 0xd6, 0xa3, 0x1d, 0x55,
	0xa2, 0x7f, 0xe5, 0xad, 0xc0, 0x63, 0xc3, 0x8e, 0x68, 0x62, 0xa0, 0xa8, 0xf5, 0x76, 0xc0, 0x4d,
	0xc7, 0x18, 0x6d, 0x7f, 0xe0, 0x02, 0x78, 0x27, 0xd0, 0x50, 0xdf, 0xde, 0x7f, 0x7e, 0xb7, 0xc9,
	0xfa, 0xeb, 0x8c, 0xbc, 0x5c, 0xff, 0x75, 0xa7, 0x6a, 0x56, 0xec, 0xdd, 0x6a, 0xf3, 0xd5, 0xed,
	0x36, 0xf3, 0x24, 0x6c, 0xf2, 0xf2, 0x27, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x45, 0x56, 0x1e, 0xef,
	0x01, 0x00, 0x00,
}

func (this *KubernetesClusterSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KubernetesClusterSpec)
	if !ok {
		that2, ok := that.(KubernetesClusterSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Secret.Equal(that1.Secret) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *KubernetesClusterStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KubernetesClusterStatus)
	if !ok {
		that2, ok := that.(KubernetesClusterStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Status) != len(that1.Status) {
		return false
	}
	for i := range this.Status {
		if !this.Status[i].Equal(that1.Status[i]) {
			return false
		}
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Cloud != that1.Cloud {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if this.Zone != that1.Zone {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
