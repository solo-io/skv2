// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/skv2/api/multicluster/v1alpha1/cluster.proto

package v1alpha1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *KubernetesClusterSpec) Clone() proto.Message {
	var target *KubernetesClusterSpec
	if m == nil {
		return target
	}
	target = &KubernetesClusterSpec{}

	target.SecretName = m.GetSecretName()

	target.ClusterDomain = m.GetClusterDomain()

	if h, ok := interface{}(m.GetProviderInfo()).(clone.Cloner); ok {
		target.ProviderInfo = h.Clone().(*KubernetesClusterSpec_ProviderInfo)
	} else {
		target.ProviderInfo = proto.Clone(m.GetProviderInfo()).(*KubernetesClusterSpec_ProviderInfo)
	}

	return target
}

// Clone function
func (m *KubernetesClusterStatus) Clone() proto.Message {
	var target *KubernetesClusterStatus
	if m == nil {
		return target
	}
	target = &KubernetesClusterStatus{}

	if m.GetStatus() != nil {
		target.Status = make([]*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.Status, len(m.GetStatus()))
		for idx, v := range m.GetStatus() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Status[idx] = h.Clone().(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.Status)
			} else {
				target.Status[idx] = proto.Clone(v).(*github_com_solo_io_skv2_pkg_api_core_skv2_solo_io_v1.Status)
			}

		}
	}

	target.Namespace = m.GetNamespace()

	if m.GetPolicyRules() != nil {
		target.PolicyRules = make([]*PolicyRule, len(m.GetPolicyRules()))
		for idx, v := range m.GetPolicyRules() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.PolicyRules[idx] = h.Clone().(*PolicyRule)
			} else {
				target.PolicyRules[idx] = proto.Clone(v).(*PolicyRule)
			}

		}
	}

	return target
}

// Clone function
func (m *PolicyRule) Clone() proto.Message {
	var target *PolicyRule
	if m == nil {
		return target
	}
	target = &PolicyRule{}

	if m.GetVerbs() != nil {
		target.Verbs = make([]string, len(m.GetVerbs()))
		for idx, v := range m.GetVerbs() {

			target.Verbs[idx] = v

		}
	}

	if m.GetApiGroups() != nil {
		target.ApiGroups = make([]string, len(m.GetApiGroups()))
		for idx, v := range m.GetApiGroups() {

			target.ApiGroups[idx] = v

		}
	}

	if m.GetResources() != nil {
		target.Resources = make([]string, len(m.GetResources()))
		for idx, v := range m.GetResources() {

			target.Resources[idx] = v

		}
	}

	if m.GetResourceNames() != nil {
		target.ResourceNames = make([]string, len(m.GetResourceNames()))
		for idx, v := range m.GetResourceNames() {

			target.ResourceNames[idx] = v

		}
	}

	if m.GetNonResourceUrls() != nil {
		target.NonResourceUrls = make([]string, len(m.GetNonResourceUrls()))
		for idx, v := range m.GetNonResourceUrls() {

			target.NonResourceUrls[idx] = v

		}
	}

	return target
}

// Clone function
func (m *KubernetesClusterSpec_ProviderInfo) Clone() proto.Message {
	var target *KubernetesClusterSpec_ProviderInfo
	if m == nil {
		return target
	}
	target = &KubernetesClusterSpec_ProviderInfo{}

	switch m.ProviderInfoType.(type) {

	case *KubernetesClusterSpec_ProviderInfo_Eks:

		if h, ok := interface{}(m.GetEks()).(clone.Cloner); ok {
			target.ProviderInfoType = &KubernetesClusterSpec_ProviderInfo_Eks{
				Eks: h.Clone().(*KubernetesClusterSpec_Eks),
			}
		} else {
			target.ProviderInfoType = &KubernetesClusterSpec_ProviderInfo_Eks{
				Eks: proto.Clone(m.GetEks()).(*KubernetesClusterSpec_Eks),
			}
		}

	}

	return target
}

// Clone function
func (m *KubernetesClusterSpec_Eks) Clone() proto.Message {
	var target *KubernetesClusterSpec_Eks
	if m == nil {
		return target
	}
	target = &KubernetesClusterSpec_Eks{}

	target.Arn = m.GetArn()

	target.AccountId = m.GetAccountId()

	target.Region = m.GetRegion()

	target.Name = m.GetName()

	return target
}
