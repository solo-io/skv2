// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	v1 "k8s.io/api/core/v1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the Secret Resource across clusters.
// implemented by the user
type MulticlusterSecretReconciler interface {
	ReconcileSecret(clusterName string, obj *v1.Secret) (reconcile.Result, error)
}

// Reconcile deletion events for the Secret Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterSecretDeletionReconciler interface {
	ReconcileSecretDeletion(clusterName string, req reconcile.Request)
}

type MulticlusterSecretReconcilerFuncs struct {
	OnReconcileSecret         func(clusterName string, obj *v1.Secret) (reconcile.Result, error)
	OnReconcileSecretDeletion func(clusterName string, req reconcile.Request)
}

func (f *MulticlusterSecretReconcilerFuncs) ReconcileSecret(clusterName string, obj *v1.Secret) (reconcile.Result, error) {
	if f.OnReconcileSecret == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileSecret(clusterName, obj)
}

func (f *MulticlusterSecretReconcilerFuncs) ReconcileSecretDeletion(clusterName string, req reconcile.Request) {
	if f.OnReconcileSecretDeletion == nil {
		return
	}
	f.OnReconcileSecretDeletion(clusterName, req)
}

type MulticlusterSecretReconcileLoop interface {
	// AddMulticlusterSecretReconciler adds a MulticlusterSecretReconciler to the MulticlusterSecretReconcileLoop.
	AddMulticlusterSecretReconciler(ctx context.Context, rec MulticlusterSecretReconciler, predicates ...predicate.Predicate)
}

type multiclusterSecretReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterSecretReconcileLoop) AddMulticlusterSecretReconciler(ctx context.Context, rec MulticlusterSecretReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericSecretMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterSecretReconcileLoop(name string, cw multicluster.ClusterWatcher) MulticlusterSecretReconcileLoop {
	return &multiclusterSecretReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &v1.Secret{})}
}

type genericSecretMulticlusterReconciler struct {
	reconciler MulticlusterSecretReconciler
}

func (g genericSecretMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) {
	if deletionReconciler, ok := g.reconciler.(MulticlusterSecretDeletionReconciler); ok {
		deletionReconciler.ReconcileSecretDeletion(cluster, req)
	}
}

func (g genericSecretMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*v1.Secret)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: Secret handler received event for %T", object)
	}
	return g.reconciler.ReconcileSecret(cluster, obj)
}

// Reconcile Upsert events for the ServiceAccount Resource across clusters.
// implemented by the user
type MulticlusterServiceAccountReconciler interface {
	ReconcileServiceAccount(clusterName string, obj *v1.ServiceAccount) (reconcile.Result, error)
}

// Reconcile deletion events for the ServiceAccount Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterServiceAccountDeletionReconciler interface {
	ReconcileServiceAccountDeletion(clusterName string, req reconcile.Request)
}

type MulticlusterServiceAccountReconcilerFuncs struct {
	OnReconcileServiceAccount         func(clusterName string, obj *v1.ServiceAccount) (reconcile.Result, error)
	OnReconcileServiceAccountDeletion func(clusterName string, req reconcile.Request)
}

func (f *MulticlusterServiceAccountReconcilerFuncs) ReconcileServiceAccount(clusterName string, obj *v1.ServiceAccount) (reconcile.Result, error) {
	if f.OnReconcileServiceAccount == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileServiceAccount(clusterName, obj)
}

func (f *MulticlusterServiceAccountReconcilerFuncs) ReconcileServiceAccountDeletion(clusterName string, req reconcile.Request) {
	if f.OnReconcileServiceAccountDeletion == nil {
		return
	}
	f.OnReconcileServiceAccountDeletion(clusterName, req)
}

type MulticlusterServiceAccountReconcileLoop interface {
	// AddMulticlusterServiceAccountReconciler adds a MulticlusterServiceAccountReconciler to the MulticlusterServiceAccountReconcileLoop.
	AddMulticlusterServiceAccountReconciler(ctx context.Context, rec MulticlusterServiceAccountReconciler, predicates ...predicate.Predicate)
}

type multiclusterServiceAccountReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterServiceAccountReconcileLoop) AddMulticlusterServiceAccountReconciler(ctx context.Context, rec MulticlusterServiceAccountReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericServiceAccountMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterServiceAccountReconcileLoop(name string, cw multicluster.ClusterWatcher) MulticlusterServiceAccountReconcileLoop {
	return &multiclusterServiceAccountReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &v1.ServiceAccount{})}
}

type genericServiceAccountMulticlusterReconciler struct {
	reconciler MulticlusterServiceAccountReconciler
}

func (g genericServiceAccountMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) {
	if deletionReconciler, ok := g.reconciler.(MulticlusterServiceAccountDeletionReconciler); ok {
		deletionReconciler.ReconcileServiceAccountDeletion(cluster, req)
	}
}

func (g genericServiceAccountMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*v1.ServiceAccount)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: ServiceAccount handler received event for %T", object)
	}
	return g.reconciler.ReconcileServiceAccount(cluster, obj)
}

// Reconcile Upsert events for the Namespace Resource across clusters.
// implemented by the user
type MulticlusterNamespaceReconciler interface {
	ReconcileNamespace(clusterName string, obj *v1.Namespace) (reconcile.Result, error)
}

// Reconcile deletion events for the Namespace Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterNamespaceDeletionReconciler interface {
	ReconcileNamespaceDeletion(clusterName string, req reconcile.Request)
}

type MulticlusterNamespaceReconcilerFuncs struct {
	OnReconcileNamespace         func(clusterName string, obj *v1.Namespace) (reconcile.Result, error)
	OnReconcileNamespaceDeletion func(clusterName string, req reconcile.Request)
}

func (f *MulticlusterNamespaceReconcilerFuncs) ReconcileNamespace(clusterName string, obj *v1.Namespace) (reconcile.Result, error) {
	if f.OnReconcileNamespace == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileNamespace(clusterName, obj)
}

func (f *MulticlusterNamespaceReconcilerFuncs) ReconcileNamespaceDeletion(clusterName string, req reconcile.Request) {
	if f.OnReconcileNamespaceDeletion == nil {
		return
	}
	f.OnReconcileNamespaceDeletion(clusterName, req)
}

type MulticlusterNamespaceReconcileLoop interface {
	// AddMulticlusterNamespaceReconciler adds a MulticlusterNamespaceReconciler to the MulticlusterNamespaceReconcileLoop.
	AddMulticlusterNamespaceReconciler(ctx context.Context, rec MulticlusterNamespaceReconciler, predicates ...predicate.Predicate)
}

type multiclusterNamespaceReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterNamespaceReconcileLoop) AddMulticlusterNamespaceReconciler(ctx context.Context, rec MulticlusterNamespaceReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericNamespaceMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterNamespaceReconcileLoop(name string, cw multicluster.ClusterWatcher) MulticlusterNamespaceReconcileLoop {
	return &multiclusterNamespaceReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &v1.Namespace{})}
}

type genericNamespaceMulticlusterReconciler struct {
	reconciler MulticlusterNamespaceReconciler
}

func (g genericNamespaceMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) {
	if deletionReconciler, ok := g.reconciler.(MulticlusterNamespaceDeletionReconciler); ok {
		deletionReconciler.ReconcileNamespaceDeletion(cluster, req)
	}
}

func (g genericNamespaceMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*v1.Namespace)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: Namespace handler received event for %T", object)
	}
	return g.reconciler.ReconcileNamespace(cluster, obj)
}
