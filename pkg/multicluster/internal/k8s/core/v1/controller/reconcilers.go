// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./reconcilers.go -destination mocks/reconcilers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	v1 "k8s.io/api/core/v1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the Secret Resource.
// implemented by the user
type SecretReconciler interface {
	ReconcileSecret(obj *v1.Secret) (reconcile.Result, error)
}

// Reconcile deletion events for the Secret Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type SecretDeletionReconciler interface {
	ReconcileSecretDeletion(req reconcile.Request) error
}

type SecretReconcilerFuncs struct {
	OnReconcileSecret         func(obj *v1.Secret) (reconcile.Result, error)
	OnReconcileSecretDeletion func(req reconcile.Request) error
}

func (f *SecretReconcilerFuncs) ReconcileSecret(obj *v1.Secret) (reconcile.Result, error) {
	if f.OnReconcileSecret == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileSecret(obj)
}

func (f *SecretReconcilerFuncs) ReconcileSecretDeletion(req reconcile.Request) error {
	if f.OnReconcileSecretDeletion == nil {
		return nil
	}
	return f.OnReconcileSecretDeletion(req)
}

// Reconcile and finalize the Secret Resource
// implemented by the user
type SecretFinalizer interface {
	SecretReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	SecretFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeSecret(obj *v1.Secret) error
}

type SecretReconcileLoop interface {
	RunSecretReconciler(ctx context.Context, rec SecretReconciler, predicates ...predicate.Predicate) error
}

type secretReconcileLoop struct {
	loop reconcile.Loop
}

func NewSecretReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) SecretReconcileLoop {
	return &secretReconcileLoop{
		loop: reconcile.NewLoop(name, mgr, &v1.Secret{}, options),
	}
}

func (c *secretReconcileLoop) RunSecretReconciler(ctx context.Context, reconciler SecretReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericSecretReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(SecretFinalizer); ok {
		reconcilerWrapper = genericSecretFinalizer{
			genericSecretReconciler: genericReconciler,
			finalizingReconciler:    finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericSecretHandler implements a generic reconcile.Reconciler
type genericSecretReconciler struct {
	reconciler SecretReconciler
}

func (r genericSecretReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*v1.Secret)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: Secret handler received event for %T", object)
	}
	return r.reconciler.ReconcileSecret(obj)
}

func (r genericSecretReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(SecretDeletionReconciler); ok {
		return deletionReconciler.ReconcileSecretDeletion(request)
	}
	return nil
}

// genericSecretFinalizer implements a generic reconcile.FinalizingReconciler
type genericSecretFinalizer struct {
	genericSecretReconciler
	finalizingReconciler SecretFinalizer
}

func (r genericSecretFinalizer) FinalizerName() string {
	return r.finalizingReconciler.SecretFinalizerName()
}

func (r genericSecretFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*v1.Secret)
	if !ok {
		return errors.Errorf("internal error: Secret handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeSecret(obj)
}

// Reconcile Upsert events for the ServiceAccount Resource.
// implemented by the user
type ServiceAccountReconciler interface {
	ReconcileServiceAccount(obj *v1.ServiceAccount) (reconcile.Result, error)
}

// Reconcile deletion events for the ServiceAccount Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type ServiceAccountDeletionReconciler interface {
	ReconcileServiceAccountDeletion(req reconcile.Request) error
}

type ServiceAccountReconcilerFuncs struct {
	OnReconcileServiceAccount         func(obj *v1.ServiceAccount) (reconcile.Result, error)
	OnReconcileServiceAccountDeletion func(req reconcile.Request) error
}

func (f *ServiceAccountReconcilerFuncs) ReconcileServiceAccount(obj *v1.ServiceAccount) (reconcile.Result, error) {
	if f.OnReconcileServiceAccount == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileServiceAccount(obj)
}

func (f *ServiceAccountReconcilerFuncs) ReconcileServiceAccountDeletion(req reconcile.Request) error {
	if f.OnReconcileServiceAccountDeletion == nil {
		return nil
	}
	return f.OnReconcileServiceAccountDeletion(req)
}

// Reconcile and finalize the ServiceAccount Resource
// implemented by the user
type ServiceAccountFinalizer interface {
	ServiceAccountReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	ServiceAccountFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeServiceAccount(obj *v1.ServiceAccount) error
}

type ServiceAccountReconcileLoop interface {
	RunServiceAccountReconciler(ctx context.Context, rec ServiceAccountReconciler, predicates ...predicate.Predicate) error
}

type serviceAccountReconcileLoop struct {
	loop reconcile.Loop
}

func NewServiceAccountReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) ServiceAccountReconcileLoop {
	return &serviceAccountReconcileLoop{
		loop: reconcile.NewLoop(name, mgr, &v1.ServiceAccount{}, options),
	}
}

func (c *serviceAccountReconcileLoop) RunServiceAccountReconciler(ctx context.Context, reconciler ServiceAccountReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericServiceAccountReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(ServiceAccountFinalizer); ok {
		reconcilerWrapper = genericServiceAccountFinalizer{
			genericServiceAccountReconciler: genericReconciler,
			finalizingReconciler:            finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericServiceAccountHandler implements a generic reconcile.Reconciler
type genericServiceAccountReconciler struct {
	reconciler ServiceAccountReconciler
}

func (r genericServiceAccountReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*v1.ServiceAccount)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: ServiceAccount handler received event for %T", object)
	}
	return r.reconciler.ReconcileServiceAccount(obj)
}

func (r genericServiceAccountReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(ServiceAccountDeletionReconciler); ok {
		return deletionReconciler.ReconcileServiceAccountDeletion(request)
	}
	return nil
}

// genericServiceAccountFinalizer implements a generic reconcile.FinalizingReconciler
type genericServiceAccountFinalizer struct {
	genericServiceAccountReconciler
	finalizingReconciler ServiceAccountFinalizer
}

func (r genericServiceAccountFinalizer) FinalizerName() string {
	return r.finalizingReconciler.ServiceAccountFinalizerName()
}

func (r genericServiceAccountFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*v1.ServiceAccount)
	if !ok {
		return errors.Errorf("internal error: ServiceAccount handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeServiceAccount(obj)
}

// Reconcile Upsert events for the Namespace Resource.
// implemented by the user
type NamespaceReconciler interface {
	ReconcileNamespace(obj *v1.Namespace) (reconcile.Result, error)
}

// Reconcile deletion events for the Namespace Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type NamespaceDeletionReconciler interface {
	ReconcileNamespaceDeletion(req reconcile.Request) error
}

type NamespaceReconcilerFuncs struct {
	OnReconcileNamespace         func(obj *v1.Namespace) (reconcile.Result, error)
	OnReconcileNamespaceDeletion func(req reconcile.Request) error
}

func (f *NamespaceReconcilerFuncs) ReconcileNamespace(obj *v1.Namespace) (reconcile.Result, error) {
	if f.OnReconcileNamespace == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileNamespace(obj)
}

func (f *NamespaceReconcilerFuncs) ReconcileNamespaceDeletion(req reconcile.Request) error {
	if f.OnReconcileNamespaceDeletion == nil {
		return nil
	}
	return f.OnReconcileNamespaceDeletion(req)
}

// Reconcile and finalize the Namespace Resource
// implemented by the user
type NamespaceFinalizer interface {
	NamespaceReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	NamespaceFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeNamespace(obj *v1.Namespace) error
}

type NamespaceReconcileLoop interface {
	RunNamespaceReconciler(ctx context.Context, rec NamespaceReconciler, predicates ...predicate.Predicate) error
}

type namespaceReconcileLoop struct {
	loop reconcile.Loop
}

func NewNamespaceReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) NamespaceReconcileLoop {
	return &namespaceReconcileLoop{
		loop: reconcile.NewLoop(name, mgr, &v1.Namespace{}, options),
	}
}

func (c *namespaceReconcileLoop) RunNamespaceReconciler(ctx context.Context, reconciler NamespaceReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericNamespaceReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(NamespaceFinalizer); ok {
		reconcilerWrapper = genericNamespaceFinalizer{
			genericNamespaceReconciler: genericReconciler,
			finalizingReconciler:       finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericNamespaceHandler implements a generic reconcile.Reconciler
type genericNamespaceReconciler struct {
	reconciler NamespaceReconciler
}

func (r genericNamespaceReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*v1.Namespace)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: Namespace handler received event for %T", object)
	}
	return r.reconciler.ReconcileNamespace(obj)
}

func (r genericNamespaceReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(NamespaceDeletionReconciler); ok {
		return deletionReconciler.ReconcileNamespaceDeletion(request)
	}
	return nil
}

// genericNamespaceFinalizer implements a generic reconcile.FinalizingReconciler
type genericNamespaceFinalizer struct {
	genericNamespaceReconciler
	finalizingReconciler NamespaceFinalizer
}

func (r genericNamespaceFinalizer) FinalizerName() string {
	return r.finalizingReconciler.NamespaceFinalizerName()
}

func (r genericNamespaceFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*v1.Namespace)
	if !ok {
		return errors.Errorf("internal error: Namespace handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeNamespace(obj)
}
