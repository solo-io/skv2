// Code generated by skv2. DO NOT EDIT.

package v1

import (
	v1 "github.com/solo-io/skv2/pkg/multicluster/internal/k8s/core/v1"

	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

/*
  The intention of these providers are to be used for Mocking.
  They expose the Clients as interfaces, as well as factories to provide mocked versions
  of the clients when they require building within a component.

  See package `github.com/solo-io/skv2/pkg/multicluster/register` for example
*/

// Provider for SecretClient from Clientset
func SecretClientFromClientsetProvider(clients v1.Clientset) v1.SecretClient {
	return clients.Secrets()
}

// Provider for Secret Client from Client
func SecretClientProvider(client client.Client) v1.SecretClient {
	return v1.NewSecretClient(client)
}

type SecretClientFactory func(client client.Client) v1.SecretClient

func SecretClientFactoryProvider() SecretClientFactory {
	return SecretClientProvider
}

type SecretClientFromConfigFactory func(cfg *rest.Config) (v1.SecretClient, error)

func SecretClientFromConfigFactoryProvider() SecretClientFromConfigFactory {
	return func(cfg *rest.Config) (v1.SecretClient, error) {
		clients, err := v1.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.Secrets(), nil
	}
}

// Provider for ServiceAccountClient from Clientset
func ServiceAccountClientFromClientsetProvider(clients v1.Clientset) v1.ServiceAccountClient {
	return clients.ServiceAccounts()
}

// Provider for ServiceAccount Client from Client
func ServiceAccountClientProvider(client client.Client) v1.ServiceAccountClient {
	return v1.NewServiceAccountClient(client)
}

type ServiceAccountClientFactory func(client client.Client) v1.ServiceAccountClient

func ServiceAccountClientFactoryProvider() ServiceAccountClientFactory {
	return ServiceAccountClientProvider
}

type ServiceAccountClientFromConfigFactory func(cfg *rest.Config) (v1.ServiceAccountClient, error)

func ServiceAccountClientFromConfigFactoryProvider() ServiceAccountClientFromConfigFactory {
	return func(cfg *rest.Config) (v1.ServiceAccountClient, error) {
		clients, err := v1.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.ServiceAccounts(), nil
	}
}

// Provider for NamespaceClient from Clientset
func NamespaceClientFromClientsetProvider(clients v1.Clientset) v1.NamespaceClient {
	return clients.Namespaces()
}

// Provider for Namespace Client from Client
func NamespaceClientProvider(client client.Client) v1.NamespaceClient {
	return v1.NewNamespaceClient(client)
}

type NamespaceClientFactory func(client client.Client) v1.NamespaceClient

func NamespaceClientFactoryProvider() NamespaceClientFactory {
	return NamespaceClientProvider
}

type NamespaceClientFromConfigFactory func(cfg *rest.Config) (v1.NamespaceClient, error)

func NamespaceClientFromConfigFactoryProvider() NamespaceClientFromConfigFactory {
	return func(cfg *rest.Config) (v1.NamespaceClient, error) {
		clients, err := v1.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.Namespaces(), nil
	}
}
