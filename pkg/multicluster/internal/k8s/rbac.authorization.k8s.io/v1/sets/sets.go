// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1sets

import (
	rbac_authorization_k8s_io_v1 "k8s.io/api/rbac/v1"

	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/sets"
)

type RoleSet interface {
	Keys() sets.String
	List() []*rbac_authorization_k8s_io_v1.Role
	Map() map[string]*rbac_authorization_k8s_io_v1.Role
	Insert(role ...*rbac_authorization_k8s_io_v1.Role)
	Equal(roleSet RoleSet) bool
	Has(role *rbac_authorization_k8s_io_v1.Role) bool
	Delete(role *rbac_authorization_k8s_io_v1.Role)
	Union(set RoleSet) RoleSet
	Difference(set RoleSet) RoleSet
	Intersection(set RoleSet) RoleSet
}

func makeGenericRoleSet(roleList []*rbac_authorization_k8s_io_v1.Role) sksets.ResourceSet {
	var genericResources []metav1.Object
	for _, obj := range roleList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type roleSet struct {
	set sksets.ResourceSet
}

func NewRoleSet(roleList ...*rbac_authorization_k8s_io_v1.Role) RoleSet {
	return &roleSet{set: makeGenericRoleSet(roleList)}
}

func (s roleSet) Keys() sets.String {
	return s.set.Keys()
}

func (s roleSet) List() []*rbac_authorization_k8s_io_v1.Role {
	var roleList []*rbac_authorization_k8s_io_v1.Role
	for _, obj := range s.set.List() {
		roleList = append(roleList, obj.(*rbac_authorization_k8s_io_v1.Role))
	}
	return roleList
}

func (s roleSet) Map() map[string]*rbac_authorization_k8s_io_v1.Role {
	newMap := map[string]*rbac_authorization_k8s_io_v1.Role{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*rbac_authorization_k8s_io_v1.Role)
	}
	return newMap
}

func (s roleSet) Insert(
	roleList ...*rbac_authorization_k8s_io_v1.Role,
) {
	for _, obj := range roleList {
		s.set.Insert(obj)
	}
}

func (s roleSet) Has(role *rbac_authorization_k8s_io_v1.Role) bool {
	return s.set.Has(role)
}

func (s roleSet) Equal(
	roleSet RoleSet,
) bool {
	return s.set.Equal(makeGenericRoleSet(roleSet.List()))
}

func (s roleSet) Delete(Role *rbac_authorization_k8s_io_v1.Role) {
	s.set.Delete(Role)
}

func (s roleSet) Union(set RoleSet) RoleSet {
	return NewRoleSet(append(s.List(), set.List()...)...)
}

func (s roleSet) Difference(set RoleSet) RoleSet {
	newSet := s.set.Difference(makeGenericRoleSet(set.List()))
	return roleSet{set: newSet}
}

func (s roleSet) Intersection(set RoleSet) RoleSet {
	newSet := s.set.Intersection(makeGenericRoleSet(set.List()))
	var roleList []*rbac_authorization_k8s_io_v1.Role
	for _, obj := range newSet.List() {
		roleList = append(roleList, obj.(*rbac_authorization_k8s_io_v1.Role))
	}
	return NewRoleSet(roleList...)
}

type RoleBindingSet interface {
	Keys() sets.String
	List() []*rbac_authorization_k8s_io_v1.RoleBinding
	Map() map[string]*rbac_authorization_k8s_io_v1.RoleBinding
	Insert(roleBinding ...*rbac_authorization_k8s_io_v1.RoleBinding)
	Equal(roleBindingSet RoleBindingSet) bool
	Has(roleBinding *rbac_authorization_k8s_io_v1.RoleBinding) bool
	Delete(roleBinding *rbac_authorization_k8s_io_v1.RoleBinding)
	Union(set RoleBindingSet) RoleBindingSet
	Difference(set RoleBindingSet) RoleBindingSet
	Intersection(set RoleBindingSet) RoleBindingSet
}

func makeGenericRoleBindingSet(roleBindingList []*rbac_authorization_k8s_io_v1.RoleBinding) sksets.ResourceSet {
	var genericResources []metav1.Object
	for _, obj := range roleBindingList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type roleBindingSet struct {
	set sksets.ResourceSet
}

func NewRoleBindingSet(roleBindingList ...*rbac_authorization_k8s_io_v1.RoleBinding) RoleBindingSet {
	return &roleBindingSet{set: makeGenericRoleBindingSet(roleBindingList)}
}

func (s roleBindingSet) Keys() sets.String {
	return s.set.Keys()
}

func (s roleBindingSet) List() []*rbac_authorization_k8s_io_v1.RoleBinding {
	var roleBindingList []*rbac_authorization_k8s_io_v1.RoleBinding
	for _, obj := range s.set.List() {
		roleBindingList = append(roleBindingList, obj.(*rbac_authorization_k8s_io_v1.RoleBinding))
	}
	return roleBindingList
}

func (s roleBindingSet) Map() map[string]*rbac_authorization_k8s_io_v1.RoleBinding {
	newMap := map[string]*rbac_authorization_k8s_io_v1.RoleBinding{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*rbac_authorization_k8s_io_v1.RoleBinding)
	}
	return newMap
}

func (s roleBindingSet) Insert(
	roleBindingList ...*rbac_authorization_k8s_io_v1.RoleBinding,
) {
	for _, obj := range roleBindingList {
		s.set.Insert(obj)
	}
}

func (s roleBindingSet) Has(roleBinding *rbac_authorization_k8s_io_v1.RoleBinding) bool {
	return s.set.Has(roleBinding)
}

func (s roleBindingSet) Equal(
	roleBindingSet RoleBindingSet,
) bool {
	return s.set.Equal(makeGenericRoleBindingSet(roleBindingSet.List()))
}

func (s roleBindingSet) Delete(RoleBinding *rbac_authorization_k8s_io_v1.RoleBinding) {
	s.set.Delete(RoleBinding)
}

func (s roleBindingSet) Union(set RoleBindingSet) RoleBindingSet {
	return NewRoleBindingSet(append(s.List(), set.List()...)...)
}

func (s roleBindingSet) Difference(set RoleBindingSet) RoleBindingSet {
	newSet := s.set.Difference(makeGenericRoleBindingSet(set.List()))
	return roleBindingSet{set: newSet}
}

func (s roleBindingSet) Intersection(set RoleBindingSet) RoleBindingSet {
	newSet := s.set.Intersection(makeGenericRoleBindingSet(set.List()))
	var roleBindingList []*rbac_authorization_k8s_io_v1.RoleBinding
	for _, obj := range newSet.List() {
		roleBindingList = append(roleBindingList, obj.(*rbac_authorization_k8s_io_v1.RoleBinding))
	}
	return NewRoleBindingSet(roleBindingList...)
}

type ClusterRoleSet interface {
	Keys() sets.String
	List() []*rbac_authorization_k8s_io_v1.ClusterRole
	Map() map[string]*rbac_authorization_k8s_io_v1.ClusterRole
	Insert(clusterRole ...*rbac_authorization_k8s_io_v1.ClusterRole)
	Equal(clusterRoleSet ClusterRoleSet) bool
	Has(clusterRole *rbac_authorization_k8s_io_v1.ClusterRole) bool
	Delete(clusterRole *rbac_authorization_k8s_io_v1.ClusterRole)
	Union(set ClusterRoleSet) ClusterRoleSet
	Difference(set ClusterRoleSet) ClusterRoleSet
	Intersection(set ClusterRoleSet) ClusterRoleSet
}

func makeGenericClusterRoleSet(clusterRoleList []*rbac_authorization_k8s_io_v1.ClusterRole) sksets.ResourceSet {
	var genericResources []metav1.Object
	for _, obj := range clusterRoleList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type clusterRoleSet struct {
	set sksets.ResourceSet
}

func NewClusterRoleSet(clusterRoleList ...*rbac_authorization_k8s_io_v1.ClusterRole) ClusterRoleSet {
	return &clusterRoleSet{set: makeGenericClusterRoleSet(clusterRoleList)}
}

func (s clusterRoleSet) Keys() sets.String {
	return s.set.Keys()
}

func (s clusterRoleSet) List() []*rbac_authorization_k8s_io_v1.ClusterRole {
	var clusterRoleList []*rbac_authorization_k8s_io_v1.ClusterRole
	for _, obj := range s.set.List() {
		clusterRoleList = append(clusterRoleList, obj.(*rbac_authorization_k8s_io_v1.ClusterRole))
	}
	return clusterRoleList
}

func (s clusterRoleSet) Map() map[string]*rbac_authorization_k8s_io_v1.ClusterRole {
	newMap := map[string]*rbac_authorization_k8s_io_v1.ClusterRole{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*rbac_authorization_k8s_io_v1.ClusterRole)
	}
	return newMap
}

func (s clusterRoleSet) Insert(
	clusterRoleList ...*rbac_authorization_k8s_io_v1.ClusterRole,
) {
	for _, obj := range clusterRoleList {
		s.set.Insert(obj)
	}
}

func (s clusterRoleSet) Has(clusterRole *rbac_authorization_k8s_io_v1.ClusterRole) bool {
	return s.set.Has(clusterRole)
}

func (s clusterRoleSet) Equal(
	clusterRoleSet ClusterRoleSet,
) bool {
	return s.set.Equal(makeGenericClusterRoleSet(clusterRoleSet.List()))
}

func (s clusterRoleSet) Delete(ClusterRole *rbac_authorization_k8s_io_v1.ClusterRole) {
	s.set.Delete(ClusterRole)
}

func (s clusterRoleSet) Union(set ClusterRoleSet) ClusterRoleSet {
	return NewClusterRoleSet(append(s.List(), set.List()...)...)
}

func (s clusterRoleSet) Difference(set ClusterRoleSet) ClusterRoleSet {
	newSet := s.set.Difference(makeGenericClusterRoleSet(set.List()))
	return clusterRoleSet{set: newSet}
}

func (s clusterRoleSet) Intersection(set ClusterRoleSet) ClusterRoleSet {
	newSet := s.set.Intersection(makeGenericClusterRoleSet(set.List()))
	var clusterRoleList []*rbac_authorization_k8s_io_v1.ClusterRole
	for _, obj := range newSet.List() {
		clusterRoleList = append(clusterRoleList, obj.(*rbac_authorization_k8s_io_v1.ClusterRole))
	}
	return NewClusterRoleSet(clusterRoleList...)
}

type ClusterRoleBindingSet interface {
	Keys() sets.String
	List() []*rbac_authorization_k8s_io_v1.ClusterRoleBinding
	Map() map[string]*rbac_authorization_k8s_io_v1.ClusterRoleBinding
	Insert(clusterRoleBinding ...*rbac_authorization_k8s_io_v1.ClusterRoleBinding)
	Equal(clusterRoleBindingSet ClusterRoleBindingSet) bool
	Has(clusterRoleBinding *rbac_authorization_k8s_io_v1.ClusterRoleBinding) bool
	Delete(clusterRoleBinding *rbac_authorization_k8s_io_v1.ClusterRoleBinding)
	Union(set ClusterRoleBindingSet) ClusterRoleBindingSet
	Difference(set ClusterRoleBindingSet) ClusterRoleBindingSet
	Intersection(set ClusterRoleBindingSet) ClusterRoleBindingSet
}

func makeGenericClusterRoleBindingSet(clusterRoleBindingList []*rbac_authorization_k8s_io_v1.ClusterRoleBinding) sksets.ResourceSet {
	var genericResources []metav1.Object
	for _, obj := range clusterRoleBindingList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type clusterRoleBindingSet struct {
	set sksets.ResourceSet
}

func NewClusterRoleBindingSet(clusterRoleBindingList ...*rbac_authorization_k8s_io_v1.ClusterRoleBinding) ClusterRoleBindingSet {
	return &clusterRoleBindingSet{set: makeGenericClusterRoleBindingSet(clusterRoleBindingList)}
}

func (s clusterRoleBindingSet) Keys() sets.String {
	return s.set.Keys()
}

func (s clusterRoleBindingSet) List() []*rbac_authorization_k8s_io_v1.ClusterRoleBinding {
	var clusterRoleBindingList []*rbac_authorization_k8s_io_v1.ClusterRoleBinding
	for _, obj := range s.set.List() {
		clusterRoleBindingList = append(clusterRoleBindingList, obj.(*rbac_authorization_k8s_io_v1.ClusterRoleBinding))
	}
	return clusterRoleBindingList
}

func (s clusterRoleBindingSet) Map() map[string]*rbac_authorization_k8s_io_v1.ClusterRoleBinding {
	newMap := map[string]*rbac_authorization_k8s_io_v1.ClusterRoleBinding{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*rbac_authorization_k8s_io_v1.ClusterRoleBinding)
	}
	return newMap
}

func (s clusterRoleBindingSet) Insert(
	clusterRoleBindingList ...*rbac_authorization_k8s_io_v1.ClusterRoleBinding,
) {
	for _, obj := range clusterRoleBindingList {
		s.set.Insert(obj)
	}
}

func (s clusterRoleBindingSet) Has(clusterRoleBinding *rbac_authorization_k8s_io_v1.ClusterRoleBinding) bool {
	return s.set.Has(clusterRoleBinding)
}

func (s clusterRoleBindingSet) Equal(
	clusterRoleBindingSet ClusterRoleBindingSet,
) bool {
	return s.set.Equal(makeGenericClusterRoleBindingSet(clusterRoleBindingSet.List()))
}

func (s clusterRoleBindingSet) Delete(ClusterRoleBinding *rbac_authorization_k8s_io_v1.ClusterRoleBinding) {
	s.set.Delete(ClusterRoleBinding)
}

func (s clusterRoleBindingSet) Union(set ClusterRoleBindingSet) ClusterRoleBindingSet {
	return NewClusterRoleBindingSet(append(s.List(), set.List()...)...)
}

func (s clusterRoleBindingSet) Difference(set ClusterRoleBindingSet) ClusterRoleBindingSet {
	newSet := s.set.Difference(makeGenericClusterRoleBindingSet(set.List()))
	return clusterRoleBindingSet{set: newSet}
}

func (s clusterRoleBindingSet) Intersection(set ClusterRoleBindingSet) ClusterRoleBindingSet {
	newSet := s.set.Intersection(makeGenericClusterRoleBindingSet(set.List()))
	var clusterRoleBindingList []*rbac_authorization_k8s_io_v1.ClusterRoleBinding
	for _, obj := range newSet.List() {
		clusterRoleBindingList = append(clusterRoleBindingList, obj.(*rbac_authorization_k8s_io_v1.ClusterRoleBinding))
	}
	return NewClusterRoleBindingSet(clusterRoleBindingList...)
}
