// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/skv2/pkg/multicluster/internal/k8s/rbac.authorization.k8s.io/v1/controller"
	v1 "k8s.io/api/rbac/v1"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockRoleEventHandler is a mock of RoleEventHandler interface
type MockRoleEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRoleEventHandlerMockRecorder
}

// MockRoleEventHandlerMockRecorder is the mock recorder for MockRoleEventHandler
type MockRoleEventHandlerMockRecorder struct {
	mock *MockRoleEventHandler
}

// NewMockRoleEventHandler creates a new mock instance
func NewMockRoleEventHandler(ctrl *gomock.Controller) *MockRoleEventHandler {
	mock := &MockRoleEventHandler{ctrl: ctrl}
	mock.recorder = &MockRoleEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoleEventHandler) EXPECT() *MockRoleEventHandlerMockRecorder {
	return m.recorder
}

// CreateRole mocks base method
func (m *MockRoleEventHandler) CreateRole(obj *v1.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole
func (mr *MockRoleEventHandlerMockRecorder) CreateRole(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRoleEventHandler)(nil).CreateRole), obj)
}

// UpdateRole mocks base method
func (m *MockRoleEventHandler) UpdateRole(old, new *v1.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole
func (mr *MockRoleEventHandlerMockRecorder) UpdateRole(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockRoleEventHandler)(nil).UpdateRole), old, new)
}

// DeleteRole mocks base method
func (m *MockRoleEventHandler) DeleteRole(obj *v1.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole
func (mr *MockRoleEventHandlerMockRecorder) DeleteRole(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockRoleEventHandler)(nil).DeleteRole), obj)
}

// GenericRole mocks base method
func (m *MockRoleEventHandler) GenericRole(obj *v1.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericRole", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericRole indicates an expected call of GenericRole
func (mr *MockRoleEventHandlerMockRecorder) GenericRole(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericRole", reflect.TypeOf((*MockRoleEventHandler)(nil).GenericRole), obj)
}

// MockRoleEventWatcher is a mock of RoleEventWatcher interface
type MockRoleEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockRoleEventWatcherMockRecorder
}

// MockRoleEventWatcherMockRecorder is the mock recorder for MockRoleEventWatcher
type MockRoleEventWatcherMockRecorder struct {
	mock *MockRoleEventWatcher
}

// NewMockRoleEventWatcher creates a new mock instance
func NewMockRoleEventWatcher(ctrl *gomock.Controller) *MockRoleEventWatcher {
	mock := &MockRoleEventWatcher{ctrl: ctrl}
	mock.recorder = &MockRoleEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoleEventWatcher) EXPECT() *MockRoleEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method
func (m *MockRoleEventWatcher) AddEventHandler(ctx context.Context, h controller.RoleEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler
func (mr *MockRoleEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockRoleEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockRoleBindingEventHandler is a mock of RoleBindingEventHandler interface
type MockRoleBindingEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRoleBindingEventHandlerMockRecorder
}

// MockRoleBindingEventHandlerMockRecorder is the mock recorder for MockRoleBindingEventHandler
type MockRoleBindingEventHandlerMockRecorder struct {
	mock *MockRoleBindingEventHandler
}

// NewMockRoleBindingEventHandler creates a new mock instance
func NewMockRoleBindingEventHandler(ctrl *gomock.Controller) *MockRoleBindingEventHandler {
	mock := &MockRoleBindingEventHandler{ctrl: ctrl}
	mock.recorder = &MockRoleBindingEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoleBindingEventHandler) EXPECT() *MockRoleBindingEventHandlerMockRecorder {
	return m.recorder
}

// CreateRoleBinding mocks base method
func (m *MockRoleBindingEventHandler) CreateRoleBinding(obj *v1.RoleBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoleBinding", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoleBinding indicates an expected call of CreateRoleBinding
func (mr *MockRoleBindingEventHandlerMockRecorder) CreateRoleBinding(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoleBinding", reflect.TypeOf((*MockRoleBindingEventHandler)(nil).CreateRoleBinding), obj)
}

// UpdateRoleBinding mocks base method
func (m *MockRoleBindingEventHandler) UpdateRoleBinding(old, new *v1.RoleBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoleBinding", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoleBinding indicates an expected call of UpdateRoleBinding
func (mr *MockRoleBindingEventHandlerMockRecorder) UpdateRoleBinding(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleBinding", reflect.TypeOf((*MockRoleBindingEventHandler)(nil).UpdateRoleBinding), old, new)
}

// DeleteRoleBinding mocks base method
func (m *MockRoleBindingEventHandler) DeleteRoleBinding(obj *v1.RoleBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleBinding", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleBinding indicates an expected call of DeleteRoleBinding
func (mr *MockRoleBindingEventHandlerMockRecorder) DeleteRoleBinding(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleBinding", reflect.TypeOf((*MockRoleBindingEventHandler)(nil).DeleteRoleBinding), obj)
}

// GenericRoleBinding mocks base method
func (m *MockRoleBindingEventHandler) GenericRoleBinding(obj *v1.RoleBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericRoleBinding", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericRoleBinding indicates an expected call of GenericRoleBinding
func (mr *MockRoleBindingEventHandlerMockRecorder) GenericRoleBinding(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericRoleBinding", reflect.TypeOf((*MockRoleBindingEventHandler)(nil).GenericRoleBinding), obj)
}

// MockRoleBindingEventWatcher is a mock of RoleBindingEventWatcher interface
type MockRoleBindingEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockRoleBindingEventWatcherMockRecorder
}

// MockRoleBindingEventWatcherMockRecorder is the mock recorder for MockRoleBindingEventWatcher
type MockRoleBindingEventWatcherMockRecorder struct {
	mock *MockRoleBindingEventWatcher
}

// NewMockRoleBindingEventWatcher creates a new mock instance
func NewMockRoleBindingEventWatcher(ctrl *gomock.Controller) *MockRoleBindingEventWatcher {
	mock := &MockRoleBindingEventWatcher{ctrl: ctrl}
	mock.recorder = &MockRoleBindingEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoleBindingEventWatcher) EXPECT() *MockRoleBindingEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method
func (m *MockRoleBindingEventWatcher) AddEventHandler(ctx context.Context, h controller.RoleBindingEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler
func (mr *MockRoleBindingEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockRoleBindingEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockClusterRoleEventHandler is a mock of ClusterRoleEventHandler interface
type MockClusterRoleEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRoleEventHandlerMockRecorder
}

// MockClusterRoleEventHandlerMockRecorder is the mock recorder for MockClusterRoleEventHandler
type MockClusterRoleEventHandlerMockRecorder struct {
	mock *MockClusterRoleEventHandler
}

// NewMockClusterRoleEventHandler creates a new mock instance
func NewMockClusterRoleEventHandler(ctrl *gomock.Controller) *MockClusterRoleEventHandler {
	mock := &MockClusterRoleEventHandler{ctrl: ctrl}
	mock.recorder = &MockClusterRoleEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterRoleEventHandler) EXPECT() *MockClusterRoleEventHandlerMockRecorder {
	return m.recorder
}

// CreateClusterRole mocks base method
func (m *MockClusterRoleEventHandler) CreateClusterRole(obj *v1.ClusterRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterRole", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClusterRole indicates an expected call of CreateClusterRole
func (mr *MockClusterRoleEventHandlerMockRecorder) CreateClusterRole(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterRole", reflect.TypeOf((*MockClusterRoleEventHandler)(nil).CreateClusterRole), obj)
}

// UpdateClusterRole mocks base method
func (m *MockClusterRoleEventHandler) UpdateClusterRole(old, new *v1.ClusterRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterRole", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterRole indicates an expected call of UpdateClusterRole
func (mr *MockClusterRoleEventHandlerMockRecorder) UpdateClusterRole(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterRole", reflect.TypeOf((*MockClusterRoleEventHandler)(nil).UpdateClusterRole), old, new)
}

// DeleteClusterRole mocks base method
func (m *MockClusterRoleEventHandler) DeleteClusterRole(obj *v1.ClusterRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRole", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRole indicates an expected call of DeleteClusterRole
func (mr *MockClusterRoleEventHandlerMockRecorder) DeleteClusterRole(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRole", reflect.TypeOf((*MockClusterRoleEventHandler)(nil).DeleteClusterRole), obj)
}

// GenericClusterRole mocks base method
func (m *MockClusterRoleEventHandler) GenericClusterRole(obj *v1.ClusterRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericClusterRole", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericClusterRole indicates an expected call of GenericClusterRole
func (mr *MockClusterRoleEventHandlerMockRecorder) GenericClusterRole(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericClusterRole", reflect.TypeOf((*MockClusterRoleEventHandler)(nil).GenericClusterRole), obj)
}

// MockClusterRoleEventWatcher is a mock of ClusterRoleEventWatcher interface
type MockClusterRoleEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRoleEventWatcherMockRecorder
}

// MockClusterRoleEventWatcherMockRecorder is the mock recorder for MockClusterRoleEventWatcher
type MockClusterRoleEventWatcherMockRecorder struct {
	mock *MockClusterRoleEventWatcher
}

// NewMockClusterRoleEventWatcher creates a new mock instance
func NewMockClusterRoleEventWatcher(ctrl *gomock.Controller) *MockClusterRoleEventWatcher {
	mock := &MockClusterRoleEventWatcher{ctrl: ctrl}
	mock.recorder = &MockClusterRoleEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterRoleEventWatcher) EXPECT() *MockClusterRoleEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method
func (m *MockClusterRoleEventWatcher) AddEventHandler(ctx context.Context, h controller.ClusterRoleEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler
func (mr *MockClusterRoleEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockClusterRoleEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockClusterRoleBindingEventHandler is a mock of ClusterRoleBindingEventHandler interface
type MockClusterRoleBindingEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRoleBindingEventHandlerMockRecorder
}

// MockClusterRoleBindingEventHandlerMockRecorder is the mock recorder for MockClusterRoleBindingEventHandler
type MockClusterRoleBindingEventHandlerMockRecorder struct {
	mock *MockClusterRoleBindingEventHandler
}

// NewMockClusterRoleBindingEventHandler creates a new mock instance
func NewMockClusterRoleBindingEventHandler(ctrl *gomock.Controller) *MockClusterRoleBindingEventHandler {
	mock := &MockClusterRoleBindingEventHandler{ctrl: ctrl}
	mock.recorder = &MockClusterRoleBindingEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterRoleBindingEventHandler) EXPECT() *MockClusterRoleBindingEventHandlerMockRecorder {
	return m.recorder
}

// CreateClusterRoleBinding mocks base method
func (m *MockClusterRoleBindingEventHandler) CreateClusterRoleBinding(obj *v1.ClusterRoleBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterRoleBinding", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClusterRoleBinding indicates an expected call of CreateClusterRoleBinding
func (mr *MockClusterRoleBindingEventHandlerMockRecorder) CreateClusterRoleBinding(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterRoleBinding", reflect.TypeOf((*MockClusterRoleBindingEventHandler)(nil).CreateClusterRoleBinding), obj)
}

// UpdateClusterRoleBinding mocks base method
func (m *MockClusterRoleBindingEventHandler) UpdateClusterRoleBinding(old, new *v1.ClusterRoleBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterRoleBinding", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterRoleBinding indicates an expected call of UpdateClusterRoleBinding
func (mr *MockClusterRoleBindingEventHandlerMockRecorder) UpdateClusterRoleBinding(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterRoleBinding", reflect.TypeOf((*MockClusterRoleBindingEventHandler)(nil).UpdateClusterRoleBinding), old, new)
}

// DeleteClusterRoleBinding mocks base method
func (m *MockClusterRoleBindingEventHandler) DeleteClusterRoleBinding(obj *v1.ClusterRoleBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRoleBinding", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRoleBinding indicates an expected call of DeleteClusterRoleBinding
func (mr *MockClusterRoleBindingEventHandlerMockRecorder) DeleteClusterRoleBinding(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRoleBinding", reflect.TypeOf((*MockClusterRoleBindingEventHandler)(nil).DeleteClusterRoleBinding), obj)
}

// GenericClusterRoleBinding mocks base method
func (m *MockClusterRoleBindingEventHandler) GenericClusterRoleBinding(obj *v1.ClusterRoleBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericClusterRoleBinding", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericClusterRoleBinding indicates an expected call of GenericClusterRoleBinding
func (mr *MockClusterRoleBindingEventHandlerMockRecorder) GenericClusterRoleBinding(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericClusterRoleBinding", reflect.TypeOf((*MockClusterRoleBindingEventHandler)(nil).GenericClusterRoleBinding), obj)
}

// MockClusterRoleBindingEventWatcher is a mock of ClusterRoleBindingEventWatcher interface
type MockClusterRoleBindingEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRoleBindingEventWatcherMockRecorder
}

// MockClusterRoleBindingEventWatcherMockRecorder is the mock recorder for MockClusterRoleBindingEventWatcher
type MockClusterRoleBindingEventWatcherMockRecorder struct {
	mock *MockClusterRoleBindingEventWatcher
}

// NewMockClusterRoleBindingEventWatcher creates a new mock instance
func NewMockClusterRoleBindingEventWatcher(ctrl *gomock.Controller) *MockClusterRoleBindingEventWatcher {
	mock := &MockClusterRoleBindingEventWatcher{ctrl: ctrl}
	mock.recorder = &MockClusterRoleBindingEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterRoleBindingEventWatcher) EXPECT() *MockClusterRoleBindingEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method
func (m *MockClusterRoleBindingEventWatcher) AddEventHandler(ctx context.Context, h controller.ClusterRoleBindingEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler
func (mr *MockClusterRoleBindingEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockClusterRoleBindingEventWatcher)(nil).AddEventHandler), varargs...)
}
