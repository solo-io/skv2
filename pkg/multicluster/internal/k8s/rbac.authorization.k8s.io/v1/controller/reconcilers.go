// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./reconcilers.go -destination mocks/reconcilers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	rbac_authorization_k8s_io_v1 "k8s.io/api/rbac/v1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the Role Resource.
// implemented by the user
type RoleReconciler interface {
	ReconcileRole(obj *rbac_authorization_k8s_io_v1.Role) (reconcile.Result, error)
}

// Reconcile deletion events for the Role Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type RoleDeletionReconciler interface {
	ReconcileRoleDeletion(req reconcile.Request)
}

type RoleReconcilerFuncs struct {
	OnReconcileRole         func(obj *rbac_authorization_k8s_io_v1.Role) (reconcile.Result, error)
	OnReconcileRoleDeletion func(req reconcile.Request)
}

func (f *RoleReconcilerFuncs) ReconcileRole(obj *rbac_authorization_k8s_io_v1.Role) (reconcile.Result, error) {
	if f.OnReconcileRole == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileRole(obj)
}

func (f *RoleReconcilerFuncs) ReconcileRoleDeletion(req reconcile.Request) {
	if f.OnReconcileRoleDeletion == nil {
		return
	}
	f.OnReconcileRoleDeletion(req)
}

// Reconcile and finalize the Role Resource
// implemented by the user
type RoleFinalizer interface {
	RoleReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	RoleFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeRole(obj *rbac_authorization_k8s_io_v1.Role) error
}

type RoleReconcileLoop interface {
	RunRoleReconciler(ctx context.Context, rec RoleReconciler, predicates ...predicate.Predicate) error
}

type roleReconcileLoop struct {
	loop reconcile.Loop
}

func NewRoleReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) RoleReconcileLoop {
	return &roleReconcileLoop{
		loop: reconcile.NewLoop(name, mgr, &rbac_authorization_k8s_io_v1.Role{}, options),
	}
}

func (c *roleReconcileLoop) RunRoleReconciler(ctx context.Context, reconciler RoleReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericRoleReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(RoleFinalizer); ok {
		reconcilerWrapper = genericRoleFinalizer{
			genericRoleReconciler: genericReconciler,
			finalizingReconciler:  finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericRoleHandler implements a generic reconcile.Reconciler
type genericRoleReconciler struct {
	reconciler RoleReconciler
}

func (r genericRoleReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*rbac_authorization_k8s_io_v1.Role)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: Role handler received event for %T", object)
	}
	return r.reconciler.ReconcileRole(obj)
}

func (r genericRoleReconciler) ReconcileDeletion(request reconcile.Request) {
	if deletionReconciler, ok := r.reconciler.(RoleDeletionReconciler); ok {
		deletionReconciler.ReconcileRoleDeletion(request)
	}
}

// genericRoleFinalizer implements a generic reconcile.FinalizingReconciler
type genericRoleFinalizer struct {
	genericRoleReconciler
	finalizingReconciler RoleFinalizer
}

func (r genericRoleFinalizer) FinalizerName() string {
	return r.finalizingReconciler.RoleFinalizerName()
}

func (r genericRoleFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*rbac_authorization_k8s_io_v1.Role)
	if !ok {
		return errors.Errorf("internal error: Role handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeRole(obj)
}

// Reconcile Upsert events for the RoleBinding Resource.
// implemented by the user
type RoleBindingReconciler interface {
	ReconcileRoleBinding(obj *rbac_authorization_k8s_io_v1.RoleBinding) (reconcile.Result, error)
}

// Reconcile deletion events for the RoleBinding Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type RoleBindingDeletionReconciler interface {
	ReconcileRoleBindingDeletion(req reconcile.Request)
}

type RoleBindingReconcilerFuncs struct {
	OnReconcileRoleBinding         func(obj *rbac_authorization_k8s_io_v1.RoleBinding) (reconcile.Result, error)
	OnReconcileRoleBindingDeletion func(req reconcile.Request)
}

func (f *RoleBindingReconcilerFuncs) ReconcileRoleBinding(obj *rbac_authorization_k8s_io_v1.RoleBinding) (reconcile.Result, error) {
	if f.OnReconcileRoleBinding == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileRoleBinding(obj)
}

func (f *RoleBindingReconcilerFuncs) ReconcileRoleBindingDeletion(req reconcile.Request) {
	if f.OnReconcileRoleBindingDeletion == nil {
		return
	}
	f.OnReconcileRoleBindingDeletion(req)
}

// Reconcile and finalize the RoleBinding Resource
// implemented by the user
type RoleBindingFinalizer interface {
	RoleBindingReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	RoleBindingFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeRoleBinding(obj *rbac_authorization_k8s_io_v1.RoleBinding) error
}

type RoleBindingReconcileLoop interface {
	RunRoleBindingReconciler(ctx context.Context, rec RoleBindingReconciler, predicates ...predicate.Predicate) error
}

type roleBindingReconcileLoop struct {
	loop reconcile.Loop
}

func NewRoleBindingReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) RoleBindingReconcileLoop {
	return &roleBindingReconcileLoop{
		loop: reconcile.NewLoop(name, mgr, &rbac_authorization_k8s_io_v1.RoleBinding{}, options),
	}
}

func (c *roleBindingReconcileLoop) RunRoleBindingReconciler(ctx context.Context, reconciler RoleBindingReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericRoleBindingReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(RoleBindingFinalizer); ok {
		reconcilerWrapper = genericRoleBindingFinalizer{
			genericRoleBindingReconciler: genericReconciler,
			finalizingReconciler:         finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericRoleBindingHandler implements a generic reconcile.Reconciler
type genericRoleBindingReconciler struct {
	reconciler RoleBindingReconciler
}

func (r genericRoleBindingReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*rbac_authorization_k8s_io_v1.RoleBinding)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: RoleBinding handler received event for %T", object)
	}
	return r.reconciler.ReconcileRoleBinding(obj)
}

func (r genericRoleBindingReconciler) ReconcileDeletion(request reconcile.Request) {
	if deletionReconciler, ok := r.reconciler.(RoleBindingDeletionReconciler); ok {
		deletionReconciler.ReconcileRoleBindingDeletion(request)
	}
}

// genericRoleBindingFinalizer implements a generic reconcile.FinalizingReconciler
type genericRoleBindingFinalizer struct {
	genericRoleBindingReconciler
	finalizingReconciler RoleBindingFinalizer
}

func (r genericRoleBindingFinalizer) FinalizerName() string {
	return r.finalizingReconciler.RoleBindingFinalizerName()
}

func (r genericRoleBindingFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*rbac_authorization_k8s_io_v1.RoleBinding)
	if !ok {
		return errors.Errorf("internal error: RoleBinding handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeRoleBinding(obj)
}

// Reconcile Upsert events for the ClusterRole Resource.
// implemented by the user
type ClusterRoleReconciler interface {
	ReconcileClusterRole(obj *rbac_authorization_k8s_io_v1.ClusterRole) (reconcile.Result, error)
}

// Reconcile deletion events for the ClusterRole Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type ClusterRoleDeletionReconciler interface {
	ReconcileClusterRoleDeletion(req reconcile.Request)
}

type ClusterRoleReconcilerFuncs struct {
	OnReconcileClusterRole         func(obj *rbac_authorization_k8s_io_v1.ClusterRole) (reconcile.Result, error)
	OnReconcileClusterRoleDeletion func(req reconcile.Request)
}

func (f *ClusterRoleReconcilerFuncs) ReconcileClusterRole(obj *rbac_authorization_k8s_io_v1.ClusterRole) (reconcile.Result, error) {
	if f.OnReconcileClusterRole == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileClusterRole(obj)
}

func (f *ClusterRoleReconcilerFuncs) ReconcileClusterRoleDeletion(req reconcile.Request) {
	if f.OnReconcileClusterRoleDeletion == nil {
		return
	}
	f.OnReconcileClusterRoleDeletion(req)
}

// Reconcile and finalize the ClusterRole Resource
// implemented by the user
type ClusterRoleFinalizer interface {
	ClusterRoleReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	ClusterRoleFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeClusterRole(obj *rbac_authorization_k8s_io_v1.ClusterRole) error
}

type ClusterRoleReconcileLoop interface {
	RunClusterRoleReconciler(ctx context.Context, rec ClusterRoleReconciler, predicates ...predicate.Predicate) error
}

type clusterRoleReconcileLoop struct {
	loop reconcile.Loop
}

func NewClusterRoleReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) ClusterRoleReconcileLoop {
	return &clusterRoleReconcileLoop{
		loop: reconcile.NewLoop(name, mgr, &rbac_authorization_k8s_io_v1.ClusterRole{}, options),
	}
}

func (c *clusterRoleReconcileLoop) RunClusterRoleReconciler(ctx context.Context, reconciler ClusterRoleReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericClusterRoleReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(ClusterRoleFinalizer); ok {
		reconcilerWrapper = genericClusterRoleFinalizer{
			genericClusterRoleReconciler: genericReconciler,
			finalizingReconciler:         finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericClusterRoleHandler implements a generic reconcile.Reconciler
type genericClusterRoleReconciler struct {
	reconciler ClusterRoleReconciler
}

func (r genericClusterRoleReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*rbac_authorization_k8s_io_v1.ClusterRole)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: ClusterRole handler received event for %T", object)
	}
	return r.reconciler.ReconcileClusterRole(obj)
}

func (r genericClusterRoleReconciler) ReconcileDeletion(request reconcile.Request) {
	if deletionReconciler, ok := r.reconciler.(ClusterRoleDeletionReconciler); ok {
		deletionReconciler.ReconcileClusterRoleDeletion(request)
	}
}

// genericClusterRoleFinalizer implements a generic reconcile.FinalizingReconciler
type genericClusterRoleFinalizer struct {
	genericClusterRoleReconciler
	finalizingReconciler ClusterRoleFinalizer
}

func (r genericClusterRoleFinalizer) FinalizerName() string {
	return r.finalizingReconciler.ClusterRoleFinalizerName()
}

func (r genericClusterRoleFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*rbac_authorization_k8s_io_v1.ClusterRole)
	if !ok {
		return errors.Errorf("internal error: ClusterRole handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeClusterRole(obj)
}

// Reconcile Upsert events for the ClusterRoleBinding Resource.
// implemented by the user
type ClusterRoleBindingReconciler interface {
	ReconcileClusterRoleBinding(obj *rbac_authorization_k8s_io_v1.ClusterRoleBinding) (reconcile.Result, error)
}

// Reconcile deletion events for the ClusterRoleBinding Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type ClusterRoleBindingDeletionReconciler interface {
	ReconcileClusterRoleBindingDeletion(req reconcile.Request)
}

type ClusterRoleBindingReconcilerFuncs struct {
	OnReconcileClusterRoleBinding         func(obj *rbac_authorization_k8s_io_v1.ClusterRoleBinding) (reconcile.Result, error)
	OnReconcileClusterRoleBindingDeletion func(req reconcile.Request)
}

func (f *ClusterRoleBindingReconcilerFuncs) ReconcileClusterRoleBinding(obj *rbac_authorization_k8s_io_v1.ClusterRoleBinding) (reconcile.Result, error) {
	if f.OnReconcileClusterRoleBinding == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileClusterRoleBinding(obj)
}

func (f *ClusterRoleBindingReconcilerFuncs) ReconcileClusterRoleBindingDeletion(req reconcile.Request) {
	if f.OnReconcileClusterRoleBindingDeletion == nil {
		return
	}
	f.OnReconcileClusterRoleBindingDeletion(req)
}

// Reconcile and finalize the ClusterRoleBinding Resource
// implemented by the user
type ClusterRoleBindingFinalizer interface {
	ClusterRoleBindingReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	ClusterRoleBindingFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeClusterRoleBinding(obj *rbac_authorization_k8s_io_v1.ClusterRoleBinding) error
}

type ClusterRoleBindingReconcileLoop interface {
	RunClusterRoleBindingReconciler(ctx context.Context, rec ClusterRoleBindingReconciler, predicates ...predicate.Predicate) error
}

type clusterRoleBindingReconcileLoop struct {
	loop reconcile.Loop
}

func NewClusterRoleBindingReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) ClusterRoleBindingReconcileLoop {
	return &clusterRoleBindingReconcileLoop{
		loop: reconcile.NewLoop(name, mgr, &rbac_authorization_k8s_io_v1.ClusterRoleBinding{}, options),
	}
}

func (c *clusterRoleBindingReconcileLoop) RunClusterRoleBindingReconciler(ctx context.Context, reconciler ClusterRoleBindingReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericClusterRoleBindingReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(ClusterRoleBindingFinalizer); ok {
		reconcilerWrapper = genericClusterRoleBindingFinalizer{
			genericClusterRoleBindingReconciler: genericReconciler,
			finalizingReconciler:                finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericClusterRoleBindingHandler implements a generic reconcile.Reconciler
type genericClusterRoleBindingReconciler struct {
	reconciler ClusterRoleBindingReconciler
}

func (r genericClusterRoleBindingReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*rbac_authorization_k8s_io_v1.ClusterRoleBinding)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: ClusterRoleBinding handler received event for %T", object)
	}
	return r.reconciler.ReconcileClusterRoleBinding(obj)
}

func (r genericClusterRoleBindingReconciler) ReconcileDeletion(request reconcile.Request) {
	if deletionReconciler, ok := r.reconciler.(ClusterRoleBindingDeletionReconciler); ok {
		deletionReconciler.ReconcileClusterRoleBindingDeletion(request)
	}
}

// genericClusterRoleBindingFinalizer implements a generic reconcile.FinalizingReconciler
type genericClusterRoleBindingFinalizer struct {
	genericClusterRoleBindingReconciler
	finalizingReconciler ClusterRoleBindingFinalizer
}

func (r genericClusterRoleBindingFinalizer) FinalizerName() string {
	return r.finalizingReconciler.ClusterRoleBindingFinalizerName()
}

func (r genericClusterRoleBindingFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*rbac_authorization_k8s_io_v1.ClusterRoleBinding)
	if !ok {
		return errors.Errorf("internal error: ClusterRoleBinding handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeClusterRoleBinding(obj)
}
