// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	certificates_k8s_io_v1beta1 "k8s.io/api/certificates/v1beta1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the CertificateSigningRequest Resource across clusters.
// implemented by the user
type MulticlusterCertificateSigningRequestReconciler interface {
	ReconcileCertificateSigningRequest(clusterName string, obj *certificates_k8s_io_v1beta1.CertificateSigningRequest) (reconcile.Result, error)
}

// Reconcile deletion events for the CertificateSigningRequest Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterCertificateSigningRequestDeletionReconciler interface {
	ReconcileCertificateSigningRequestDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterCertificateSigningRequestReconcilerFuncs struct {
	OnReconcileCertificateSigningRequest         func(clusterName string, obj *certificates_k8s_io_v1beta1.CertificateSigningRequest) (reconcile.Result, error)
	OnReconcileCertificateSigningRequestDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterCertificateSigningRequestReconcilerFuncs) ReconcileCertificateSigningRequest(clusterName string, obj *certificates_k8s_io_v1beta1.CertificateSigningRequest) (reconcile.Result, error) {
	if f.OnReconcileCertificateSigningRequest == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileCertificateSigningRequest(clusterName, obj)
}

func (f *MulticlusterCertificateSigningRequestReconcilerFuncs) ReconcileCertificateSigningRequestDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileCertificateSigningRequestDeletion == nil {
		return nil
	}
	return f.OnReconcileCertificateSigningRequestDeletion(clusterName, req)
}

type MulticlusterCertificateSigningRequestReconcileLoop interface {
	// AddMulticlusterCertificateSigningRequestReconciler adds a MulticlusterCertificateSigningRequestReconciler to the MulticlusterCertificateSigningRequestReconcileLoop.
	AddMulticlusterCertificateSigningRequestReconciler(ctx context.Context, rec MulticlusterCertificateSigningRequestReconciler, predicates ...predicate.Predicate)
}

type multiclusterCertificateSigningRequestReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterCertificateSigningRequestReconcileLoop) AddMulticlusterCertificateSigningRequestReconciler(ctx context.Context, rec MulticlusterCertificateSigningRequestReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericCertificateSigningRequestMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterCertificateSigningRequestReconcileLoop(name string, cw multicluster.ClusterWatcher) MulticlusterCertificateSigningRequestReconcileLoop {
	return &multiclusterCertificateSigningRequestReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &certificates_k8s_io_v1beta1.CertificateSigningRequest{})}
}

type genericCertificateSigningRequestMulticlusterReconciler struct {
	reconciler MulticlusterCertificateSigningRequestReconciler
}

func (g genericCertificateSigningRequestMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterCertificateSigningRequestDeletionReconciler); ok {
		return deletionReconciler.ReconcileCertificateSigningRequestDeletion(cluster, req)
	}
	return nil
}

func (g genericCertificateSigningRequestMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*certificates_k8s_io_v1beta1.CertificateSigningRequest)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: CertificateSigningRequest handler received event for %T", object)
	}
	return g.reconciler.ReconcileCertificateSigningRequest(cluster, obj)
}
