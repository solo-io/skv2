// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./clients.go -destination mocks/clients.go

package v1beta1

import (
	"context"

	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	certificates_k8s_io_v1beta1 "k8s.io/api/certificates/v1beta1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the certificates.k8s.io/v1beta1 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the certificates.k8s.io/v1beta1 APIs
type Clientset interface {
	// clienset for the certificates.k8s.io/v1beta1/v1beta1 APIs
	CertificateSigningRequests() CertificateSigningRequestClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := certificates_k8s_io_v1beta1.AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the certificates.k8s.io/v1beta1/v1beta1 APIs
func (c *clientSet) CertificateSigningRequests() CertificateSigningRequestClient {
	return NewCertificateSigningRequestClient(c.client)
}

// Reader knows how to read and list CertificateSigningRequests.
type CertificateSigningRequestReader interface {
	// Get retrieves a CertificateSigningRequest for the given object key
	GetCertificateSigningRequest(ctx context.Context, key client.ObjectKey) (*certificates_k8s_io_v1beta1.CertificateSigningRequest, error)

	// List retrieves list of CertificateSigningRequests for a given namespace and list options.
	ListCertificateSigningRequest(ctx context.Context, opts ...client.ListOption) (*certificates_k8s_io_v1beta1.CertificateSigningRequestList, error)
}

// CertificateSigningRequestTransitionFunction instructs the CertificateSigningRequestWriter how to transition between an existing
// CertificateSigningRequest object and a desired on an Upsert
type CertificateSigningRequestTransitionFunction func(existing, desired *certificates_k8s_io_v1beta1.CertificateSigningRequest) error

// Writer knows how to create, delete, and update CertificateSigningRequests.
type CertificateSigningRequestWriter interface {
	// Create saves the CertificateSigningRequest object.
	CreateCertificateSigningRequest(ctx context.Context, obj *certificates_k8s_io_v1beta1.CertificateSigningRequest, opts ...client.CreateOption) error

	// Delete deletes the CertificateSigningRequest object.
	DeleteCertificateSigningRequest(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given CertificateSigningRequest object.
	UpdateCertificateSigningRequest(ctx context.Context, obj *certificates_k8s_io_v1beta1.CertificateSigningRequest, opts ...client.UpdateOption) error

	// Patch patches the given CertificateSigningRequest object.
	PatchCertificateSigningRequest(ctx context.Context, obj *certificates_k8s_io_v1beta1.CertificateSigningRequest, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all CertificateSigningRequest objects matching the given options.
	DeleteAllOfCertificateSigningRequest(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the CertificateSigningRequest object.
	UpsertCertificateSigningRequest(ctx context.Context, obj *certificates_k8s_io_v1beta1.CertificateSigningRequest, transitionFuncs ...CertificateSigningRequestTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a CertificateSigningRequest object.
type CertificateSigningRequestStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given CertificateSigningRequest object.
	UpdateCertificateSigningRequestStatus(ctx context.Context, obj *certificates_k8s_io_v1beta1.CertificateSigningRequest, opts ...client.UpdateOption) error

	// Patch patches the given CertificateSigningRequest object's subresource.
	PatchCertificateSigningRequestStatus(ctx context.Context, obj *certificates_k8s_io_v1beta1.CertificateSigningRequest, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on CertificateSigningRequests.
type CertificateSigningRequestClient interface {
	CertificateSigningRequestReader
	CertificateSigningRequestWriter
	CertificateSigningRequestStatusWriter
}

type certificateSigningRequestClient struct {
	client client.Client
}

func NewCertificateSigningRequestClient(client client.Client) *certificateSigningRequestClient {
	return &certificateSigningRequestClient{client: client}
}

func (c *certificateSigningRequestClient) GetCertificateSigningRequest(ctx context.Context, key client.ObjectKey) (*certificates_k8s_io_v1beta1.CertificateSigningRequest, error) {
	obj := &certificates_k8s_io_v1beta1.CertificateSigningRequest{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *certificateSigningRequestClient) ListCertificateSigningRequest(ctx context.Context, opts ...client.ListOption) (*certificates_k8s_io_v1beta1.CertificateSigningRequestList, error) {
	list := &certificates_k8s_io_v1beta1.CertificateSigningRequestList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *certificateSigningRequestClient) CreateCertificateSigningRequest(ctx context.Context, obj *certificates_k8s_io_v1beta1.CertificateSigningRequest, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *certificateSigningRequestClient) DeleteCertificateSigningRequest(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &certificates_k8s_io_v1beta1.CertificateSigningRequest{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *certificateSigningRequestClient) UpdateCertificateSigningRequest(ctx context.Context, obj *certificates_k8s_io_v1beta1.CertificateSigningRequest, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *certificateSigningRequestClient) PatchCertificateSigningRequest(ctx context.Context, obj *certificates_k8s_io_v1beta1.CertificateSigningRequest, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *certificateSigningRequestClient) DeleteAllOfCertificateSigningRequest(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &certificates_k8s_io_v1beta1.CertificateSigningRequest{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *certificateSigningRequestClient) UpsertCertificateSigningRequest(ctx context.Context, obj *certificates_k8s_io_v1beta1.CertificateSigningRequest, transitionFuncs ...CertificateSigningRequestTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*certificates_k8s_io_v1beta1.CertificateSigningRequest), desired.(*certificates_k8s_io_v1beta1.CertificateSigningRequest)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *certificateSigningRequestClient) UpdateCertificateSigningRequestStatus(ctx context.Context, obj *certificates_k8s_io_v1beta1.CertificateSigningRequest, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *certificateSigningRequestClient) PatchCertificateSigningRequestStatus(ctx context.Context, obj *certificates_k8s_io_v1beta1.CertificateSigningRequest, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides CertificateSigningRequestClients for multiple clusters.
type MulticlusterCertificateSigningRequestClient interface {
	// Cluster returns a CertificateSigningRequestClient for the given cluster
	Cluster(cluster string) (CertificateSigningRequestClient, error)
}

type multiclusterCertificateSigningRequestClient struct {
	client multicluster.Client
}

func NewMulticlusterCertificateSigningRequestClient(client multicluster.Client) MulticlusterCertificateSigningRequestClient {
	return &multiclusterCertificateSigningRequestClient{client: client}
}

func (m *multiclusterCertificateSigningRequestClient) Cluster(cluster string) (CertificateSigningRequestClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewCertificateSigningRequestClient(client), nil
}
