// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1beta1sets

import (
	certificates_k8s_io_v1beta1 "k8s.io/api/certificates/v1beta1"

	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type CertificateSigningRequestSet interface {
	Keys() sets.String
	List() []*certificates_k8s_io_v1beta1.CertificateSigningRequest
	Map() map[string]*certificates_k8s_io_v1beta1.CertificateSigningRequest
	Insert(certificateSigningRequest ...*certificates_k8s_io_v1beta1.CertificateSigningRequest)
	Equal(certificateSigningRequestSet CertificateSigningRequestSet) bool
	Has(certificateSigningRequest *certificates_k8s_io_v1beta1.CertificateSigningRequest) bool
	Delete(certificateSigningRequest *certificates_k8s_io_v1beta1.CertificateSigningRequest)
	Union(set CertificateSigningRequestSet) CertificateSigningRequestSet
	Difference(set CertificateSigningRequestSet) CertificateSigningRequestSet
	Intersection(set CertificateSigningRequestSet) CertificateSigningRequestSet
	Find(id ezkube.ResourceId) (*certificates_k8s_io_v1beta1.CertificateSigningRequest, error)
	Length() int
}

func makeGenericCertificateSigningRequestSet(certificateSigningRequestList []*certificates_k8s_io_v1beta1.CertificateSigningRequest) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range certificateSigningRequestList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type certificateSigningRequestSet struct {
	set sksets.ResourceSet
}

func NewCertificateSigningRequestSet(certificateSigningRequestList ...*certificates_k8s_io_v1beta1.CertificateSigningRequest) CertificateSigningRequestSet {
	return &certificateSigningRequestSet{set: makeGenericCertificateSigningRequestSet(certificateSigningRequestList)}
}

func NewCertificateSigningRequestSetFromList(certificateSigningRequestList *certificates_k8s_io_v1beta1.CertificateSigningRequestList) CertificateSigningRequestSet {
	list := make([]*certificates_k8s_io_v1beta1.CertificateSigningRequest, 0, len(certificateSigningRequestList.Items))
	for idx := range certificateSigningRequestList.Items {
		list = append(list, &certificateSigningRequestList.Items[idx])
	}
	return &certificateSigningRequestSet{set: makeGenericCertificateSigningRequestSet(list)}
}

func (s *certificateSigningRequestSet) Keys() sets.String {
	return s.set.Keys()
}

func (s *certificateSigningRequestSet) List() []*certificates_k8s_io_v1beta1.CertificateSigningRequest {
	var certificateSigningRequestList []*certificates_k8s_io_v1beta1.CertificateSigningRequest
	for _, obj := range s.set.List() {
		certificateSigningRequestList = append(certificateSigningRequestList, obj.(*certificates_k8s_io_v1beta1.CertificateSigningRequest))
	}
	return certificateSigningRequestList
}

func (s *certificateSigningRequestSet) Map() map[string]*certificates_k8s_io_v1beta1.CertificateSigningRequest {
	newMap := map[string]*certificates_k8s_io_v1beta1.CertificateSigningRequest{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*certificates_k8s_io_v1beta1.CertificateSigningRequest)
	}
	return newMap
}

func (s *certificateSigningRequestSet) Insert(
	certificateSigningRequestList ...*certificates_k8s_io_v1beta1.CertificateSigningRequest,
) {
	for _, obj := range certificateSigningRequestList {
		s.set.Insert(obj)
	}
}

func (s *certificateSigningRequestSet) Has(certificateSigningRequest *certificates_k8s_io_v1beta1.CertificateSigningRequest) bool {
	return s.set.Has(certificateSigningRequest)
}

func (s *certificateSigningRequestSet) Equal(
	certificateSigningRequestSet CertificateSigningRequestSet,
) bool {
	return s.set.Equal(makeGenericCertificateSigningRequestSet(certificateSigningRequestSet.List()))
}

func (s *certificateSigningRequestSet) Delete(CertificateSigningRequest *certificates_k8s_io_v1beta1.CertificateSigningRequest) {
	s.set.Delete(CertificateSigningRequest)
}

func (s *certificateSigningRequestSet) Union(set CertificateSigningRequestSet) CertificateSigningRequestSet {
	return NewCertificateSigningRequestSet(append(s.List(), set.List()...)...)
}

func (s *certificateSigningRequestSet) Difference(set CertificateSigningRequestSet) CertificateSigningRequestSet {
	newSet := s.set.Difference(makeGenericCertificateSigningRequestSet(set.List()))
	return &certificateSigningRequestSet{set: newSet}
}

func (s *certificateSigningRequestSet) Intersection(set CertificateSigningRequestSet) CertificateSigningRequestSet {
	newSet := s.set.Intersection(makeGenericCertificateSigningRequestSet(set.List()))
	var certificateSigningRequestList []*certificates_k8s_io_v1beta1.CertificateSigningRequest
	for _, obj := range newSet.List() {
		certificateSigningRequestList = append(certificateSigningRequestList, obj.(*certificates_k8s_io_v1beta1.CertificateSigningRequest))
	}
	return NewCertificateSigningRequestSet(certificateSigningRequestList...)
}

func (s *certificateSigningRequestSet) Find(id ezkube.ResourceId) (*certificates_k8s_io_v1beta1.CertificateSigningRequest, error) {
	obj, err := s.set.Find(&certificates_k8s_io_v1beta1.CertificateSigningRequest{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*certificates_k8s_io_v1beta1.CertificateSigningRequest), nil
}

func (s *certificateSigningRequestSet) Length() int {
	return s.set.Length()
}
