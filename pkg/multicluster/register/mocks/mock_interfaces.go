// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_register is a generated GoMock package.
package mock_register

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/skv2/pkg/api/multicluster.solo.io/v1alpha1"
	register "github.com/solo-io/skv2/pkg/multicluster/register"
	v1 "k8s.io/api/core/v1"
	rest "k8s.io/client-go/rest"
	clientcmd "k8s.io/client-go/tools/clientcmd"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockClusterRegistrant is a mock of ClusterRegistrant interface
type MockClusterRegistrant struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRegistrantMockRecorder
}

// MockClusterRegistrantMockRecorder is the mock recorder for MockClusterRegistrant
type MockClusterRegistrantMockRecorder struct {
	mock *MockClusterRegistrant
}

// NewMockClusterRegistrant creates a new mock instance
func NewMockClusterRegistrant(ctrl *gomock.Controller) *MockClusterRegistrant {
	mock := &MockClusterRegistrant{ctrl: ctrl}
	mock.recorder = &MockClusterRegistrantMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterRegistrant) EXPECT() *MockClusterRegistrantMockRecorder {
	return m.recorder
}

// EnsureRemoteServiceAccount mocks base method
func (m *MockClusterRegistrant) EnsureRemoteServiceAccount(ctx context.Context, remoteClientCfg clientcmd.ClientConfig, opts register.Options) (*v1.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureRemoteServiceAccount", ctx, remoteClientCfg, opts)
	ret0, _ := ret[0].(*v1.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureRemoteServiceAccount indicates an expected call of EnsureRemoteServiceAccount
func (mr *MockClusterRegistrantMockRecorder) EnsureRemoteServiceAccount(ctx, remoteClientCfg, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureRemoteServiceAccount", reflect.TypeOf((*MockClusterRegistrant)(nil).EnsureRemoteServiceAccount), ctx, remoteClientCfg, opts)
}

// DeleteRemoteServiceAccount mocks base method
func (m *MockClusterRegistrant) DeleteRemoteServiceAccount(ctx context.Context, remoteClientCfg clientcmd.ClientConfig, opts register.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRemoteServiceAccount", ctx, remoteClientCfg, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRemoteServiceAccount indicates an expected call of DeleteRemoteServiceAccount
func (mr *MockClusterRegistrantMockRecorder) DeleteRemoteServiceAccount(ctx, remoteClientCfg, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRemoteServiceAccount", reflect.TypeOf((*MockClusterRegistrant)(nil).DeleteRemoteServiceAccount), ctx, remoteClientCfg, opts)
}

// CreateRemoteAccessToken mocks base method
func (m *MockClusterRegistrant) CreateRemoteAccessToken(ctx context.Context, remoteClientCfg clientcmd.ClientConfig, sa client.ObjectKey, opts register.RbacOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRemoteAccessToken", ctx, remoteClientCfg, sa, opts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRemoteAccessToken indicates an expected call of CreateRemoteAccessToken
func (mr *MockClusterRegistrantMockRecorder) CreateRemoteAccessToken(ctx, remoteClientCfg, sa, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRemoteAccessToken", reflect.TypeOf((*MockClusterRegistrant)(nil).CreateRemoteAccessToken), ctx, remoteClientCfg, sa, opts)
}

// DeleteRemoteAccessResources mocks base method
func (m *MockClusterRegistrant) DeleteRemoteAccessResources(ctx context.Context, remoteClientCfg clientcmd.ClientConfig, opts register.RbacOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRemoteAccessResources", ctx, remoteClientCfg, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRemoteAccessResources indicates an expected call of DeleteRemoteAccessResources
func (mr *MockClusterRegistrantMockRecorder) DeleteRemoteAccessResources(ctx, remoteClientCfg, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRemoteAccessResources", reflect.TypeOf((*MockClusterRegistrant)(nil).DeleteRemoteAccessResources), ctx, remoteClientCfg, opts)
}

// RegisterClusterWithToken mocks base method
func (m *MockClusterRegistrant) RegisterClusterWithToken(ctx context.Context, masterClusterCfg *rest.Config, remoteClientCfg clientcmd.ClientConfig, token string, opts register.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterClusterWithToken", ctx, masterClusterCfg, remoteClientCfg, token, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterClusterWithToken indicates an expected call of RegisterClusterWithToken
func (mr *MockClusterRegistrantMockRecorder) RegisterClusterWithToken(ctx, masterClusterCfg, remoteClientCfg, token, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterClusterWithToken", reflect.TypeOf((*MockClusterRegistrant)(nil).RegisterClusterWithToken), ctx, masterClusterCfg, remoteClientCfg, token, opts)
}

// RegisterProviderClusterWithToken mocks base method
func (m *MockClusterRegistrant) RegisterProviderClusterWithToken(ctx context.Context, masterClusterCfg *rest.Config, remoteClientCfg clientcmd.ClientConfig, token string, opts register.Options, providerInfo *v1alpha1.KubernetesClusterSpec_ProviderInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterProviderClusterWithToken", ctx, masterClusterCfg, remoteClientCfg, token, opts, providerInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterProviderClusterWithToken indicates an expected call of RegisterProviderClusterWithToken
func (mr *MockClusterRegistrantMockRecorder) RegisterProviderClusterWithToken(ctx, masterClusterCfg, remoteClientCfg, token, opts, providerInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterProviderClusterWithToken", reflect.TypeOf((*MockClusterRegistrant)(nil).RegisterProviderClusterWithToken), ctx, masterClusterCfg, remoteClientCfg, token, opts, providerInfo)
}

// DeregisterCluster mocks base method
func (m *MockClusterRegistrant) DeregisterCluster(ctx context.Context, masterClusterCfg *rest.Config, opts register.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterCluster", ctx, masterClusterCfg, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeregisterCluster indicates an expected call of DeregisterCluster
func (mr *MockClusterRegistrantMockRecorder) DeregisterCluster(ctx, masterClusterCfg, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterCluster", reflect.TypeOf((*MockClusterRegistrant)(nil).DeregisterCluster), ctx, masterClusterCfg, opts)
}
