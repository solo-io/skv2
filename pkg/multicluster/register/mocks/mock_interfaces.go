// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_register is a generated GoMock package.
package mock_register

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	register "github.com/solo-io/skv2/pkg/multicluster/register"
	clientcmd "k8s.io/client-go/tools/clientcmd"
)

// MockClusterRegistrant is a mock of ClusterRegistrant interface.
type MockClusterRegistrant struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRegistrantMockRecorder
}

// MockClusterRegistrantMockRecorder is the mock recorder for MockClusterRegistrant.
type MockClusterRegistrantMockRecorder struct {
	mock *MockClusterRegistrant
}

// NewMockClusterRegistrant creates a new mock instance.
func NewMockClusterRegistrant(ctrl *gomock.Controller) *MockClusterRegistrant {
	mock := &MockClusterRegistrant{ctrl: ctrl}
	mock.recorder = &MockClusterRegistrantMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterRegistrant) EXPECT() *MockClusterRegistrantMockRecorder {
	return m.recorder
}

// RegisterClusterFromConfig mocks base method.
func (m *MockClusterRegistrant) RegisterClusterFromConfig(ctx context.Context, remoteCfg clientcmd.ClientConfig, info register.ClusterInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterClusterFromConfig", ctx, remoteCfg, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterClusterFromConfig indicates an expected call of RegisterClusterFromConfig.
func (mr *MockClusterRegistrantMockRecorder) RegisterClusterFromConfig(ctx, remoteCfg, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterClusterFromConfig", reflect.TypeOf((*MockClusterRegistrant)(nil).RegisterClusterFromConfig), ctx, remoteCfg, info)
}

// RegisterCluster mocks base method.
func (m *MockClusterRegistrant) RegisterCluster(ctx context.Context, info register.ClusterInfo, remoteCfgPath, remoteCtx string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCluster", ctx, info, remoteCfgPath, remoteCtx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterCluster indicates an expected call of RegisterCluster.
func (mr *MockClusterRegistrantMockRecorder) RegisterCluster(ctx, info, remoteCfgPath, remoteCtx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCluster", reflect.TypeOf((*MockClusterRegistrant)(nil).RegisterCluster), ctx, info, remoteCfgPath, remoteCtx)
}
