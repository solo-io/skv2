// Copyright 2010 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// A feature-rich test file for the protocol compiler and libraries.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: proto2_proto/test.proto

package proto2_proto

import (
	math "math"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type FOO int32

const (
	FOO_FOO1 FOO = 1
)

// Enum value maps for FOO.
var (
	FOO_name = map[int32]string{
		1: "FOO1",
	}
	FOO_value = map[string]int32{
		"FOO1": 1,
	}
)

func (x FOO) Enum() *FOO {
	p := new(FOO)
	*p = x
	return p
}

func (x FOO) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FOO) Descriptor() protoreflect.EnumDescriptor {
	return file_proto2_proto_test_proto_enumTypes[0].Descriptor()
}

func (FOO) Type() protoreflect.EnumType {
	return &file_proto2_proto_test_proto_enumTypes[0]
}

func (x FOO) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FOO) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FOO(num)
	return nil
}

// Deprecated: Use FOO.Descriptor instead.
func (FOO) EnumDescriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{0}
}

// An enum, for completeness.
type GoTest_KIND int32

const (
	GoTest_VOID GoTest_KIND = 0
	// Basic types
	GoTest_BOOL        GoTest_KIND = 1
	GoTest_BYTES       GoTest_KIND = 2
	GoTest_FINGERPRINT GoTest_KIND = 3
	GoTest_FLOAT       GoTest_KIND = 4
	GoTest_INT         GoTest_KIND = 5
	GoTest_STRING      GoTest_KIND = 6
	GoTest_TIME        GoTest_KIND = 7
	// Groupings
	GoTest_TUPLE GoTest_KIND = 8
	GoTest_ARRAY GoTest_KIND = 9
	GoTest_MAP   GoTest_KIND = 10
	// Table types
	GoTest_TABLE GoTest_KIND = 11
	// Functions
	GoTest_FUNCTION GoTest_KIND = 12 // last tag
)

// Enum value maps for GoTest_KIND.
var (
	GoTest_KIND_name = map[int32]string{
		0:  "VOID",
		1:  "BOOL",
		2:  "BYTES",
		3:  "FINGERPRINT",
		4:  "FLOAT",
		5:  "INT",
		6:  "STRING",
		7:  "TIME",
		8:  "TUPLE",
		9:  "ARRAY",
		10: "MAP",
		11: "TABLE",
		12: "FUNCTION",
	}
	GoTest_KIND_value = map[string]int32{
		"VOID":        0,
		"BOOL":        1,
		"BYTES":       2,
		"FINGERPRINT": 3,
		"FLOAT":       4,
		"INT":         5,
		"STRING":      6,
		"TIME":        7,
		"TUPLE":       8,
		"ARRAY":       9,
		"MAP":         10,
		"TABLE":       11,
		"FUNCTION":    12,
	}
)

func (x GoTest_KIND) Enum() *GoTest_KIND {
	p := new(GoTest_KIND)
	*p = x
	return p
}

func (x GoTest_KIND) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoTest_KIND) Descriptor() protoreflect.EnumDescriptor {
	return file_proto2_proto_test_proto_enumTypes[1].Descriptor()
}

func (GoTest_KIND) Type() protoreflect.EnumType {
	return &file_proto2_proto_test_proto_enumTypes[1]
}

func (x GoTest_KIND) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GoTest_KIND) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GoTest_KIND(num)
	return nil
}

// Deprecated: Use GoTest_KIND.Descriptor instead.
func (GoTest_KIND) EnumDescriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{2, 0}
}

type MyMessage_Color int32

const (
	MyMessage_RED   MyMessage_Color = 0
	MyMessage_GREEN MyMessage_Color = 1
	MyMessage_BLUE  MyMessage_Color = 2
)

// Enum value maps for MyMessage_Color.
var (
	MyMessage_Color_name = map[int32]string{
		0: "RED",
		1: "GREEN",
		2: "BLUE",
	}
	MyMessage_Color_value = map[string]int32{
		"RED":   0,
		"GREEN": 1,
		"BLUE":  2,
	}
)

func (x MyMessage_Color) Enum() *MyMessage_Color {
	p := new(MyMessage_Color)
	*p = x
	return p
}

func (x MyMessage_Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MyMessage_Color) Descriptor() protoreflect.EnumDescriptor {
	return file_proto2_proto_test_proto_enumTypes[2].Descriptor()
}

func (MyMessage_Color) Type() protoreflect.EnumType {
	return &file_proto2_proto_test_proto_enumTypes[2]
}

func (x MyMessage_Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MyMessage_Color) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MyMessage_Color(num)
	return nil
}

// Deprecated: Use MyMessage_Color.Descriptor instead.
func (MyMessage_Color) EnumDescriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{13, 0}
}

type DefaultsMessage_DefaultsEnum int32

const (
	DefaultsMessage_ZERO DefaultsMessage_DefaultsEnum = 0
	DefaultsMessage_ONE  DefaultsMessage_DefaultsEnum = 1
	DefaultsMessage_TWO  DefaultsMessage_DefaultsEnum = 2
)

// Enum value maps for DefaultsMessage_DefaultsEnum.
var (
	DefaultsMessage_DefaultsEnum_name = map[int32]string{
		0: "ZERO",
		1: "ONE",
		2: "TWO",
	}
	DefaultsMessage_DefaultsEnum_value = map[string]int32{
		"ZERO": 0,
		"ONE":  1,
		"TWO":  2,
	}
)

func (x DefaultsMessage_DefaultsEnum) Enum() *DefaultsMessage_DefaultsEnum {
	p := new(DefaultsMessage_DefaultsEnum)
	*p = x
	return p
}

func (x DefaultsMessage_DefaultsEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DefaultsMessage_DefaultsEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_proto2_proto_test_proto_enumTypes[3].Descriptor()
}

func (DefaultsMessage_DefaultsEnum) Type() protoreflect.EnumType {
	return &file_proto2_proto_test_proto_enumTypes[3]
}

func (x DefaultsMessage_DefaultsEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DefaultsMessage_DefaultsEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DefaultsMessage_DefaultsEnum(num)
	return nil
}

// Deprecated: Use DefaultsMessage_DefaultsEnum.Descriptor instead.
func (DefaultsMessage_DefaultsEnum) EnumDescriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{16, 0}
}

type Defaults_Color int32

const (
	Defaults_RED   Defaults_Color = 0
	Defaults_GREEN Defaults_Color = 1
	Defaults_BLUE  Defaults_Color = 2
)

// Enum value maps for Defaults_Color.
var (
	Defaults_Color_name = map[int32]string{
		0: "RED",
		1: "GREEN",
		2: "BLUE",
	}
	Defaults_Color_value = map[string]int32{
		"RED":   0,
		"GREEN": 1,
		"BLUE":  2,
	}
)

func (x Defaults_Color) Enum() *Defaults_Color {
	p := new(Defaults_Color)
	*p = x
	return p
}

func (x Defaults_Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Defaults_Color) Descriptor() protoreflect.EnumDescriptor {
	return file_proto2_proto_test_proto_enumTypes[4].Descriptor()
}

func (Defaults_Color) Type() protoreflect.EnumType {
	return &file_proto2_proto_test_proto_enumTypes[4]
}

func (x Defaults_Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Defaults_Color) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Defaults_Color(num)
	return nil
}

// Deprecated: Use Defaults_Color.Descriptor instead.
func (Defaults_Color) EnumDescriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{20, 0}
}

type RepeatedEnum_Color int32

const (
	RepeatedEnum_RED RepeatedEnum_Color = 1
)

// Enum value maps for RepeatedEnum_Color.
var (
	RepeatedEnum_Color_name = map[int32]string{
		1: "RED",
	}
	RepeatedEnum_Color_value = map[string]int32{
		"RED": 1,
	}
)

func (x RepeatedEnum_Color) Enum() *RepeatedEnum_Color {
	p := new(RepeatedEnum_Color)
	*p = x
	return p
}

func (x RepeatedEnum_Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RepeatedEnum_Color) Descriptor() protoreflect.EnumDescriptor {
	return file_proto2_proto_test_proto_enumTypes[5].Descriptor()
}

func (RepeatedEnum_Color) Type() protoreflect.EnumType {
	return &file_proto2_proto_test_proto_enumTypes[5]
}

func (x RepeatedEnum_Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RepeatedEnum_Color) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RepeatedEnum_Color(num)
	return nil
}

// Deprecated: Use RepeatedEnum_Color.Descriptor instead.
func (RepeatedEnum_Color) EnumDescriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{22, 0}
}

type GoEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Foo *FOO `protobuf:"varint,1,req,name=foo,enum=proto2_test.FOO" json:"foo,omitempty"`
}

func (x *GoEnum) Reset() {
	*x = GoEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoEnum) ProtoMessage() {}

func (x *GoEnum) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoEnum.ProtoReflect.Descriptor instead.
func (*GoEnum) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{0}
}

func (x *GoEnum) GetFoo() FOO {
	if x != nil && x.Foo != nil {
		return *x.Foo
	}
	return FOO_FOO1
}

type GoTestField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label *string `protobuf:"bytes,1,req,name=Label" json:"Label,omitempty"`
	Type  *string `protobuf:"bytes,2,req,name=Type" json:"Type,omitempty"`
}

func (x *GoTestField) Reset() {
	*x = GoTestField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoTestField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoTestField) ProtoMessage() {}

func (x *GoTestField) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoTestField.ProtoReflect.Descriptor instead.
func (*GoTestField) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{1}
}

func (x *GoTestField) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *GoTestField) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type GoTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Some typical parameters
	Kind  *GoTest_KIND `protobuf:"varint,1,req,name=Kind,enum=proto2_test.GoTest_KIND" json:"Kind,omitempty"`
	Table *string      `protobuf:"bytes,2,opt,name=Table" json:"Table,omitempty"`
	Param *int32       `protobuf:"varint,3,opt,name=Param" json:"Param,omitempty"`
	// Required, repeated and optional foreign fields.
	RequiredField *GoTestField   `protobuf:"bytes,4,req,name=RequiredField" json:"RequiredField,omitempty"`
	RepeatedField []*GoTestField `protobuf:"bytes,5,rep,name=RepeatedField" json:"RepeatedField,omitempty"`
	OptionalField *GoTestField   `protobuf:"bytes,6,opt,name=OptionalField" json:"OptionalField,omitempty"`
	// Required fields of all basic types
	F_BoolRequired     *bool    `protobuf:"varint,10,req,name=F_Bool_required,json=FBoolRequired" json:"F_Bool_required,omitempty"`
	F_Int32Required    *int32   `protobuf:"varint,11,req,name=F_Int32_required,json=FInt32Required" json:"F_Int32_required,omitempty"`
	F_Int64Required    *int64   `protobuf:"varint,12,req,name=F_Int64_required,json=FInt64Required" json:"F_Int64_required,omitempty"`
	F_Fixed32Required  *uint32  `protobuf:"fixed32,13,req,name=F_Fixed32_required,json=FFixed32Required" json:"F_Fixed32_required,omitempty"`
	F_Fixed64Required  *uint64  `protobuf:"fixed64,14,req,name=F_Fixed64_required,json=FFixed64Required" json:"F_Fixed64_required,omitempty"`
	F_Uint32Required   *uint32  `protobuf:"varint,15,req,name=F_Uint32_required,json=FUint32Required" json:"F_Uint32_required,omitempty"`
	F_Uint64Required   *uint64  `protobuf:"varint,16,req,name=F_Uint64_required,json=FUint64Required" json:"F_Uint64_required,omitempty"`
	F_FloatRequired    *float32 `protobuf:"fixed32,17,req,name=F_Float_required,json=FFloatRequired" json:"F_Float_required,omitempty"`
	F_DoubleRequired   *float64 `protobuf:"fixed64,18,req,name=F_Double_required,json=FDoubleRequired" json:"F_Double_required,omitempty"`
	F_StringRequired   *string  `protobuf:"bytes,19,req,name=F_String_required,json=FStringRequired" json:"F_String_required,omitempty"`
	F_BytesRequired    []byte   `protobuf:"bytes,101,req,name=F_Bytes_required,json=FBytesRequired" json:"F_Bytes_required,omitempty"`
	F_Sint32Required   *int32   `protobuf:"zigzag32,102,req,name=F_Sint32_required,json=FSint32Required" json:"F_Sint32_required,omitempty"`
	F_Sint64Required   *int64   `protobuf:"zigzag64,103,req,name=F_Sint64_required,json=FSint64Required" json:"F_Sint64_required,omitempty"`
	F_Sfixed32Required *int32   `protobuf:"fixed32,104,req,name=F_Sfixed32_required,json=FSfixed32Required" json:"F_Sfixed32_required,omitempty"`
	F_Sfixed64Required *int64   `protobuf:"fixed64,105,req,name=F_Sfixed64_required,json=FSfixed64Required" json:"F_Sfixed64_required,omitempty"`
	// Repeated fields of all basic types
	F_BoolRepeated     []bool    `protobuf:"varint,20,rep,name=F_Bool_repeated,json=FBoolRepeated" json:"F_Bool_repeated,omitempty"`
	F_Int32Repeated    []int32   `protobuf:"varint,21,rep,name=F_Int32_repeated,json=FInt32Repeated" json:"F_Int32_repeated,omitempty"`
	F_Int64Repeated    []int64   `protobuf:"varint,22,rep,name=F_Int64_repeated,json=FInt64Repeated" json:"F_Int64_repeated,omitempty"`
	F_Fixed32Repeated  []uint32  `protobuf:"fixed32,23,rep,name=F_Fixed32_repeated,json=FFixed32Repeated" json:"F_Fixed32_repeated,omitempty"`
	F_Fixed64Repeated  []uint64  `protobuf:"fixed64,24,rep,name=F_Fixed64_repeated,json=FFixed64Repeated" json:"F_Fixed64_repeated,omitempty"`
	F_Uint32Repeated   []uint32  `protobuf:"varint,25,rep,name=F_Uint32_repeated,json=FUint32Repeated" json:"F_Uint32_repeated,omitempty"`
	F_Uint64Repeated   []uint64  `protobuf:"varint,26,rep,name=F_Uint64_repeated,json=FUint64Repeated" json:"F_Uint64_repeated,omitempty"`
	F_FloatRepeated    []float32 `protobuf:"fixed32,27,rep,name=F_Float_repeated,json=FFloatRepeated" json:"F_Float_repeated,omitempty"`
	F_DoubleRepeated   []float64 `protobuf:"fixed64,28,rep,name=F_Double_repeated,json=FDoubleRepeated" json:"F_Double_repeated,omitempty"`
	F_StringRepeated   []string  `protobuf:"bytes,29,rep,name=F_String_repeated,json=FStringRepeated" json:"F_String_repeated,omitempty"`
	F_BytesRepeated    [][]byte  `protobuf:"bytes,201,rep,name=F_Bytes_repeated,json=FBytesRepeated" json:"F_Bytes_repeated,omitempty"`
	F_Sint32Repeated   []int32   `protobuf:"zigzag32,202,rep,name=F_Sint32_repeated,json=FSint32Repeated" json:"F_Sint32_repeated,omitempty"`
	F_Sint64Repeated   []int64   `protobuf:"zigzag64,203,rep,name=F_Sint64_repeated,json=FSint64Repeated" json:"F_Sint64_repeated,omitempty"`
	F_Sfixed32Repeated []int32   `protobuf:"fixed32,204,rep,name=F_Sfixed32_repeated,json=FSfixed32Repeated" json:"F_Sfixed32_repeated,omitempty"`
	F_Sfixed64Repeated []int64   `protobuf:"fixed64,205,rep,name=F_Sfixed64_repeated,json=FSfixed64Repeated" json:"F_Sfixed64_repeated,omitempty"`
	// Optional fields of all basic types
	F_BoolOptional     *bool    `protobuf:"varint,30,opt,name=F_Bool_optional,json=FBoolOptional" json:"F_Bool_optional,omitempty"`
	F_Int32Optional    *int32   `protobuf:"varint,31,opt,name=F_Int32_optional,json=FInt32Optional" json:"F_Int32_optional,omitempty"`
	F_Int64Optional    *int64   `protobuf:"varint,32,opt,name=F_Int64_optional,json=FInt64Optional" json:"F_Int64_optional,omitempty"`
	F_Fixed32Optional  *uint32  `protobuf:"fixed32,33,opt,name=F_Fixed32_optional,json=FFixed32Optional" json:"F_Fixed32_optional,omitempty"`
	F_Fixed64Optional  *uint64  `protobuf:"fixed64,34,opt,name=F_Fixed64_optional,json=FFixed64Optional" json:"F_Fixed64_optional,omitempty"`
	F_Uint32Optional   *uint32  `protobuf:"varint,35,opt,name=F_Uint32_optional,json=FUint32Optional" json:"F_Uint32_optional,omitempty"`
	F_Uint64Optional   *uint64  `protobuf:"varint,36,opt,name=F_Uint64_optional,json=FUint64Optional" json:"F_Uint64_optional,omitempty"`
	F_FloatOptional    *float32 `protobuf:"fixed32,37,opt,name=F_Float_optional,json=FFloatOptional" json:"F_Float_optional,omitempty"`
	F_DoubleOptional   *float64 `protobuf:"fixed64,38,opt,name=F_Double_optional,json=FDoubleOptional" json:"F_Double_optional,omitempty"`
	F_StringOptional   *string  `protobuf:"bytes,39,opt,name=F_String_optional,json=FStringOptional" json:"F_String_optional,omitempty"`
	F_BytesOptional    []byte   `protobuf:"bytes,301,opt,name=F_Bytes_optional,json=FBytesOptional" json:"F_Bytes_optional,omitempty"`
	F_Sint32Optional   *int32   `protobuf:"zigzag32,302,opt,name=F_Sint32_optional,json=FSint32Optional" json:"F_Sint32_optional,omitempty"`
	F_Sint64Optional   *int64   `protobuf:"zigzag64,303,opt,name=F_Sint64_optional,json=FSint64Optional" json:"F_Sint64_optional,omitempty"`
	F_Sfixed32Optional *int32   `protobuf:"fixed32,304,opt,name=F_Sfixed32_optional,json=FSfixed32Optional" json:"F_Sfixed32_optional,omitempty"`
	F_Sfixed64Optional *int64   `protobuf:"fixed64,305,opt,name=F_Sfixed64_optional,json=FSfixed64Optional" json:"F_Sfixed64_optional,omitempty"`
	// Default-valued fields of all basic types
	F_BoolDefaulted     *bool    `protobuf:"varint,40,opt,name=F_Bool_defaulted,json=FBoolDefaulted,def=1" json:"F_Bool_defaulted,omitempty"`
	F_Int32Defaulted    *int32   `protobuf:"varint,41,opt,name=F_Int32_defaulted,json=FInt32Defaulted,def=32" json:"F_Int32_defaulted,omitempty"`
	F_Int64Defaulted    *int64   `protobuf:"varint,42,opt,name=F_Int64_defaulted,json=FInt64Defaulted,def=64" json:"F_Int64_defaulted,omitempty"`
	F_Fixed32Defaulted  *uint32  `protobuf:"fixed32,43,opt,name=F_Fixed32_defaulted,json=FFixed32Defaulted,def=320" json:"F_Fixed32_defaulted,omitempty"`
	F_Fixed64Defaulted  *uint64  `protobuf:"fixed64,44,opt,name=F_Fixed64_defaulted,json=FFixed64Defaulted,def=640" json:"F_Fixed64_defaulted,omitempty"`
	F_Uint32Defaulted   *uint32  `protobuf:"varint,45,opt,name=F_Uint32_defaulted,json=FUint32Defaulted,def=3200" json:"F_Uint32_defaulted,omitempty"`
	F_Uint64Defaulted   *uint64  `protobuf:"varint,46,opt,name=F_Uint64_defaulted,json=FUint64Defaulted,def=6400" json:"F_Uint64_defaulted,omitempty"`
	F_FloatDefaulted    *float32 `protobuf:"fixed32,47,opt,name=F_Float_defaulted,json=FFloatDefaulted,def=314159" json:"F_Float_defaulted,omitempty"`
	F_DoubleDefaulted   *float64 `protobuf:"fixed64,48,opt,name=F_Double_defaulted,json=FDoubleDefaulted,def=271828" json:"F_Double_defaulted,omitempty"`
	F_StringDefaulted   *string  `protobuf:"bytes,49,opt,name=F_String_defaulted,json=FStringDefaulted,def=hello, \"world!\"\n" json:"F_String_defaulted,omitempty"`
	F_BytesDefaulted    []byte   `protobuf:"bytes,401,opt,name=F_Bytes_defaulted,json=FBytesDefaulted,def=Bignose" json:"F_Bytes_defaulted,omitempty"`
	F_Sint32Defaulted   *int32   `protobuf:"zigzag32,402,opt,name=F_Sint32_defaulted,json=FSint32Defaulted,def=-32" json:"F_Sint32_defaulted,omitempty"`
	F_Sint64Defaulted   *int64   `protobuf:"zigzag64,403,opt,name=F_Sint64_defaulted,json=FSint64Defaulted,def=-64" json:"F_Sint64_defaulted,omitempty"`
	F_Sfixed32Defaulted *int32   `protobuf:"fixed32,404,opt,name=F_Sfixed32_defaulted,json=FSfixed32Defaulted,def=-32" json:"F_Sfixed32_defaulted,omitempty"`
	F_Sfixed64Defaulted *int64   `protobuf:"fixed64,405,opt,name=F_Sfixed64_defaulted,json=FSfixed64Defaulted,def=-64" json:"F_Sfixed64_defaulted,omitempty"`
	// Packed repeated fields (no string or bytes).
	F_BoolRepeatedPacked     []bool                  `protobuf:"varint,50,rep,packed,name=F_Bool_repeated_packed,json=FBoolRepeatedPacked" json:"F_Bool_repeated_packed,omitempty"`
	F_Int32RepeatedPacked    []int32                 `protobuf:"varint,51,rep,packed,name=F_Int32_repeated_packed,json=FInt32RepeatedPacked" json:"F_Int32_repeated_packed,omitempty"`
	F_Int64RepeatedPacked    []int64                 `protobuf:"varint,52,rep,packed,name=F_Int64_repeated_packed,json=FInt64RepeatedPacked" json:"F_Int64_repeated_packed,omitempty"`
	F_Fixed32RepeatedPacked  []uint32                `protobuf:"fixed32,53,rep,packed,name=F_Fixed32_repeated_packed,json=FFixed32RepeatedPacked" json:"F_Fixed32_repeated_packed,omitempty"`
	F_Fixed64RepeatedPacked  []uint64                `protobuf:"fixed64,54,rep,packed,name=F_Fixed64_repeated_packed,json=FFixed64RepeatedPacked" json:"F_Fixed64_repeated_packed,omitempty"`
	F_Uint32RepeatedPacked   []uint32                `protobuf:"varint,55,rep,packed,name=F_Uint32_repeated_packed,json=FUint32RepeatedPacked" json:"F_Uint32_repeated_packed,omitempty"`
	F_Uint64RepeatedPacked   []uint64                `protobuf:"varint,56,rep,packed,name=F_Uint64_repeated_packed,json=FUint64RepeatedPacked" json:"F_Uint64_repeated_packed,omitempty"`
	F_FloatRepeatedPacked    []float32               `protobuf:"fixed32,57,rep,packed,name=F_Float_repeated_packed,json=FFloatRepeatedPacked" json:"F_Float_repeated_packed,omitempty"`
	F_DoubleRepeatedPacked   []float64               `protobuf:"fixed64,58,rep,packed,name=F_Double_repeated_packed,json=FDoubleRepeatedPacked" json:"F_Double_repeated_packed,omitempty"`
	F_Sint32RepeatedPacked   []int32                 `protobuf:"zigzag32,502,rep,packed,name=F_Sint32_repeated_packed,json=FSint32RepeatedPacked" json:"F_Sint32_repeated_packed,omitempty"`
	F_Sint64RepeatedPacked   []int64                 `protobuf:"zigzag64,503,rep,packed,name=F_Sint64_repeated_packed,json=FSint64RepeatedPacked" json:"F_Sint64_repeated_packed,omitempty"`
	F_Sfixed32RepeatedPacked []int32                 `protobuf:"fixed32,504,rep,packed,name=F_Sfixed32_repeated_packed,json=FSfixed32RepeatedPacked" json:"F_Sfixed32_repeated_packed,omitempty"`
	F_Sfixed64RepeatedPacked []int64                 `protobuf:"fixed64,505,rep,packed,name=F_Sfixed64_repeated_packed,json=FSfixed64RepeatedPacked" json:"F_Sfixed64_repeated_packed,omitempty"`
	Requiredgroup            *GoTest_RequiredGroup   `protobuf:"group,70,req,name=RequiredGroup,json=requiredgroup" json:"requiredgroup,omitempty"`
	Repeatedgroup            []*GoTest_RepeatedGroup `protobuf:"group,80,rep,name=RepeatedGroup,json=repeatedgroup" json:"repeatedgroup,omitempty"`
	Optionalgroup            *GoTest_OptionalGroup   `protobuf:"group,90,opt,name=OptionalGroup,json=optionalgroup" json:"optionalgroup,omitempty"`
}

// Default values for GoTest fields.
const (
	Default_GoTest_F_BoolDefaulted     = bool(true)
	Default_GoTest_F_Int32Defaulted    = int32(32)
	Default_GoTest_F_Int64Defaulted    = int64(64)
	Default_GoTest_F_Fixed32Defaulted  = uint32(320)
	Default_GoTest_F_Fixed64Defaulted  = uint64(640)
	Default_GoTest_F_Uint32Defaulted   = uint32(3200)
	Default_GoTest_F_Uint64Defaulted   = uint64(6400)
	Default_GoTest_F_FloatDefaulted    = float32(314159)
	Default_GoTest_F_DoubleDefaulted   = float64(271828)
	Default_GoTest_F_StringDefaulted   = string("hello, \"world!\"\n")
	Default_GoTest_F_Sint32Defaulted   = int32(-32)
	Default_GoTest_F_Sint64Defaulted   = int64(-64)
	Default_GoTest_F_Sfixed32Defaulted = int32(-32)
	Default_GoTest_F_Sfixed64Defaulted = int64(-64)
)

// Default values for GoTest fields.
var (
	Default_GoTest_F_BytesDefaulted = []byte("Bignose")
)

func (x *GoTest) Reset() {
	*x = GoTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoTest) ProtoMessage() {}

func (x *GoTest) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoTest.ProtoReflect.Descriptor instead.
func (*GoTest) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{2}
}

func (x *GoTest) GetKind() GoTest_KIND {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return GoTest_VOID
}

func (x *GoTest) GetTable() string {
	if x != nil && x.Table != nil {
		return *x.Table
	}
	return ""
}

func (x *GoTest) GetParam() int32 {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return 0
}

func (x *GoTest) GetRequiredField() *GoTestField {
	if x != nil {
		return x.RequiredField
	}
	return nil
}

func (x *GoTest) GetRepeatedField() []*GoTestField {
	if x != nil {
		return x.RepeatedField
	}
	return nil
}

func (x *GoTest) GetOptionalField() *GoTestField {
	if x != nil {
		return x.OptionalField
	}
	return nil
}

func (x *GoTest) GetF_BoolRequired() bool {
	if x != nil && x.F_BoolRequired != nil {
		return *x.F_BoolRequired
	}
	return false
}

func (x *GoTest) GetF_Int32Required() int32 {
	if x != nil && x.F_Int32Required != nil {
		return *x.F_Int32Required
	}
	return 0
}

func (x *GoTest) GetF_Int64Required() int64 {
	if x != nil && x.F_Int64Required != nil {
		return *x.F_Int64Required
	}
	return 0
}

func (x *GoTest) GetF_Fixed32Required() uint32 {
	if x != nil && x.F_Fixed32Required != nil {
		return *x.F_Fixed32Required
	}
	return 0
}

func (x *GoTest) GetF_Fixed64Required() uint64 {
	if x != nil && x.F_Fixed64Required != nil {
		return *x.F_Fixed64Required
	}
	return 0
}

func (x *GoTest) GetF_Uint32Required() uint32 {
	if x != nil && x.F_Uint32Required != nil {
		return *x.F_Uint32Required
	}
	return 0
}

func (x *GoTest) GetF_Uint64Required() uint64 {
	if x != nil && x.F_Uint64Required != nil {
		return *x.F_Uint64Required
	}
	return 0
}

func (x *GoTest) GetF_FloatRequired() float32 {
	if x != nil && x.F_FloatRequired != nil {
		return *x.F_FloatRequired
	}
	return 0
}

func (x *GoTest) GetF_DoubleRequired() float64 {
	if x != nil && x.F_DoubleRequired != nil {
		return *x.F_DoubleRequired
	}
	return 0
}

func (x *GoTest) GetF_StringRequired() string {
	if x != nil && x.F_StringRequired != nil {
		return *x.F_StringRequired
	}
	return ""
}

func (x *GoTest) GetF_BytesRequired() []byte {
	if x != nil {
		return x.F_BytesRequired
	}
	return nil
}

func (x *GoTest) GetF_Sint32Required() int32 {
	if x != nil && x.F_Sint32Required != nil {
		return *x.F_Sint32Required
	}
	return 0
}

func (x *GoTest) GetF_Sint64Required() int64 {
	if x != nil && x.F_Sint64Required != nil {
		return *x.F_Sint64Required
	}
	return 0
}

func (x *GoTest) GetF_Sfixed32Required() int32 {
	if x != nil && x.F_Sfixed32Required != nil {
		return *x.F_Sfixed32Required
	}
	return 0
}

func (x *GoTest) GetF_Sfixed64Required() int64 {
	if x != nil && x.F_Sfixed64Required != nil {
		return *x.F_Sfixed64Required
	}
	return 0
}

func (x *GoTest) GetF_BoolRepeated() []bool {
	if x != nil {
		return x.F_BoolRepeated
	}
	return nil
}

func (x *GoTest) GetF_Int32Repeated() []int32 {
	if x != nil {
		return x.F_Int32Repeated
	}
	return nil
}

func (x *GoTest) GetF_Int64Repeated() []int64 {
	if x != nil {
		return x.F_Int64Repeated
	}
	return nil
}

func (x *GoTest) GetF_Fixed32Repeated() []uint32 {
	if x != nil {
		return x.F_Fixed32Repeated
	}
	return nil
}

func (x *GoTest) GetF_Fixed64Repeated() []uint64 {
	if x != nil {
		return x.F_Fixed64Repeated
	}
	return nil
}

func (x *GoTest) GetF_Uint32Repeated() []uint32 {
	if x != nil {
		return x.F_Uint32Repeated
	}
	return nil
}

func (x *GoTest) GetF_Uint64Repeated() []uint64 {
	if x != nil {
		return x.F_Uint64Repeated
	}
	return nil
}

func (x *GoTest) GetF_FloatRepeated() []float32 {
	if x != nil {
		return x.F_FloatRepeated
	}
	return nil
}

func (x *GoTest) GetF_DoubleRepeated() []float64 {
	if x != nil {
		return x.F_DoubleRepeated
	}
	return nil
}

func (x *GoTest) GetF_StringRepeated() []string {
	if x != nil {
		return x.F_StringRepeated
	}
	return nil
}

func (x *GoTest) GetF_BytesRepeated() [][]byte {
	if x != nil {
		return x.F_BytesRepeated
	}
	return nil
}

func (x *GoTest) GetF_Sint32Repeated() []int32 {
	if x != nil {
		return x.F_Sint32Repeated
	}
	return nil
}

func (x *GoTest) GetF_Sint64Repeated() []int64 {
	if x != nil {
		return x.F_Sint64Repeated
	}
	return nil
}

func (x *GoTest) GetF_Sfixed32Repeated() []int32 {
	if x != nil {
		return x.F_Sfixed32Repeated
	}
	return nil
}

func (x *GoTest) GetF_Sfixed64Repeated() []int64 {
	if x != nil {
		return x.F_Sfixed64Repeated
	}
	return nil
}

func (x *GoTest) GetF_BoolOptional() bool {
	if x != nil && x.F_BoolOptional != nil {
		return *x.F_BoolOptional
	}
	return false
}

func (x *GoTest) GetF_Int32Optional() int32 {
	if x != nil && x.F_Int32Optional != nil {
		return *x.F_Int32Optional
	}
	return 0
}

func (x *GoTest) GetF_Int64Optional() int64 {
	if x != nil && x.F_Int64Optional != nil {
		return *x.F_Int64Optional
	}
	return 0
}

func (x *GoTest) GetF_Fixed32Optional() uint32 {
	if x != nil && x.F_Fixed32Optional != nil {
		return *x.F_Fixed32Optional
	}
	return 0
}

func (x *GoTest) GetF_Fixed64Optional() uint64 {
	if x != nil && x.F_Fixed64Optional != nil {
		return *x.F_Fixed64Optional
	}
	return 0
}

func (x *GoTest) GetF_Uint32Optional() uint32 {
	if x != nil && x.F_Uint32Optional != nil {
		return *x.F_Uint32Optional
	}
	return 0
}

func (x *GoTest) GetF_Uint64Optional() uint64 {
	if x != nil && x.F_Uint64Optional != nil {
		return *x.F_Uint64Optional
	}
	return 0
}

func (x *GoTest) GetF_FloatOptional() float32 {
	if x != nil && x.F_FloatOptional != nil {
		return *x.F_FloatOptional
	}
	return 0
}

func (x *GoTest) GetF_DoubleOptional() float64 {
	if x != nil && x.F_DoubleOptional != nil {
		return *x.F_DoubleOptional
	}
	return 0
}

func (x *GoTest) GetF_StringOptional() string {
	if x != nil && x.F_StringOptional != nil {
		return *x.F_StringOptional
	}
	return ""
}

func (x *GoTest) GetF_BytesOptional() []byte {
	if x != nil {
		return x.F_BytesOptional
	}
	return nil
}

func (x *GoTest) GetF_Sint32Optional() int32 {
	if x != nil && x.F_Sint32Optional != nil {
		return *x.F_Sint32Optional
	}
	return 0
}

func (x *GoTest) GetF_Sint64Optional() int64 {
	if x != nil && x.F_Sint64Optional != nil {
		return *x.F_Sint64Optional
	}
	return 0
}

func (x *GoTest) GetF_Sfixed32Optional() int32 {
	if x != nil && x.F_Sfixed32Optional != nil {
		return *x.F_Sfixed32Optional
	}
	return 0
}

func (x *GoTest) GetF_Sfixed64Optional() int64 {
	if x != nil && x.F_Sfixed64Optional != nil {
		return *x.F_Sfixed64Optional
	}
	return 0
}

func (x *GoTest) GetF_BoolDefaulted() bool {
	if x != nil && x.F_BoolDefaulted != nil {
		return *x.F_BoolDefaulted
	}
	return Default_GoTest_F_BoolDefaulted
}

func (x *GoTest) GetF_Int32Defaulted() int32 {
	if x != nil && x.F_Int32Defaulted != nil {
		return *x.F_Int32Defaulted
	}
	return Default_GoTest_F_Int32Defaulted
}

func (x *GoTest) GetF_Int64Defaulted() int64 {
	if x != nil && x.F_Int64Defaulted != nil {
		return *x.F_Int64Defaulted
	}
	return Default_GoTest_F_Int64Defaulted
}

func (x *GoTest) GetF_Fixed32Defaulted() uint32 {
	if x != nil && x.F_Fixed32Defaulted != nil {
		return *x.F_Fixed32Defaulted
	}
	return Default_GoTest_F_Fixed32Defaulted
}

func (x *GoTest) GetF_Fixed64Defaulted() uint64 {
	if x != nil && x.F_Fixed64Defaulted != nil {
		return *x.F_Fixed64Defaulted
	}
	return Default_GoTest_F_Fixed64Defaulted
}

func (x *GoTest) GetF_Uint32Defaulted() uint32 {
	if x != nil && x.F_Uint32Defaulted != nil {
		return *x.F_Uint32Defaulted
	}
	return Default_GoTest_F_Uint32Defaulted
}

func (x *GoTest) GetF_Uint64Defaulted() uint64 {
	if x != nil && x.F_Uint64Defaulted != nil {
		return *x.F_Uint64Defaulted
	}
	return Default_GoTest_F_Uint64Defaulted
}

func (x *GoTest) GetF_FloatDefaulted() float32 {
	if x != nil && x.F_FloatDefaulted != nil {
		return *x.F_FloatDefaulted
	}
	return Default_GoTest_F_FloatDefaulted
}

func (x *GoTest) GetF_DoubleDefaulted() float64 {
	if x != nil && x.F_DoubleDefaulted != nil {
		return *x.F_DoubleDefaulted
	}
	return Default_GoTest_F_DoubleDefaulted
}

func (x *GoTest) GetF_StringDefaulted() string {
	if x != nil && x.F_StringDefaulted != nil {
		return *x.F_StringDefaulted
	}
	return Default_GoTest_F_StringDefaulted
}

func (x *GoTest) GetF_BytesDefaulted() []byte {
	if x != nil && x.F_BytesDefaulted != nil {
		return x.F_BytesDefaulted
	}
	return append([]byte(nil), Default_GoTest_F_BytesDefaulted...)
}

func (x *GoTest) GetF_Sint32Defaulted() int32 {
	if x != nil && x.F_Sint32Defaulted != nil {
		return *x.F_Sint32Defaulted
	}
	return Default_GoTest_F_Sint32Defaulted
}

func (x *GoTest) GetF_Sint64Defaulted() int64 {
	if x != nil && x.F_Sint64Defaulted != nil {
		return *x.F_Sint64Defaulted
	}
	return Default_GoTest_F_Sint64Defaulted
}

func (x *GoTest) GetF_Sfixed32Defaulted() int32 {
	if x != nil && x.F_Sfixed32Defaulted != nil {
		return *x.F_Sfixed32Defaulted
	}
	return Default_GoTest_F_Sfixed32Defaulted
}

func (x *GoTest) GetF_Sfixed64Defaulted() int64 {
	if x != nil && x.F_Sfixed64Defaulted != nil {
		return *x.F_Sfixed64Defaulted
	}
	return Default_GoTest_F_Sfixed64Defaulted
}

func (x *GoTest) GetF_BoolRepeatedPacked() []bool {
	if x != nil {
		return x.F_BoolRepeatedPacked
	}
	return nil
}

func (x *GoTest) GetF_Int32RepeatedPacked() []int32 {
	if x != nil {
		return x.F_Int32RepeatedPacked
	}
	return nil
}

func (x *GoTest) GetF_Int64RepeatedPacked() []int64 {
	if x != nil {
		return x.F_Int64RepeatedPacked
	}
	return nil
}

func (x *GoTest) GetF_Fixed32RepeatedPacked() []uint32 {
	if x != nil {
		return x.F_Fixed32RepeatedPacked
	}
	return nil
}

func (x *GoTest) GetF_Fixed64RepeatedPacked() []uint64 {
	if x != nil {
		return x.F_Fixed64RepeatedPacked
	}
	return nil
}

func (x *GoTest) GetF_Uint32RepeatedPacked() []uint32 {
	if x != nil {
		return x.F_Uint32RepeatedPacked
	}
	return nil
}

func (x *GoTest) GetF_Uint64RepeatedPacked() []uint64 {
	if x != nil {
		return x.F_Uint64RepeatedPacked
	}
	return nil
}

func (x *GoTest) GetF_FloatRepeatedPacked() []float32 {
	if x != nil {
		return x.F_FloatRepeatedPacked
	}
	return nil
}

func (x *GoTest) GetF_DoubleRepeatedPacked() []float64 {
	if x != nil {
		return x.F_DoubleRepeatedPacked
	}
	return nil
}

func (x *GoTest) GetF_Sint32RepeatedPacked() []int32 {
	if x != nil {
		return x.F_Sint32RepeatedPacked
	}
	return nil
}

func (x *GoTest) GetF_Sint64RepeatedPacked() []int64 {
	if x != nil {
		return x.F_Sint64RepeatedPacked
	}
	return nil
}

func (x *GoTest) GetF_Sfixed32RepeatedPacked() []int32 {
	if x != nil {
		return x.F_Sfixed32RepeatedPacked
	}
	return nil
}

func (x *GoTest) GetF_Sfixed64RepeatedPacked() []int64 {
	if x != nil {
		return x.F_Sfixed64RepeatedPacked
	}
	return nil
}

func (x *GoTest) GetRequiredgroup() *GoTest_RequiredGroup {
	if x != nil {
		return x.Requiredgroup
	}
	return nil
}

func (x *GoTest) GetRepeatedgroup() []*GoTest_RepeatedGroup {
	if x != nil {
		return x.Repeatedgroup
	}
	return nil
}

func (x *GoTest) GetOptionalgroup() *GoTest_OptionalGroup {
	if x != nil {
		return x.Optionalgroup
	}
	return nil
}

// For testing a group containing a required field.
type GoTestRequiredGroupField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group *GoTestRequiredGroupField_Group `protobuf:"group,1,req,name=Group,json=group" json:"group,omitempty"`
}

func (x *GoTestRequiredGroupField) Reset() {
	*x = GoTestRequiredGroupField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoTestRequiredGroupField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoTestRequiredGroupField) ProtoMessage() {}

func (x *GoTestRequiredGroupField) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoTestRequiredGroupField.ProtoReflect.Descriptor instead.
func (*GoTestRequiredGroupField) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{3}
}

func (x *GoTestRequiredGroupField) GetGroup() *GoTestRequiredGroupField_Group {
	if x != nil {
		return x.Group
	}
	return nil
}

// For testing skipping of unrecognized fields.
// Numbers are all big, larger than tag numbers in GoTestField,
// the message used in the corresponding test.
type GoSkipTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkipInt32   *int32                `protobuf:"varint,11,req,name=skip_int32,json=skipInt32" json:"skip_int32,omitempty"`
	SkipFixed32 *uint32               `protobuf:"fixed32,12,req,name=skip_fixed32,json=skipFixed32" json:"skip_fixed32,omitempty"`
	SkipFixed64 *uint64               `protobuf:"fixed64,13,req,name=skip_fixed64,json=skipFixed64" json:"skip_fixed64,omitempty"`
	SkipString  *string               `protobuf:"bytes,14,req,name=skip_string,json=skipString" json:"skip_string,omitempty"`
	Skipgroup   *GoSkipTest_SkipGroup `protobuf:"group,15,req,name=SkipGroup,json=skipgroup" json:"skipgroup,omitempty"`
}

func (x *GoSkipTest) Reset() {
	*x = GoSkipTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoSkipTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoSkipTest) ProtoMessage() {}

func (x *GoSkipTest) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoSkipTest.ProtoReflect.Descriptor instead.
func (*GoSkipTest) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{4}
}

func (x *GoSkipTest) GetSkipInt32() int32 {
	if x != nil && x.SkipInt32 != nil {
		return *x.SkipInt32
	}
	return 0
}

func (x *GoSkipTest) GetSkipFixed32() uint32 {
	if x != nil && x.SkipFixed32 != nil {
		return *x.SkipFixed32
	}
	return 0
}

func (x *GoSkipTest) GetSkipFixed64() uint64 {
	if x != nil && x.SkipFixed64 != nil {
		return *x.SkipFixed64
	}
	return 0
}

func (x *GoSkipTest) GetSkipString() string {
	if x != nil && x.SkipString != nil {
		return *x.SkipString
	}
	return ""
}

func (x *GoSkipTest) GetSkipgroup() *GoSkipTest_SkipGroup {
	if x != nil {
		return x.Skipgroup
	}
	return nil
}

// For testing packed/non-packed decoder switching.
// A serialized instance of one should be deserializable as the other.
type NonPackedTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A []int32 `protobuf:"varint,1,rep,name=a" json:"a,omitempty"`
}

func (x *NonPackedTest) Reset() {
	*x = NonPackedTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonPackedTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonPackedTest) ProtoMessage() {}

func (x *NonPackedTest) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonPackedTest.ProtoReflect.Descriptor instead.
func (*NonPackedTest) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{5}
}

func (x *NonPackedTest) GetA() []int32 {
	if x != nil {
		return x.A
	}
	return nil
}

type PackedTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	B []int32 `protobuf:"varint,1,rep,packed,name=b" json:"b,omitempty"`
}

func (x *PackedTest) Reset() {
	*x = PackedTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackedTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackedTest) ProtoMessage() {}

func (x *PackedTest) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackedTest.ProtoReflect.Descriptor instead.
func (*PackedTest) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{6}
}

func (x *PackedTest) GetB() []int32 {
	if x != nil {
		return x.B
	}
	return nil
}

type MaxTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum possible tag number.
	LastField *string `protobuf:"bytes,536870911,opt,name=last_field,json=lastField" json:"last_field,omitempty"`
}

func (x *MaxTag) Reset() {
	*x = MaxTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxTag) ProtoMessage() {}

func (x *MaxTag) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxTag.ProtoReflect.Descriptor instead.
func (*MaxTag) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{7}
}

func (x *MaxTag) GetLastField() string {
	if x != nil && x.LastField != nil {
		return *x.LastField
	}
	return ""
}

type OldMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nested *OldMessage_Nested `protobuf:"bytes,1,opt,name=nested" json:"nested,omitempty"`
	Num    *int32             `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
}

func (x *OldMessage) Reset() {
	*x = OldMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OldMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OldMessage) ProtoMessage() {}

func (x *OldMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OldMessage.ProtoReflect.Descriptor instead.
func (*OldMessage) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{8}
}

func (x *OldMessage) GetNested() *OldMessage_Nested {
	if x != nil {
		return x.Nested
	}
	return nil
}

func (x *OldMessage) GetNum() int32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

// NewMessage is wire compatible with OldMessage;
// imagine it as a future version.
type NewMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nested *NewMessage_Nested `protobuf:"bytes,1,opt,name=nested" json:"nested,omitempty"`
	// This is an int32 in OldMessage.
	Num *int64 `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
}

func (x *NewMessage) Reset() {
	*x = NewMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMessage) ProtoMessage() {}

func (x *NewMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMessage.ProtoReflect.Descriptor instead.
func (*NewMessage) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{9}
}

func (x *NewMessage) GetNested() *NewMessage_Nested {
	if x != nil {
		return x.Nested
	}
	return nil
}

func (x *NewMessage) GetNum() int64 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

type InnerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host      *string `protobuf:"bytes,1,req,name=host" json:"host,omitempty"`
	Port      *int32  `protobuf:"varint,2,opt,name=port,def=4000" json:"port,omitempty"`
	Connected *bool   `protobuf:"varint,3,opt,name=connected" json:"connected,omitempty"`
}

// Default values for InnerMessage fields.
const (
	Default_InnerMessage_Port = int32(4000)
)

func (x *InnerMessage) Reset() {
	*x = InnerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InnerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InnerMessage) ProtoMessage() {}

func (x *InnerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InnerMessage.ProtoReflect.Descriptor instead.
func (*InnerMessage) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{10}
}

func (x *InnerMessage) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *InnerMessage) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return Default_InnerMessage_Port
}

func (x *InnerMessage) GetConnected() bool {
	if x != nil && x.Connected != nil {
		return *x.Connected
	}
	return false
}

type OtherMessage struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Key    *int64        `protobuf:"varint,1,opt,name=key" json:"key,omitempty"`
	Value  []byte        `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Weight *float32      `protobuf:"fixed32,3,opt,name=weight" json:"weight,omitempty"`
	Inner  *InnerMessage `protobuf:"bytes,4,opt,name=inner" json:"inner,omitempty"`
}

func (x *OtherMessage) Reset() {
	*x = OtherMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtherMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherMessage) ProtoMessage() {}

func (x *OtherMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherMessage.ProtoReflect.Descriptor instead.
func (*OtherMessage) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{11}
}

var extRange_OtherMessage = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 536870911},
}

// Deprecated: Use OtherMessage.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*OtherMessage) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_OtherMessage
}

func (x *OtherMessage) GetKey() int64 {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return 0
}

func (x *OtherMessage) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *OtherMessage) GetWeight() float32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *OtherMessage) GetInner() *InnerMessage {
	if x != nil {
		return x.Inner
	}
	return nil
}

type RequiredInnerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeoFinallyWonAnOscar *InnerMessage `protobuf:"bytes,1,req,name=leo_finally_won_an_oscar,json=leoFinallyWonAnOscar" json:"leo_finally_won_an_oscar,omitempty"`
}

func (x *RequiredInnerMessage) Reset() {
	*x = RequiredInnerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequiredInnerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequiredInnerMessage) ProtoMessage() {}

func (x *RequiredInnerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequiredInnerMessage.ProtoReflect.Descriptor instead.
func (*RequiredInnerMessage) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{12}
}

func (x *RequiredInnerMessage) GetLeoFinallyWonAnOscar() *InnerMessage {
	if x != nil {
		return x.LeoFinallyWonAnOscar
	}
	return nil
}

type MyMessage struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Count          *int32                `protobuf:"varint,1,req,name=count" json:"count,omitempty"`
	Name           *string               `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Quote          *string               `protobuf:"bytes,3,opt,name=quote" json:"quote,omitempty"`
	Pet            []string              `protobuf:"bytes,4,rep,name=pet" json:"pet,omitempty"`
	Inner          *InnerMessage         `protobuf:"bytes,5,opt,name=inner" json:"inner,omitempty"`
	Others         []*OtherMessage       `protobuf:"bytes,6,rep,name=others" json:"others,omitempty"`
	WeMustGoDeeper *RequiredInnerMessage `protobuf:"bytes,13,opt,name=we_must_go_deeper,json=weMustGoDeeper" json:"we_must_go_deeper,omitempty"`
	RepInner       []*InnerMessage       `protobuf:"bytes,12,rep,name=rep_inner,json=repInner" json:"rep_inner,omitempty"`
	Bikeshed       *MyMessage_Color      `protobuf:"varint,7,opt,name=bikeshed,enum=proto2_test.MyMessage_Color" json:"bikeshed,omitempty"`
	Somegroup      *MyMessage_SomeGroup  `protobuf:"group,8,opt,name=SomeGroup,json=somegroup" json:"somegroup,omitempty"`
	// This field becomes [][]byte in the generated code.
	RepBytes [][]byte `protobuf:"bytes,10,rep,name=rep_bytes,json=repBytes" json:"rep_bytes,omitempty"`
	Bigfloat *float64 `protobuf:"fixed64,11,opt,name=bigfloat" json:"bigfloat,omitempty"`
}

func (x *MyMessage) Reset() {
	*x = MyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyMessage) ProtoMessage() {}

func (x *MyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyMessage.ProtoReflect.Descriptor instead.
func (*MyMessage) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{13}
}

var extRange_MyMessage = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 536870911},
}

// Deprecated: Use MyMessage.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*MyMessage) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_MyMessage
}

func (x *MyMessage) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *MyMessage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MyMessage) GetQuote() string {
	if x != nil && x.Quote != nil {
		return *x.Quote
	}
	return ""
}

func (x *MyMessage) GetPet() []string {
	if x != nil {
		return x.Pet
	}
	return nil
}

func (x *MyMessage) GetInner() *InnerMessage {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *MyMessage) GetOthers() []*OtherMessage {
	if x != nil {
		return x.Others
	}
	return nil
}

func (x *MyMessage) GetWeMustGoDeeper() *RequiredInnerMessage {
	if x != nil {
		return x.WeMustGoDeeper
	}
	return nil
}

func (x *MyMessage) GetRepInner() []*InnerMessage {
	if x != nil {
		return x.RepInner
	}
	return nil
}

func (x *MyMessage) GetBikeshed() MyMessage_Color {
	if x != nil && x.Bikeshed != nil {
		return *x.Bikeshed
	}
	return MyMessage_RED
}

func (x *MyMessage) GetSomegroup() *MyMessage_SomeGroup {
	if x != nil {
		return x.Somegroup
	}
	return nil
}

func (x *MyMessage) GetRepBytes() [][]byte {
	if x != nil {
		return x.RepBytes
	}
	return nil
}

func (x *MyMessage) GetBigfloat() float64 {
	if x != nil && x.Bigfloat != nil {
		return *x.Bigfloat
	}
	return 0
}

type Ext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     *string         `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	MapField map[int32]int32 `protobuf:"bytes,2,rep,name=map_field,json=mapField" json:"map_field,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (x *Ext) Reset() {
	*x = Ext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext) ProtoMessage() {}

func (x *Ext) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext.ProtoReflect.Descriptor instead.
func (*Ext) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{14}
}

func (x *Ext) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

func (x *Ext) GetMapField() map[int32]int32 {
	if x != nil {
		return x.MapField
	}
	return nil
}

type ComplexExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First  *int32  `protobuf:"varint,1,opt,name=first" json:"first,omitempty"`
	Second *int32  `protobuf:"varint,2,opt,name=second" json:"second,omitempty"`
	Third  []int32 `protobuf:"varint,3,rep,name=third" json:"third,omitempty"`
}

func (x *ComplexExtension) Reset() {
	*x = ComplexExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplexExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplexExtension) ProtoMessage() {}

func (x *ComplexExtension) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplexExtension.ProtoReflect.Descriptor instead.
func (*ComplexExtension) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{15}
}

func (x *ComplexExtension) GetFirst() int32 {
	if x != nil && x.First != nil {
		return *x.First
	}
	return 0
}

func (x *ComplexExtension) GetSecond() int32 {
	if x != nil && x.Second != nil {
		return *x.Second
	}
	return 0
}

func (x *ComplexExtension) GetThird() []int32 {
	if x != nil {
		return x.Third
	}
	return nil
}

type DefaultsMessage struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields
}

func (x *DefaultsMessage) Reset() {
	*x = DefaultsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultsMessage) ProtoMessage() {}

func (x *DefaultsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultsMessage.ProtoReflect.Descriptor instead.
func (*DefaultsMessage) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{16}
}

var extRange_DefaultsMessage = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 536870911},
}

// Deprecated: Use DefaultsMessage.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*DefaultsMessage) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_DefaultsMessage
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{17}
}

type MessageList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message []*MessageList_Message `protobuf:"group,1,rep,name=Message,json=message" json:"message,omitempty"`
}

func (x *MessageList) Reset() {
	*x = MessageList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageList) ProtoMessage() {}

func (x *MessageList) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageList.ProtoReflect.Descriptor instead.
func (*MessageList) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{18}
}

func (x *MessageList) GetMessage() []*MessageList_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type Strings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringField *string `protobuf:"bytes,1,opt,name=string_field,json=stringField" json:"string_field,omitempty"`
	BytesField  []byte  `protobuf:"bytes,2,opt,name=bytes_field,json=bytesField" json:"bytes_field,omitempty"`
}

func (x *Strings) Reset() {
	*x = Strings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Strings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Strings) ProtoMessage() {}

func (x *Strings) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Strings.ProtoReflect.Descriptor instead.
func (*Strings) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{19}
}

func (x *Strings) GetStringField() string {
	if x != nil && x.StringField != nil {
		return *x.StringField
	}
	return ""
}

func (x *Strings) GetBytesField() []byte {
	if x != nil {
		return x.BytesField
	}
	return nil
}

type Defaults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Default-valued fields of all basic types.
	// Same as GoTest, but copied here to make testing easier.
	F_Bool    *bool           `protobuf:"varint,1,opt,name=F_Bool,json=FBool,def=1" json:"F_Bool,omitempty"`
	F_Int32   *int32          `protobuf:"varint,2,opt,name=F_Int32,json=FInt32,def=32" json:"F_Int32,omitempty"`
	F_Int64   *int64          `protobuf:"varint,3,opt,name=F_Int64,json=FInt64,def=64" json:"F_Int64,omitempty"`
	F_Fixed32 *uint32         `protobuf:"fixed32,4,opt,name=F_Fixed32,json=FFixed32,def=320" json:"F_Fixed32,omitempty"`
	F_Fixed64 *uint64         `protobuf:"fixed64,5,opt,name=F_Fixed64,json=FFixed64,def=640" json:"F_Fixed64,omitempty"`
	F_Uint32  *uint32         `protobuf:"varint,6,opt,name=F_Uint32,json=FUint32,def=3200" json:"F_Uint32,omitempty"`
	F_Uint64  *uint64         `protobuf:"varint,7,opt,name=F_Uint64,json=FUint64,def=6400" json:"F_Uint64,omitempty"`
	F_Float   *float32        `protobuf:"fixed32,8,opt,name=F_Float,json=FFloat,def=314159" json:"F_Float,omitempty"`
	F_Double  *float64        `protobuf:"fixed64,9,opt,name=F_Double,json=FDouble,def=271828" json:"F_Double,omitempty"`
	F_String  *string         `protobuf:"bytes,10,opt,name=F_String,json=FString,def=hello, \"world!\"\n" json:"F_String,omitempty"`
	F_Bytes   []byte          `protobuf:"bytes,11,opt,name=F_Bytes,json=FBytes,def=Bignose" json:"F_Bytes,omitempty"`
	F_Sint32  *int32          `protobuf:"zigzag32,12,opt,name=F_Sint32,json=FSint32,def=-32" json:"F_Sint32,omitempty"`
	F_Sint64  *int64          `protobuf:"zigzag64,13,opt,name=F_Sint64,json=FSint64,def=-64" json:"F_Sint64,omitempty"`
	F_Enum    *Defaults_Color `protobuf:"varint,14,opt,name=F_Enum,json=FEnum,enum=proto2_test.Defaults_Color,def=1" json:"F_Enum,omitempty"`
	// More fields with crazy defaults.
	F_Pinf *float32 `protobuf:"fixed32,15,opt,name=F_Pinf,json=FPinf,def=inf" json:"F_Pinf,omitempty"`
	F_Ninf *float32 `protobuf:"fixed32,16,opt,name=F_Ninf,json=FNinf,def=-inf" json:"F_Ninf,omitempty"`
	F_Nan  *float32 `protobuf:"fixed32,17,opt,name=F_Nan,json=FNan,def=nan" json:"F_Nan,omitempty"`
	// Sub-message.
	Sub *SubDefaults `protobuf:"bytes,18,opt,name=sub" json:"sub,omitempty"`
	// Redundant but explicit defaults.
	StrZero *string `protobuf:"bytes,19,opt,name=str_zero,json=strZero,def=" json:"str_zero,omitempty"`
}

// Default values for Defaults fields.
const (
	Default_Defaults_F_Bool    = bool(true)
	Default_Defaults_F_Int32   = int32(32)
	Default_Defaults_F_Int64   = int64(64)
	Default_Defaults_F_Fixed32 = uint32(320)
	Default_Defaults_F_Fixed64 = uint64(640)
	Default_Defaults_F_Uint32  = uint32(3200)
	Default_Defaults_F_Uint64  = uint64(6400)
	Default_Defaults_F_Float   = float32(314159)
	Default_Defaults_F_Double  = float64(271828)
	Default_Defaults_F_String  = string("hello, \"world!\"\n")
	Default_Defaults_F_Sint32  = int32(-32)
	Default_Defaults_F_Sint64  = int64(-64)
	Default_Defaults_F_Enum    = Defaults_GREEN
	Default_Defaults_StrZero   = string("")
)

// Default values for Defaults fields.
var (
	Default_Defaults_F_Bytes = []byte("Bignose")
	Default_Defaults_F_Pinf  = float32(math.Inf(+1))
	Default_Defaults_F_Ninf  = float32(math.Inf(-1))
	Default_Defaults_F_Nan   = float32(math.NaN())
)

func (x *Defaults) Reset() {
	*x = Defaults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Defaults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Defaults) ProtoMessage() {}

func (x *Defaults) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Defaults.ProtoReflect.Descriptor instead.
func (*Defaults) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{20}
}

func (x *Defaults) GetF_Bool() bool {
	if x != nil && x.F_Bool != nil {
		return *x.F_Bool
	}
	return Default_Defaults_F_Bool
}

func (x *Defaults) GetF_Int32() int32 {
	if x != nil && x.F_Int32 != nil {
		return *x.F_Int32
	}
	return Default_Defaults_F_Int32
}

func (x *Defaults) GetF_Int64() int64 {
	if x != nil && x.F_Int64 != nil {
		return *x.F_Int64
	}
	return Default_Defaults_F_Int64
}

func (x *Defaults) GetF_Fixed32() uint32 {
	if x != nil && x.F_Fixed32 != nil {
		return *x.F_Fixed32
	}
	return Default_Defaults_F_Fixed32
}

func (x *Defaults) GetF_Fixed64() uint64 {
	if x != nil && x.F_Fixed64 != nil {
		return *x.F_Fixed64
	}
	return Default_Defaults_F_Fixed64
}

func (x *Defaults) GetF_Uint32() uint32 {
	if x != nil && x.F_Uint32 != nil {
		return *x.F_Uint32
	}
	return Default_Defaults_F_Uint32
}

func (x *Defaults) GetF_Uint64() uint64 {
	if x != nil && x.F_Uint64 != nil {
		return *x.F_Uint64
	}
	return Default_Defaults_F_Uint64
}

func (x *Defaults) GetF_Float() float32 {
	if x != nil && x.F_Float != nil {
		return *x.F_Float
	}
	return Default_Defaults_F_Float
}

func (x *Defaults) GetF_Double() float64 {
	if x != nil && x.F_Double != nil {
		return *x.F_Double
	}
	return Default_Defaults_F_Double
}

func (x *Defaults) GetF_String() string {
	if x != nil && x.F_String != nil {
		return *x.F_String
	}
	return Default_Defaults_F_String
}

func (x *Defaults) GetF_Bytes() []byte {
	if x != nil && x.F_Bytes != nil {
		return x.F_Bytes
	}
	return append([]byte(nil), Default_Defaults_F_Bytes...)
}

func (x *Defaults) GetF_Sint32() int32 {
	if x != nil && x.F_Sint32 != nil {
		return *x.F_Sint32
	}
	return Default_Defaults_F_Sint32
}

func (x *Defaults) GetF_Sint64() int64 {
	if x != nil && x.F_Sint64 != nil {
		return *x.F_Sint64
	}
	return Default_Defaults_F_Sint64
}

func (x *Defaults) GetF_Enum() Defaults_Color {
	if x != nil && x.F_Enum != nil {
		return *x.F_Enum
	}
	return Default_Defaults_F_Enum
}

func (x *Defaults) GetF_Pinf() float32 {
	if x != nil && x.F_Pinf != nil {
		return *x.F_Pinf
	}
	return Default_Defaults_F_Pinf
}

func (x *Defaults) GetF_Ninf() float32 {
	if x != nil && x.F_Ninf != nil {
		return *x.F_Ninf
	}
	return Default_Defaults_F_Ninf
}

func (x *Defaults) GetF_Nan() float32 {
	if x != nil && x.F_Nan != nil {
		return *x.F_Nan
	}
	return Default_Defaults_F_Nan
}

func (x *Defaults) GetSub() *SubDefaults {
	if x != nil {
		return x.Sub
	}
	return nil
}

func (x *Defaults) GetStrZero() string {
	if x != nil && x.StrZero != nil {
		return *x.StrZero
	}
	return Default_Defaults_StrZero
}

type SubDefaults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	N *int64 `protobuf:"varint,1,opt,name=n,def=7" json:"n,omitempty"`
}

// Default values for SubDefaults fields.
const (
	Default_SubDefaults_N = int64(7)
)

func (x *SubDefaults) Reset() {
	*x = SubDefaults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubDefaults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubDefaults) ProtoMessage() {}

func (x *SubDefaults) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubDefaults.ProtoReflect.Descriptor instead.
func (*SubDefaults) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{21}
}

func (x *SubDefaults) GetN() int64 {
	if x != nil && x.N != nil {
		return *x.N
	}
	return Default_SubDefaults_N
}

type RepeatedEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color []RepeatedEnum_Color `protobuf:"varint,1,rep,name=color,enum=proto2_test.RepeatedEnum_Color" json:"color,omitempty"`
}

func (x *RepeatedEnum) Reset() {
	*x = RepeatedEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedEnum) ProtoMessage() {}

func (x *RepeatedEnum) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedEnum.ProtoReflect.Descriptor instead.
func (*RepeatedEnum) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{22}
}

func (x *RepeatedEnum) GetColor() []RepeatedEnum_Color {
	if x != nil {
		return x.Color
	}
	return nil
}

type MoreRepeated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bools        []bool   `protobuf:"varint,1,rep,name=bools" json:"bools,omitempty"`
	BoolsPacked  []bool   `protobuf:"varint,2,rep,packed,name=bools_packed,json=boolsPacked" json:"bools_packed,omitempty"`
	Ints         []int32  `protobuf:"varint,3,rep,name=ints" json:"ints,omitempty"`
	IntsPacked   []int32  `protobuf:"varint,4,rep,packed,name=ints_packed,json=intsPacked" json:"ints_packed,omitempty"`
	Int64SPacked []int64  `protobuf:"varint,7,rep,packed,name=int64s_packed,json=int64sPacked" json:"int64s_packed,omitempty"`
	Strings      []string `protobuf:"bytes,5,rep,name=strings" json:"strings,omitempty"`
	Fixeds       []uint32 `protobuf:"fixed32,6,rep,name=fixeds" json:"fixeds,omitempty"`
}

func (x *MoreRepeated) Reset() {
	*x = MoreRepeated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoreRepeated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoreRepeated) ProtoMessage() {}

func (x *MoreRepeated) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoreRepeated.ProtoReflect.Descriptor instead.
func (*MoreRepeated) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{23}
}

func (x *MoreRepeated) GetBools() []bool {
	if x != nil {
		return x.Bools
	}
	return nil
}

func (x *MoreRepeated) GetBoolsPacked() []bool {
	if x != nil {
		return x.BoolsPacked
	}
	return nil
}

func (x *MoreRepeated) GetInts() []int32 {
	if x != nil {
		return x.Ints
	}
	return nil
}

func (x *MoreRepeated) GetIntsPacked() []int32 {
	if x != nil {
		return x.IntsPacked
	}
	return nil
}

func (x *MoreRepeated) GetInt64SPacked() []int64 {
	if x != nil {
		return x.Int64SPacked
	}
	return nil
}

func (x *MoreRepeated) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

func (x *MoreRepeated) GetFixeds() []uint32 {
	if x != nil {
		return x.Fixeds
	}
	return nil
}

type GroupOld struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	G *GroupOld_G `protobuf:"group,101,opt,name=G,json=g" json:"g,omitempty"`
}

func (x *GroupOld) Reset() {
	*x = GroupOld{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupOld) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupOld) ProtoMessage() {}

func (x *GroupOld) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupOld.ProtoReflect.Descriptor instead.
func (*GroupOld) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{24}
}

func (x *GroupOld) GetG() *GroupOld_G {
	if x != nil {
		return x.G
	}
	return nil
}

type GroupNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	G *GroupNew_G `protobuf:"group,101,opt,name=G,json=g" json:"g,omitempty"`
}

func (x *GroupNew) Reset() {
	*x = GroupNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupNew) ProtoMessage() {}

func (x *GroupNew) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupNew.ProtoReflect.Descriptor instead.
func (*GroupNew) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{25}
}

func (x *GroupNew) GetG() *GroupNew_G {
	if x != nil {
		return x.G
	}
	return nil
}

type FloatingPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	F     *float64 `protobuf:"fixed64,1,req,name=f" json:"f,omitempty"`
	Exact *bool    `protobuf:"varint,2,opt,name=exact" json:"exact,omitempty"`
}

func (x *FloatingPoint) Reset() {
	*x = FloatingPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingPoint) ProtoMessage() {}

func (x *FloatingPoint) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingPoint.ProtoReflect.Descriptor instead.
func (*FloatingPoint) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{26}
}

func (x *FloatingPoint) GetF() float64 {
	if x != nil && x.F != nil {
		return *x.F
	}
	return 0
}

func (x *FloatingPoint) GetExact() bool {
	if x != nil && x.Exact != nil {
		return *x.Exact
	}
	return false
}

type MessageWithMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameMapping map[int32]string         `protobuf:"bytes,1,rep,name=name_mapping,json=nameMapping" json:"name_mapping,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MsgMapping  map[int64]*FloatingPoint `protobuf:"bytes,2,rep,name=msg_mapping,json=msgMapping" json:"msg_mapping,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ByteMapping map[bool][]byte          `protobuf:"bytes,3,rep,name=byte_mapping,json=byteMapping" json:"byte_mapping,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StrToStr    map[string]string        `protobuf:"bytes,4,rep,name=str_to_str,json=strToStr" json:"str_to_str,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *MessageWithMap) Reset() {
	*x = MessageWithMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageWithMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageWithMap) ProtoMessage() {}

func (x *MessageWithMap) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageWithMap.ProtoReflect.Descriptor instead.
func (*MessageWithMap) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{27}
}

func (x *MessageWithMap) GetNameMapping() map[int32]string {
	if x != nil {
		return x.NameMapping
	}
	return nil
}

func (x *MessageWithMap) GetMsgMapping() map[int64]*FloatingPoint {
	if x != nil {
		return x.MsgMapping
	}
	return nil
}

func (x *MessageWithMap) GetByteMapping() map[bool][]byte {
	if x != nil {
		return x.ByteMapping
	}
	return nil
}

func (x *MessageWithMap) GetStrToStr() map[string]string {
	if x != nil {
		return x.StrToStr
	}
	return nil
}

type Oneof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Union:
	//	*Oneof_F_Bool
	//	*Oneof_F_Int32
	//	*Oneof_F_Int64
	//	*Oneof_F_Fixed32
	//	*Oneof_F_Fixed64
	//	*Oneof_F_Uint32
	//	*Oneof_F_Uint64
	//	*Oneof_F_Float
	//	*Oneof_F_Double
	//	*Oneof_F_String
	//	*Oneof_F_Bytes
	//	*Oneof_F_Sint32
	//	*Oneof_F_Sint64
	//	*Oneof_F_Enum
	//	*Oneof_F_Message
	//	*Oneof_FGroup
	//	*Oneof_F_Largest_Tag
	Union isOneof_Union `protobuf_oneof:"union"`
	// Types that are assignable to Tormato:
	//	*Oneof_Value
	Tormato isOneof_Tormato `protobuf_oneof:"tormato"`
}

func (x *Oneof) Reset() {
	*x = Oneof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Oneof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oneof) ProtoMessage() {}

func (x *Oneof) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oneof.ProtoReflect.Descriptor instead.
func (*Oneof) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{28}
}

func (m *Oneof) GetUnion() isOneof_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (x *Oneof) GetF_Bool() bool {
	if x, ok := x.GetUnion().(*Oneof_F_Bool); ok {
		return x.F_Bool
	}
	return false
}

func (x *Oneof) GetF_Int32() int32 {
	if x, ok := x.GetUnion().(*Oneof_F_Int32); ok {
		return x.F_Int32
	}
	return 0
}

func (x *Oneof) GetF_Int64() int64 {
	if x, ok := x.GetUnion().(*Oneof_F_Int64); ok {
		return x.F_Int64
	}
	return 0
}

func (x *Oneof) GetF_Fixed32() uint32 {
	if x, ok := x.GetUnion().(*Oneof_F_Fixed32); ok {
		return x.F_Fixed32
	}
	return 0
}

func (x *Oneof) GetF_Fixed64() uint64 {
	if x, ok := x.GetUnion().(*Oneof_F_Fixed64); ok {
		return x.F_Fixed64
	}
	return 0
}

func (x *Oneof) GetF_Uint32() uint32 {
	if x, ok := x.GetUnion().(*Oneof_F_Uint32); ok {
		return x.F_Uint32
	}
	return 0
}

func (x *Oneof) GetF_Uint64() uint64 {
	if x, ok := x.GetUnion().(*Oneof_F_Uint64); ok {
		return x.F_Uint64
	}
	return 0
}

func (x *Oneof) GetF_Float() float32 {
	if x, ok := x.GetUnion().(*Oneof_F_Float); ok {
		return x.F_Float
	}
	return 0
}

func (x *Oneof) GetF_Double() float64 {
	if x, ok := x.GetUnion().(*Oneof_F_Double); ok {
		return x.F_Double
	}
	return 0
}

func (x *Oneof) GetF_String() string {
	if x, ok := x.GetUnion().(*Oneof_F_String); ok {
		return x.F_String
	}
	return ""
}

func (x *Oneof) GetF_Bytes() []byte {
	if x, ok := x.GetUnion().(*Oneof_F_Bytes); ok {
		return x.F_Bytes
	}
	return nil
}

func (x *Oneof) GetF_Sint32() int32 {
	if x, ok := x.GetUnion().(*Oneof_F_Sint32); ok {
		return x.F_Sint32
	}
	return 0
}

func (x *Oneof) GetF_Sint64() int64 {
	if x, ok := x.GetUnion().(*Oneof_F_Sint64); ok {
		return x.F_Sint64
	}
	return 0
}

func (x *Oneof) GetF_Enum() MyMessage_Color {
	if x, ok := x.GetUnion().(*Oneof_F_Enum); ok {
		return x.F_Enum
	}
	return MyMessage_RED
}

func (x *Oneof) GetF_Message() *GoTestField {
	if x, ok := x.GetUnion().(*Oneof_F_Message); ok {
		return x.F_Message
	}
	return nil
}

func (x *Oneof) GetFGroup() *Oneof_F_Group {
	if x, ok := x.GetUnion().(*Oneof_FGroup); ok {
		return x.FGroup
	}
	return nil
}

func (x *Oneof) GetF_Largest_Tag() int32 {
	if x, ok := x.GetUnion().(*Oneof_F_Largest_Tag); ok {
		return x.F_Largest_Tag
	}
	return 0
}

func (m *Oneof) GetTormato() isOneof_Tormato {
	if m != nil {
		return m.Tormato
	}
	return nil
}

func (x *Oneof) GetValue() int32 {
	if x, ok := x.GetTormato().(*Oneof_Value); ok {
		return x.Value
	}
	return 0
}

type isOneof_Union interface {
	isOneof_Union()
}

type Oneof_F_Bool struct {
	F_Bool bool `protobuf:"varint,1,opt,name=F_Bool,json=FBool,oneof"`
}

type Oneof_F_Int32 struct {
	F_Int32 int32 `protobuf:"varint,2,opt,name=F_Int32,json=FInt32,oneof"`
}

type Oneof_F_Int64 struct {
	F_Int64 int64 `protobuf:"varint,3,opt,name=F_Int64,json=FInt64,oneof"`
}

type Oneof_F_Fixed32 struct {
	F_Fixed32 uint32 `protobuf:"fixed32,4,opt,name=F_Fixed32,json=FFixed32,oneof"`
}

type Oneof_F_Fixed64 struct {
	F_Fixed64 uint64 `protobuf:"fixed64,5,opt,name=F_Fixed64,json=FFixed64,oneof"`
}

type Oneof_F_Uint32 struct {
	F_Uint32 uint32 `protobuf:"varint,6,opt,name=F_Uint32,json=FUint32,oneof"`
}

type Oneof_F_Uint64 struct {
	F_Uint64 uint64 `protobuf:"varint,7,opt,name=F_Uint64,json=FUint64,oneof"`
}

type Oneof_F_Float struct {
	F_Float float32 `protobuf:"fixed32,8,opt,name=F_Float,json=FFloat,oneof"`
}

type Oneof_F_Double struct {
	F_Double float64 `protobuf:"fixed64,9,opt,name=F_Double,json=FDouble,oneof"`
}

type Oneof_F_String struct {
	F_String string `protobuf:"bytes,10,opt,name=F_String,json=FString,oneof"`
}

type Oneof_F_Bytes struct {
	F_Bytes []byte `protobuf:"bytes,11,opt,name=F_Bytes,json=FBytes,oneof"`
}

type Oneof_F_Sint32 struct {
	F_Sint32 int32 `protobuf:"zigzag32,12,opt,name=F_Sint32,json=FSint32,oneof"`
}

type Oneof_F_Sint64 struct {
	F_Sint64 int64 `protobuf:"zigzag64,13,opt,name=F_Sint64,json=FSint64,oneof"`
}

type Oneof_F_Enum struct {
	F_Enum MyMessage_Color `protobuf:"varint,14,opt,name=F_Enum,json=FEnum,enum=proto2_test.MyMessage_Color,oneof"`
}

type Oneof_F_Message struct {
	F_Message *GoTestField `protobuf:"bytes,15,opt,name=F_Message,json=FMessage,oneof"`
}

type Oneof_FGroup struct {
	FGroup *Oneof_F_Group `protobuf:"group,16,opt,name=F_Group,json=fGroup,oneof"`
}

type Oneof_F_Largest_Tag struct {
	F_Largest_Tag int32 `protobuf:"varint,536870911,opt,name=F_Largest_Tag,json=FLargestTag,oneof"`
}

func (*Oneof_F_Bool) isOneof_Union() {}

func (*Oneof_F_Int32) isOneof_Union() {}

func (*Oneof_F_Int64) isOneof_Union() {}

func (*Oneof_F_Fixed32) isOneof_Union() {}

func (*Oneof_F_Fixed64) isOneof_Union() {}

func (*Oneof_F_Uint32) isOneof_Union() {}

func (*Oneof_F_Uint64) isOneof_Union() {}

func (*Oneof_F_Float) isOneof_Union() {}

func (*Oneof_F_Double) isOneof_Union() {}

func (*Oneof_F_String) isOneof_Union() {}

func (*Oneof_F_Bytes) isOneof_Union() {}

func (*Oneof_F_Sint32) isOneof_Union() {}

func (*Oneof_F_Sint64) isOneof_Union() {}

func (*Oneof_F_Enum) isOneof_Union() {}

func (*Oneof_F_Message) isOneof_Union() {}

func (*Oneof_FGroup) isOneof_Union() {}

func (*Oneof_F_Largest_Tag) isOneof_Union() {}

type isOneof_Tormato interface {
	isOneof_Tormato()
}

type Oneof_Value struct {
	Value int32 `protobuf:"varint,100,opt,name=value,oneof"`
}

func (*Oneof_Value) isOneof_Tormato() {}

type Communique struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MakeMeCry *bool `protobuf:"varint,1,opt,name=make_me_cry,json=makeMeCry" json:"make_me_cry,omitempty"`
	// This is a oneof, called "union".
	//
	// Types that are assignable to Union:
	//	*Communique_Number
	//	*Communique_Name
	//	*Communique_Data
	//	*Communique_TempC
	//	*Communique_Col
	//	*Communique_Msg
	Union isCommunique_Union `protobuf_oneof:"union"`
}

func (x *Communique) Reset() {
	*x = Communique{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Communique) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Communique) ProtoMessage() {}

func (x *Communique) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Communique.ProtoReflect.Descriptor instead.
func (*Communique) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{29}
}

func (x *Communique) GetMakeMeCry() bool {
	if x != nil && x.MakeMeCry != nil {
		return *x.MakeMeCry
	}
	return false
}

func (m *Communique) GetUnion() isCommunique_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (x *Communique) GetNumber() int32 {
	if x, ok := x.GetUnion().(*Communique_Number); ok {
		return x.Number
	}
	return 0
}

func (x *Communique) GetName() string {
	if x, ok := x.GetUnion().(*Communique_Name); ok {
		return x.Name
	}
	return ""
}

func (x *Communique) GetData() []byte {
	if x, ok := x.GetUnion().(*Communique_Data); ok {
		return x.Data
	}
	return nil
}

func (x *Communique) GetTempC() float64 {
	if x, ok := x.GetUnion().(*Communique_TempC); ok {
		return x.TempC
	}
	return 0
}

func (x *Communique) GetCol() MyMessage_Color {
	if x, ok := x.GetUnion().(*Communique_Col); ok {
		return x.Col
	}
	return MyMessage_RED
}

func (x *Communique) GetMsg() *Strings {
	if x, ok := x.GetUnion().(*Communique_Msg); ok {
		return x.Msg
	}
	return nil
}

type isCommunique_Union interface {
	isCommunique_Union()
}

type Communique_Number struct {
	Number int32 `protobuf:"varint,5,opt,name=number,oneof"`
}

type Communique_Name struct {
	Name string `protobuf:"bytes,6,opt,name=name,oneof"`
}

type Communique_Data struct {
	Data []byte `protobuf:"bytes,7,opt,name=data,oneof"`
}

type Communique_TempC struct {
	TempC float64 `protobuf:"fixed64,8,opt,name=temp_c,json=tempC,oneof"`
}

type Communique_Col struct {
	Col MyMessage_Color `protobuf:"varint,9,opt,name=col,enum=proto2_test.MyMessage_Color,oneof"`
}

type Communique_Msg struct {
	Msg *Strings `protobuf:"bytes,10,opt,name=msg,oneof"`
}

func (*Communique_Number) isCommunique_Union() {}

func (*Communique_Name) isCommunique_Union() {}

func (*Communique_Data) isCommunique_Union() {}

func (*Communique_TempC) isCommunique_Union() {}

func (*Communique_Col) isCommunique_Union() {}

func (*Communique_Msg) isCommunique_Union() {}

type TestUTF8 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scalar *string  `protobuf:"bytes,1,opt,name=scalar" json:"scalar,omitempty"`
	Vector []string `protobuf:"bytes,2,rep,name=vector" json:"vector,omitempty"`
	// Types that are assignable to Oneof:
	//	*TestUTF8_Field
	Oneof    isTestUTF8_Oneof `protobuf_oneof:"oneof"`
	MapKey   map[string]int64 `protobuf:"bytes,4,rep,name=map_key,json=mapKey" json:"map_key,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MapValue map[int64]string `protobuf:"bytes,5,rep,name=map_value,json=mapValue" json:"map_value,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *TestUTF8) Reset() {
	*x = TestUTF8{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestUTF8) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestUTF8) ProtoMessage() {}

func (x *TestUTF8) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestUTF8.ProtoReflect.Descriptor instead.
func (*TestUTF8) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{30}
}

func (x *TestUTF8) GetScalar() string {
	if x != nil && x.Scalar != nil {
		return *x.Scalar
	}
	return ""
}

func (x *TestUTF8) GetVector() []string {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (m *TestUTF8) GetOneof() isTestUTF8_Oneof {
	if m != nil {
		return m.Oneof
	}
	return nil
}

func (x *TestUTF8) GetField() string {
	if x, ok := x.GetOneof().(*TestUTF8_Field); ok {
		return x.Field
	}
	return ""
}

func (x *TestUTF8) GetMapKey() map[string]int64 {
	if x != nil {
		return x.MapKey
	}
	return nil
}

func (x *TestUTF8) GetMapValue() map[int64]string {
	if x != nil {
		return x.MapValue
	}
	return nil
}

type isTestUTF8_Oneof interface {
	isTestUTF8_Oneof()
}

type TestUTF8_Field struct {
	Field string `protobuf:"bytes,3,opt,name=field,oneof"`
}

func (*TestUTF8_Field) isTestUTF8_Oneof() {}

// Required, repeated, and optional groups.
type GoTest_RequiredGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiredField *string `protobuf:"bytes,71,req,name=RequiredField" json:"RequiredField,omitempty"`
}

func (x *GoTest_RequiredGroup) Reset() {
	*x = GoTest_RequiredGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoTest_RequiredGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoTest_RequiredGroup) ProtoMessage() {}

func (x *GoTest_RequiredGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoTest_RequiredGroup.ProtoReflect.Descriptor instead.
func (*GoTest_RequiredGroup) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{2, 0}
}

func (x *GoTest_RequiredGroup) GetRequiredField() string {
	if x != nil && x.RequiredField != nil {
		return *x.RequiredField
	}
	return ""
}

type GoTest_RepeatedGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiredField *string `protobuf:"bytes,81,req,name=RequiredField" json:"RequiredField,omitempty"`
}

func (x *GoTest_RepeatedGroup) Reset() {
	*x = GoTest_RepeatedGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoTest_RepeatedGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoTest_RepeatedGroup) ProtoMessage() {}

func (x *GoTest_RepeatedGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoTest_RepeatedGroup.ProtoReflect.Descriptor instead.
func (*GoTest_RepeatedGroup) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{2, 1}
}

func (x *GoTest_RepeatedGroup) GetRequiredField() string {
	if x != nil && x.RequiredField != nil {
		return *x.RequiredField
	}
	return ""
}

type GoTest_OptionalGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiredField *string `protobuf:"bytes,91,req,name=RequiredField" json:"RequiredField,omitempty"`
}

func (x *GoTest_OptionalGroup) Reset() {
	*x = GoTest_OptionalGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoTest_OptionalGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoTest_OptionalGroup) ProtoMessage() {}

func (x *GoTest_OptionalGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoTest_OptionalGroup.ProtoReflect.Descriptor instead.
func (*GoTest_OptionalGroup) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{2, 2}
}

func (x *GoTest_OptionalGroup) GetRequiredField() string {
	if x != nil && x.RequiredField != nil {
		return *x.RequiredField
	}
	return ""
}

type GoTestRequiredGroupField_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field *int32 `protobuf:"varint,2,req,name=Field" json:"Field,omitempty"`
}

func (x *GoTestRequiredGroupField_Group) Reset() {
	*x = GoTestRequiredGroupField_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoTestRequiredGroupField_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoTestRequiredGroupField_Group) ProtoMessage() {}

func (x *GoTestRequiredGroupField_Group) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoTestRequiredGroupField_Group.ProtoReflect.Descriptor instead.
func (*GoTestRequiredGroupField_Group) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GoTestRequiredGroupField_Group) GetField() int32 {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return 0
}

type GoSkipTest_SkipGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupInt32  *int32  `protobuf:"varint,16,req,name=group_int32,json=groupInt32" json:"group_int32,omitempty"`
	GroupString *string `protobuf:"bytes,17,req,name=group_string,json=groupString" json:"group_string,omitempty"`
}

func (x *GoSkipTest_SkipGroup) Reset() {
	*x = GoSkipTest_SkipGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoSkipTest_SkipGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoSkipTest_SkipGroup) ProtoMessage() {}

func (x *GoSkipTest_SkipGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoSkipTest_SkipGroup.ProtoReflect.Descriptor instead.
func (*GoSkipTest_SkipGroup) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{4, 0}
}

func (x *GoSkipTest_SkipGroup) GetGroupInt32() int32 {
	if x != nil && x.GroupInt32 != nil {
		return *x.GroupInt32
	}
	return 0
}

func (x *GoSkipTest_SkipGroup) GetGroupString() string {
	if x != nil && x.GroupString != nil {
		return *x.GroupString
	}
	return ""
}

type OldMessage_Nested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (x *OldMessage_Nested) Reset() {
	*x = OldMessage_Nested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OldMessage_Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OldMessage_Nested) ProtoMessage() {}

func (x *OldMessage_Nested) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OldMessage_Nested.ProtoReflect.Descriptor instead.
func (*OldMessage_Nested) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{8, 0}
}

func (x *OldMessage_Nested) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type NewMessage_Nested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	FoodGroup *string `protobuf:"bytes,2,opt,name=food_group,json=foodGroup" json:"food_group,omitempty"`
}

func (x *NewMessage_Nested) Reset() {
	*x = NewMessage_Nested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMessage_Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMessage_Nested) ProtoMessage() {}

func (x *NewMessage_Nested) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMessage_Nested.ProtoReflect.Descriptor instead.
func (*NewMessage_Nested) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{9, 0}
}

func (x *NewMessage_Nested) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NewMessage_Nested) GetFoodGroup() string {
	if x != nil && x.FoodGroup != nil {
		return *x.FoodGroup
	}
	return ""
}

type MyMessage_SomeGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupField *int32 `protobuf:"varint,9,opt,name=group_field,json=groupField" json:"group_field,omitempty"`
}

func (x *MyMessage_SomeGroup) Reset() {
	*x = MyMessage_SomeGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyMessage_SomeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyMessage_SomeGroup) ProtoMessage() {}

func (x *MyMessage_SomeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyMessage_SomeGroup.ProtoReflect.Descriptor instead.
func (*MyMessage_SomeGroup) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{13, 0}
}

func (x *MyMessage_SomeGroup) GetGroupField() int32 {
	if x != nil && x.GroupField != nil {
		return *x.GroupField
	}
	return 0
}

type MessageList_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Count *int32  `protobuf:"varint,3,req,name=count" json:"count,omitempty"`
}

func (x *MessageList_Message) Reset() {
	*x = MessageList_Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageList_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageList_Message) ProtoMessage() {}

func (x *MessageList_Message) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageList_Message.ProtoReflect.Descriptor instead.
func (*MessageList_Message) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{18, 0}
}

func (x *MessageList_Message) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MessageList_Message) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type GroupOld_G struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *int32 `protobuf:"varint,2,opt,name=x" json:"x,omitempty"`
}

func (x *GroupOld_G) Reset() {
	*x = GroupOld_G{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupOld_G) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupOld_G) ProtoMessage() {}

func (x *GroupOld_G) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupOld_G.ProtoReflect.Descriptor instead.
func (*GroupOld_G) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{24, 0}
}

func (x *GroupOld_G) GetX() int32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

type GroupNew_G struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *int32 `protobuf:"varint,2,opt,name=x" json:"x,omitempty"`
	Y *int32 `protobuf:"varint,3,opt,name=y" json:"y,omitempty"`
}

func (x *GroupNew_G) Reset() {
	*x = GroupNew_G{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupNew_G) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupNew_G) ProtoMessage() {}

func (x *GroupNew_G) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupNew_G.ProtoReflect.Descriptor instead.
func (*GroupNew_G) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{25, 0}
}

func (x *GroupNew_G) GetX() int32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *GroupNew_G) GetY() int32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

type Oneof_F_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *int32 `protobuf:"varint,17,opt,name=x" json:"x,omitempty"`
}

func (x *Oneof_F_Group) Reset() {
	*x = Oneof_F_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto2_proto_test_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Oneof_F_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oneof_F_Group) ProtoMessage() {}

func (x *Oneof_F_Group) ProtoReflect() protoreflect.Message {
	mi := &file_proto2_proto_test_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oneof_F_Group.ProtoReflect.Descriptor instead.
func (*Oneof_F_Group) Descriptor() ([]byte, []int) {
	return file_proto2_proto_test_proto_rawDescGZIP(), []int{28, 0}
}

func (x *Oneof_F_Group) GetX() int32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

var file_proto2_proto_test_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*MyMessage)(nil),
		ExtensionType: ([]string)(nil),
		Field:         106,
		Name:          "proto2_test.greeting",
		Tag:           "bytes,106,rep,name=greeting",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*OtherMessage)(nil),
		ExtensionType: (*ComplexExtension)(nil),
		Field:         200,
		Name:          "proto2_test.complex",
		Tag:           "bytes,200,opt,name=complex",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*OtherMessage)(nil),
		ExtensionType: ([]*ComplexExtension)(nil),
		Field:         201,
		Name:          "proto2_test.r_complex",
		Tag:           "bytes,201,rep,name=r_complex",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*float64)(nil),
		Field:         101,
		Name:          "proto2_test.no_default_double",
		Tag:           "fixed64,101,opt,name=no_default_double",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*float32)(nil),
		Field:         102,
		Name:          "proto2_test.no_default_float",
		Tag:           "fixed32,102,opt,name=no_default_float",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*int32)(nil),
		Field:         103,
		Name:          "proto2_test.no_default_int32",
		Tag:           "varint,103,opt,name=no_default_int32",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*int64)(nil),
		Field:         104,
		Name:          "proto2_test.no_default_int64",
		Tag:           "varint,104,opt,name=no_default_int64",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*uint32)(nil),
		Field:         105,
		Name:          "proto2_test.no_default_uint32",
		Tag:           "varint,105,opt,name=no_default_uint32",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*uint64)(nil),
		Field:         106,
		Name:          "proto2_test.no_default_uint64",
		Tag:           "varint,106,opt,name=no_default_uint64",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*int32)(nil),
		Field:         107,
		Name:          "proto2_test.no_default_sint32",
		Tag:           "zigzag32,107,opt,name=no_default_sint32",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*int64)(nil),
		Field:         108,
		Name:          "proto2_test.no_default_sint64",
		Tag:           "zigzag64,108,opt,name=no_default_sint64",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*uint32)(nil),
		Field:         109,
		Name:          "proto2_test.no_default_fixed32",
		Tag:           "fixed32,109,opt,name=no_default_fixed32",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*uint64)(nil),
		Field:         110,
		Name:          "proto2_test.no_default_fixed64",
		Tag:           "fixed64,110,opt,name=no_default_fixed64",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*int32)(nil),
		Field:         111,
		Name:          "proto2_test.no_default_sfixed32",
		Tag:           "fixed32,111,opt,name=no_default_sfixed32",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*int64)(nil),
		Field:         112,
		Name:          "proto2_test.no_default_sfixed64",
		Tag:           "fixed64,112,opt,name=no_default_sfixed64",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*bool)(nil),
		Field:         113,
		Name:          "proto2_test.no_default_bool",
		Tag:           "varint,113,opt,name=no_default_bool",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*string)(nil),
		Field:         114,
		Name:          "proto2_test.no_default_string",
		Tag:           "bytes,114,opt,name=no_default_string",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: ([]byte)(nil),
		Field:         115,
		Name:          "proto2_test.no_default_bytes",
		Tag:           "bytes,115,opt,name=no_default_bytes",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*DefaultsMessage_DefaultsEnum)(nil),
		Field:         116,
		Name:          "proto2_test.no_default_enum",
		Tag:           "varint,116,opt,name=no_default_enum,enum=proto2_test.DefaultsMessage_DefaultsEnum",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*float64)(nil),
		Field:         201,
		Name:          "proto2_test.default_double",
		Tag:           "fixed64,201,opt,name=default_double,def=3.1415",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*float32)(nil),
		Field:         202,
		Name:          "proto2_test.default_float",
		Tag:           "fixed32,202,opt,name=default_float,def=3.14",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*int32)(nil),
		Field:         203,
		Name:          "proto2_test.default_int32",
		Tag:           "varint,203,opt,name=default_int32,def=42",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*int64)(nil),
		Field:         204,
		Name:          "proto2_test.default_int64",
		Tag:           "varint,204,opt,name=default_int64,def=43",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*uint32)(nil),
		Field:         205,
		Name:          "proto2_test.default_uint32",
		Tag:           "varint,205,opt,name=default_uint32,def=44",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*uint64)(nil),
		Field:         206,
		Name:          "proto2_test.default_uint64",
		Tag:           "varint,206,opt,name=default_uint64,def=45",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*int32)(nil),
		Field:         207,
		Name:          "proto2_test.default_sint32",
		Tag:           "zigzag32,207,opt,name=default_sint32,def=46",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*int64)(nil),
		Field:         208,
		Name:          "proto2_test.default_sint64",
		Tag:           "zigzag64,208,opt,name=default_sint64,def=47",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*uint32)(nil),
		Field:         209,
		Name:          "proto2_test.default_fixed32",
		Tag:           "fixed32,209,opt,name=default_fixed32,def=48",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*uint64)(nil),
		Field:         210,
		Name:          "proto2_test.default_fixed64",
		Tag:           "fixed64,210,opt,name=default_fixed64,def=49",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*int32)(nil),
		Field:         211,
		Name:          "proto2_test.default_sfixed32",
		Tag:           "fixed32,211,opt,name=default_sfixed32,def=50",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*int64)(nil),
		Field:         212,
		Name:          "proto2_test.default_sfixed64",
		Tag:           "fixed64,212,opt,name=default_sfixed64,def=51",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*bool)(nil),
		Field:         213,
		Name:          "proto2_test.default_bool",
		Tag:           "varint,213,opt,name=default_bool,def=1",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*string)(nil),
		Field:         214,
		Name:          "proto2_test.default_string",
		Tag:           "bytes,214,opt,name=default_string,def=Hello, string,def=foo",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: ([]byte)(nil),
		Field:         215,
		Name:          "proto2_test.default_bytes",
		Tag:           "bytes,215,opt,name=default_bytes,def=Hello, bytes",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*DefaultsMessage)(nil),
		ExtensionType: (*DefaultsMessage_DefaultsEnum)(nil),
		Field:         216,
		Name:          "proto2_test.default_enum",
		Tag:           "varint,216,opt,name=default_enum,enum=proto2_test.DefaultsMessage_DefaultsEnum,def=1",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*MyMessage)(nil),
		ExtensionType: (*Ext)(nil),
		Field:         103,
		Name:          "proto2_test.Ext.more",
		Tag:           "bytes,103,opt,name=more",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*MyMessage)(nil),
		ExtensionType: (*string)(nil),
		Field:         104,
		Name:          "proto2_test.Ext.text",
		Tag:           "bytes,104,opt,name=text",
		Filename:      "proto2_proto/test.proto",
	},
	{
		ExtendedType:  (*MyMessage)(nil),
		ExtensionType: (*int32)(nil),
		Field:         105,
		Name:          "proto2_test.Ext.number",
		Tag:           "varint,105,opt,name=number",
		Filename:      "proto2_proto/test.proto",
	},
}

// Extension fields to MyMessage.
var (
	// repeated string greeting = 106;
	E_Greeting = &file_proto2_proto_test_proto_extTypes[0] // leave field 200 unregistered for testing
	// optional proto2_test.Ext more = 103;
	E_Ext_More = &file_proto2_proto_test_proto_extTypes[35]
	// optional string text = 104;
	E_Ext_Text = &file_proto2_proto_test_proto_extTypes[36]
	// optional int32 number = 105;
	E_Ext_Number = &file_proto2_proto_test_proto_extTypes[37]
)

// Extension fields to OtherMessage.
var (
	// optional proto2_test.ComplexExtension complex = 200;
	E_Complex = &file_proto2_proto_test_proto_extTypes[1]
	// repeated proto2_test.ComplexExtension r_complex = 201;
	E_RComplex = &file_proto2_proto_test_proto_extTypes[2]
)

// Extension fields to DefaultsMessage.
var (
	// optional double no_default_double = 101;
	E_NoDefaultDouble = &file_proto2_proto_test_proto_extTypes[3]
	// optional float no_default_float = 102;
	E_NoDefaultFloat = &file_proto2_proto_test_proto_extTypes[4]
	// optional int32 no_default_int32 = 103;
	E_NoDefaultInt32 = &file_proto2_proto_test_proto_extTypes[5]
	// optional int64 no_default_int64 = 104;
	E_NoDefaultInt64 = &file_proto2_proto_test_proto_extTypes[6]
	// optional uint32 no_default_uint32 = 105;
	E_NoDefaultUint32 = &file_proto2_proto_test_proto_extTypes[7]
	// optional uint64 no_default_uint64 = 106;
	E_NoDefaultUint64 = &file_proto2_proto_test_proto_extTypes[8]
	// optional sint32 no_default_sint32 = 107;
	E_NoDefaultSint32 = &file_proto2_proto_test_proto_extTypes[9]
	// optional sint64 no_default_sint64 = 108;
	E_NoDefaultSint64 = &file_proto2_proto_test_proto_extTypes[10]
	// optional fixed32 no_default_fixed32 = 109;
	E_NoDefaultFixed32 = &file_proto2_proto_test_proto_extTypes[11]
	// optional fixed64 no_default_fixed64 = 110;
	E_NoDefaultFixed64 = &file_proto2_proto_test_proto_extTypes[12]
	// optional sfixed32 no_default_sfixed32 = 111;
	E_NoDefaultSfixed32 = &file_proto2_proto_test_proto_extTypes[13]
	// optional sfixed64 no_default_sfixed64 = 112;
	E_NoDefaultSfixed64 = &file_proto2_proto_test_proto_extTypes[14]
	// optional bool no_default_bool = 113;
	E_NoDefaultBool = &file_proto2_proto_test_proto_extTypes[15]
	// optional string no_default_string = 114;
	E_NoDefaultString = &file_proto2_proto_test_proto_extTypes[16]
	// optional bytes no_default_bytes = 115;
	E_NoDefaultBytes = &file_proto2_proto_test_proto_extTypes[17]
	// optional proto2_test.DefaultsMessage.DefaultsEnum no_default_enum = 116;
	E_NoDefaultEnum = &file_proto2_proto_test_proto_extTypes[18]
	// optional double default_double = 201;
	E_DefaultDouble = &file_proto2_proto_test_proto_extTypes[19]
	// optional float default_float = 202;
	E_DefaultFloat = &file_proto2_proto_test_proto_extTypes[20]
	// optional int32 default_int32 = 203;
	E_DefaultInt32 = &file_proto2_proto_test_proto_extTypes[21]
	// optional int64 default_int64 = 204;
	E_DefaultInt64 = &file_proto2_proto_test_proto_extTypes[22]
	// optional uint32 default_uint32 = 205;
	E_DefaultUint32 = &file_proto2_proto_test_proto_extTypes[23]
	// optional uint64 default_uint64 = 206;
	E_DefaultUint64 = &file_proto2_proto_test_proto_extTypes[24]
	// optional sint32 default_sint32 = 207;
	E_DefaultSint32 = &file_proto2_proto_test_proto_extTypes[25]
	// optional sint64 default_sint64 = 208;
	E_DefaultSint64 = &file_proto2_proto_test_proto_extTypes[26]
	// optional fixed32 default_fixed32 = 209;
	E_DefaultFixed32 = &file_proto2_proto_test_proto_extTypes[27]
	// optional fixed64 default_fixed64 = 210;
	E_DefaultFixed64 = &file_proto2_proto_test_proto_extTypes[28]
	// optional sfixed32 default_sfixed32 = 211;
	E_DefaultSfixed32 = &file_proto2_proto_test_proto_extTypes[29]
	// optional sfixed64 default_sfixed64 = 212;
	E_DefaultSfixed64 = &file_proto2_proto_test_proto_extTypes[30]
	// optional bool default_bool = 213;
	E_DefaultBool = &file_proto2_proto_test_proto_extTypes[31]
	// optional string default_string = 214;
	E_DefaultString = &file_proto2_proto_test_proto_extTypes[32]
	// optional bytes default_bytes = 215;
	E_DefaultBytes = &file_proto2_proto_test_proto_extTypes[33]
	// optional proto2_test.DefaultsMessage.DefaultsEnum default_enum = 216;
	E_DefaultEnum = &file_proto2_proto_test_proto_extTypes[34]
)

var File_proto2_proto_test_proto protoreflect.FileDescriptor

var file_proto2_proto_test_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x22, 0x2c, 0x0a, 0x06, 0x47, 0x6f, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x22, 0x0a, 0x03, 0x66, 0x6f, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x4f, 0x4f, 0x52,
	0x03, 0x66, 0x6f, 0x6f, 0x22, 0x37, 0x0a, 0x0b, 0x47, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbc, 0x22,
	0x0a, 0x06, 0x47, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x4b, 0x49, 0x4e, 0x44,
	0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x3e, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x0d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x0d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x46, 0x5f, 0x42, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0d, 0x46, 0x42, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x46, 0x5f,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0e, 0x46, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x46, 0x5f, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0e,
	0x46, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x46, 0x5f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x07, 0x52, 0x10, 0x46, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x46, 0x5f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x06, 0x52, 0x10, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x46, 0x5f,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x0f, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x46, 0x5f, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x10, 0x20, 0x02, 0x28,
	0x04, 0x52, 0x0f, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x46, 0x5f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x11, 0x20, 0x02, 0x28, 0x02, 0x52, 0x0e, 0x46, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x46, 0x5f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x12, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0f, 0x46, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x46, 0x5f, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x13, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0f, 0x46, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x46, 0x5f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x65, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0e,
	0x46, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x46, 0x5f, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x66, 0x20, 0x02, 0x28, 0x11, 0x52, 0x0f, 0x46, 0x53, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x46, 0x5f,
	0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x67, 0x20, 0x02, 0x28, 0x12, 0x52, 0x0f, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x46, 0x5f, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x68, 0x20,
	0x02, 0x28, 0x0f, 0x52, 0x11, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x46, 0x5f, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x69, 0x20,
	0x02, 0x28, 0x10, 0x52, 0x11, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x46, 0x5f, 0x42, 0x6f, 0x6f, 0x6c,
	0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x03, 0x28, 0x08, 0x52,
	0x0d, 0x46, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x46, 0x5f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x15, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x46, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x46, 0x5f, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0e, 0x46, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x46, 0x5f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x03, 0x28, 0x07, 0x52, 0x10,
	0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x46, 0x5f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x18, 0x20, 0x03, 0x28, 0x06, 0x52, 0x10, 0x46, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x46, 0x5f, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x46, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x46, 0x5f,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x1a, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0f, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x46, 0x5f, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x0e, 0x46, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x46, 0x5f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0f, 0x46, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x46, 0x5f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x46, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x46, 0x5f, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0xc9, 0x01, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x0e, 0x46, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x46, 0x5f, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0xca, 0x01, 0x20, 0x03, 0x28, 0x11, 0x52,
	0x0f, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x46, 0x5f, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0xcb, 0x01, 0x20, 0x03, 0x28, 0x12, 0x52, 0x0f, 0x46, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a,
	0x13, 0x46, 0x5f, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0xcc, 0x01, 0x20, 0x03, 0x28, 0x0f, 0x52, 0x11, 0x46, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2f,
	0x0a, 0x13, 0x46, 0x5f, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0xcd, 0x01, 0x20, 0x03, 0x28, 0x10, 0x52, 0x11, 0x46, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x46, 0x5f, 0x42, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x46, 0x42, 0x6f, 0x6f, 0x6c, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x46, 0x5f, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x46, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x12, 0x28, 0x0a, 0x10, 0x46, 0x5f, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x46, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x46,
	0x5f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x07, 0x52, 0x10, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x46, 0x5f, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x06, 0x52, 0x10, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x46, 0x5f, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x46, 0x5f, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x46, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12,
	0x28, 0x0a, 0x10, 0x46, 0x5f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x46, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x46, 0x5f, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x46, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x46, 0x5f, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x46, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x12, 0x29, 0x0a, 0x10, 0x46, 0x5f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x46, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x11,
	0x46, 0x5f, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x18, 0xae, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0f, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x46, 0x5f, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0xaf,
	0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x46, 0x5f, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0xb0, 0x02,
	0x20, 0x01, 0x28, 0x0f, 0x52, 0x11, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x46, 0x5f, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0xb1,
	0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x11, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x10, 0x46, 0x5f, 0x42, 0x6f,
	0x6f, 0x6c, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0e, 0x46, 0x42, 0x6f, 0x6f, 0x6c, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x11, 0x46, 0x5f, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x02, 0x33, 0x32, 0x52, 0x0f, 0x46, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x11, 0x46, 0x5f, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x03, 0x3a, 0x02, 0x36, 0x34, 0x52, 0x0f, 0x46, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x13, 0x46, 0x5f, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x07, 0x3a, 0x03, 0x33, 0x32, 0x30, 0x52, 0x11, 0x46, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a,
	0x13, 0x46, 0x5f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x65, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x06, 0x3a, 0x03, 0x36, 0x34, 0x30, 0x52,
	0x11, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x65, 0x64, 0x12, 0x32, 0x0a, 0x12, 0x46, 0x5f, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x04,
	0x33, 0x32, 0x30, 0x30, 0x52, 0x10, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x12, 0x46, 0x5f, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x04, 0x3a, 0x04, 0x36, 0x34, 0x30, 0x30, 0x52, 0x10, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x11, 0x46, 0x5f,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x06, 0x33, 0x31, 0x34, 0x31, 0x35, 0x39, 0x52, 0x0f, 0x46,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x12, 0x34,
	0x0a, 0x12, 0x46, 0x5f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x65, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x06, 0x32, 0x37, 0x31, 0x38,
	0x32, 0x38, 0x52, 0x10, 0x46, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x12, 0x46, 0x5f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09,
	0x3a, 0x10, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x22, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x21,
	0x22, 0x0a, 0x52, 0x10, 0x46, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x11, 0x46, 0x5f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x18, 0x91, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x3a, 0x07, 0x42, 0x69, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x52, 0x0f, 0x46, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x12, 0x46, 0x5f,
	0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64,
	0x18, 0x92, 0x03, 0x20, 0x01, 0x28, 0x11, 0x3a, 0x03, 0x2d, 0x33, 0x32, 0x52, 0x10, 0x46, 0x53,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x12, 0x32,
	0x0a, 0x12, 0x46, 0x5f, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x65, 0x64, 0x18, 0x93, 0x03, 0x20, 0x01, 0x28, 0x12, 0x3a, 0x03, 0x2d, 0x36, 0x34,
	0x52, 0x10, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x65, 0x64, 0x12, 0x36, 0x0a, 0x14, 0x46, 0x5f, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x18, 0x94, 0x03, 0x20, 0x01, 0x28,
	0x0f, 0x3a, 0x03, 0x2d, 0x33, 0x32, 0x52, 0x12, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x14, 0x46, 0x5f,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x65, 0x64, 0x18, 0x95, 0x03, 0x20, 0x01, 0x28, 0x10, 0x3a, 0x03, 0x2d, 0x36, 0x34, 0x52, 0x12,
	0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x65, 0x64, 0x12, 0x37, 0x0a, 0x16, 0x46, 0x5f, 0x42, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x32, 0x20, 0x03,
	0x28, 0x08, 0x42, 0x02, 0x10, 0x01, 0x52, 0x13, 0x46, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x17, 0x46,
	0x5f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x33, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x14, 0x46, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x17, 0x46, 0x5f, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x34, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x01, 0x52, 0x14, 0x46, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x3d, 0x0a, 0x19, 0x46, 0x5f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x35,
	0x20, 0x03, 0x28, 0x07, 0x42, 0x02, 0x10, 0x01, 0x52, 0x16, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64,
	0x12, 0x3d, 0x0a, 0x19, 0x46, 0x5f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x36, 0x20,
	0x03, 0x28, 0x06, 0x42, 0x02, 0x10, 0x01, 0x52, 0x16, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x3b, 0x0a, 0x18, 0x46, 0x5f, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x37, 0x20, 0x03, 0x28,
	0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x15, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x18,
	0x46, 0x5f, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x38, 0x20, 0x03, 0x28, 0x04, 0x42, 0x02,
	0x10, 0x01, 0x52, 0x15, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x17, 0x46, 0x5f, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x18, 0x39, 0x20, 0x03, 0x28, 0x02, 0x42, 0x02, 0x10, 0x01, 0x52, 0x14,
	0x46, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x18, 0x46, 0x5f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0x3a, 0x20, 0x03, 0x28, 0x01, 0x42, 0x02, 0x10, 0x01, 0x52, 0x15, 0x46, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x3c, 0x0a, 0x18, 0x46, 0x5f, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0xf6, 0x03,
	0x20, 0x03, 0x28, 0x11, 0x42, 0x02, 0x10, 0x01, 0x52, 0x15, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x18, 0x46, 0x5f, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0xf7, 0x03, 0x20, 0x03,
	0x28, 0x12, 0x42, 0x02, 0x10, 0x01, 0x52, 0x15, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x40, 0x0a,
	0x1a, 0x46, 0x5f, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0xf8, 0x03, 0x20, 0x03,
	0x28, 0x0f, 0x42, 0x02, 0x10, 0x01, 0x52, 0x17, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x40, 0x0a, 0x1a, 0x46, 0x5f, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0xf9, 0x03,
	0x20, 0x03, 0x28, 0x10, 0x42, 0x02, 0x10, 0x01, 0x52, 0x17, 0x46, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x47, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x46, 0x20, 0x02, 0x28, 0x0a, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x47, 0x0a, 0x0d, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x50, 0x20, 0x03, 0x28,
	0x0a, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x47, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x47, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0a, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x35, 0x0a, 0x0d,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a,
	0x0d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x47,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x1a, 0x35, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x51, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x35, 0x0a, 0x0d, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x5b, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x22, 0x98, 0x01, 0x0a, 0x04, 0x4b, 0x49, 0x4e, 0x44, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x4f,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x4e,
	0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c,
	0x4f, 0x41, 0x54, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x55, 0x50, 0x4c, 0x45, 0x10, 0x08, 0x12,
	0x09, 0x0a, 0x05, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41,
	0x50, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x0c,
	0x0a, 0x08, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x22, 0x7c, 0x0a, 0x18,
	0x47, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0a, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x1d, 0x0a, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xa4, 0x02, 0x0a, 0x0a, 0x47,
	0x6f, 0x53, 0x6b, 0x69, 0x70, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69,
	0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x6b, 0x69, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x70,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x07, 0x52, 0x0b,
	0x73, 0x6b, 0x69, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0d, 0x20, 0x02, 0x28,
	0x06, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x3f, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0f, 0x20, 0x02,
	0x28, 0x0a, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x47, 0x6f, 0x53, 0x6b, 0x69, 0x70, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6b, 0x69, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x1a, 0x4f, 0x0a, 0x09, 0x53, 0x6b, 0x69, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x0a,
	0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x10, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x21,
	0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x11,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x22, 0x1d, 0x0a, 0x0d, 0x4e, 0x6f, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x01, 0x61,
	0x22, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x01, 0x62, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x01, 0x62,
	0x22, 0x2b, 0x0a, 0x06, 0x4d, 0x61, 0x78, 0x54, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0xff, 0xff, 0xff, 0xff, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x74, 0x0a,
	0x0a, 0x4f, 0x6c, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x6c, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x06, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x1a, 0x1c, 0x0a, 0x06, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x1a, 0x3b, 0x0a, 0x06,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f,
	0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x6f, 0x6f, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x5a, 0x0a, 0x0c, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x04, 0x34, 0x30, 0x30,
	0x30, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x0c, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2a, 0x08, 0x08, 0x64, 0x10, 0x80, 0x80, 0x80, 0x80,
	0x02, 0x22, 0x69, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x18, 0x6c, 0x65, 0x6f,
	0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x77, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x5f,
	0x6f, 0x73, 0x63, 0x61, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x14, 0x6c, 0x65, 0x6f, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x6c, 0x79, 0x57, 0x6f, 0x6e, 0x41, 0x6e, 0x4f, 0x73, 0x63, 0x61, 0x72, 0x22, 0xd9, 0x04, 0x0a,
	0x09, 0x4d, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x70, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x05,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x31, 0x0a,
	0x06, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73,
	0x12, 0x4c, 0x0a, 0x11, 0x77, 0x65, 0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x67, 0x6f, 0x5f, 0x64,
	0x65, 0x65, 0x70, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e,
	0x77, 0x65, 0x4d, 0x75, 0x73, 0x74, 0x47, 0x6f, 0x44, 0x65, 0x65, 0x70, 0x65, 0x72, 0x12, 0x36,
	0x0a, 0x09, 0x72, 0x65, 0x70, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x62, 0x69, 0x6b, 0x65, 0x73, 0x68,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x08, 0x62, 0x69, 0x6b, 0x65, 0x73, 0x68, 0x65, 0x64,
	0x12, 0x3e, 0x0a, 0x09, 0x73, 0x6f, 0x6d, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0a, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6d, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x73, 0x6f, 0x6d, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x69, 0x67, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x62, 0x69, 0x67, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x1a, 0x2c, 0x0a, 0x09, 0x53, 0x6f, 0x6d,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x25, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x07, 0x0a, 0x03, 0x52, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x45,
	0x45, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x02, 0x2a, 0x08,
	0x08, 0x64, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0xad, 0x02, 0x0a, 0x03, 0x45, 0x78, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x3c,
	0x0a, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x67,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x52, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x32, 0x2a, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x68, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x32, 0x2e, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x56, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68,
	0x69, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x22, 0x47, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x2a, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x57, 0x4f, 0x10, 0x02, 0x2a,
	0x08, 0x08, 0x64, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x7e, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0a, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x33, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x07, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x22, 0xb8, 0x05, 0x0a, 0x08, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1b,
	0x0a, 0x06, 0x46, 0x5f, 0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x52, 0x05, 0x46, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x07, 0x46,
	0x5f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x33, 0x32,
	0x52, 0x06, 0x46, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1b, 0x0a, 0x07, 0x46, 0x5f, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x02, 0x36, 0x34, 0x52, 0x06, 0x46,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x20, 0x0a, 0x09, 0x46, 0x5f, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x3a, 0x03, 0x33, 0x32, 0x30, 0x52, 0x08, 0x46,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x20, 0x0a, 0x09, 0x46, 0x5f, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x3a, 0x03, 0x36, 0x34, 0x30, 0x52,
	0x08, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x5f, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x04, 0x33, 0x32, 0x30,
	0x30, 0x52, 0x07, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x5f,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x04, 0x36, 0x34,
	0x30, 0x30, 0x52, 0x07, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1f, 0x0a, 0x07, 0x46,
	0x5f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x06, 0x33, 0x31,
	0x34, 0x31, 0x35, 0x39, 0x52, 0x06, 0x46, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x08,
	0x46, 0x5f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x06,
	0x32, 0x37, 0x31, 0x38, 0x32, 0x38, 0x52, 0x07, 0x46, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12,
	0x2b, 0x0a, 0x08, 0x46, 0x5f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x3a, 0x10, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x22, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x21, 0x22, 0x0a, 0x52, 0x07, 0x46, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x07,
	0x46, 0x5f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x3a, 0x07, 0x42,
	0x69, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x52, 0x06, 0x46, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x08, 0x46, 0x5f, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x11,
	0x3a, 0x03, 0x2d, 0x33, 0x32, 0x52, 0x07, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1e,
	0x0a, 0x08, 0x46, 0x5f, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x12,
	0x3a, 0x03, 0x2d, 0x36, 0x34, 0x52, 0x07, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x39,
	0x0a, 0x06, 0x46, 0x5f, 0x45, 0x6e, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x05, 0x47, 0x52, 0x45,
	0x45, 0x4e, 0x52, 0x05, 0x46, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x06, 0x46, 0x5f, 0x50,
	0x69, 0x6e, 0x66, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x03, 0x69, 0x6e, 0x66, 0x52, 0x05,
	0x46, 0x50, 0x69, 0x6e, 0x66, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x5f, 0x4e, 0x69, 0x6e, 0x66, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x04, 0x2d, 0x69, 0x6e, 0x66, 0x52, 0x05, 0x46, 0x4e, 0x69,
	0x6e, 0x66, 0x12, 0x18, 0x0a, 0x05, 0x46, 0x5f, 0x4e, 0x61, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x02, 0x3a, 0x03, 0x6e, 0x61, 0x6e, 0x52, 0x04, 0x46, 0x4e, 0x61, 0x6e, 0x12, 0x2a, 0x0a, 0x03,
	0x73, 0x75, 0x62, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x1b, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x5f,
	0x7a, 0x65, 0x72, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x00, 0x52, 0x07, 0x73, 0x74,
	0x72, 0x5a, 0x65, 0x72, 0x6f, 0x22, 0x25, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x07,
	0x0a, 0x03, 0x52, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x45, 0x45, 0x4e,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x02, 0x22, 0x1e, 0x0a, 0x0b,
	0x53, 0x75, 0x62, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x0f, 0x0a, 0x01, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x37, 0x52, 0x01, 0x6e, 0x22, 0x57, 0x0a, 0x0c,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x35, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x22, 0x10, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x07, 0x0a, 0x03,
	0x52, 0x45, 0x44, 0x10, 0x01, 0x22, 0xdf, 0x01, 0x0a, 0x0c, 0x4d, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x08, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0c,
	0x62, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x08, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6c, 0x73, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x73, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x0a, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0d,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x69, 0x78, 0x65, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x07, 0x52,
	0x06, 0x66, 0x69, 0x78, 0x65, 0x64, 0x73, 0x22, 0x44, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4f, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x01, 0x67, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0a, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4f, 0x6c, 0x64, 0x2e, 0x47, 0x52, 0x01, 0x67, 0x1a, 0x11, 0x0a, 0x01, 0x47, 0x12,
	0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x22, 0x52, 0x0a,
	0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x65, 0x77, 0x12, 0x25, 0x0a, 0x01, 0x67, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x0a, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x65, 0x77, 0x2e, 0x47, 0x52, 0x01, 0x67,
	0x1a, 0x1f, 0x0a, 0x01, 0x47, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x79, 0x22, 0x33, 0x0a, 0x0d, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x66, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52, 0x01, 0x66,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x22, 0xe1, 0x04, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x12, 0x4f, 0x0a, 0x0c, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6e,
	0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a, 0x0b, 0x6d, 0x73,
	0x67, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x4d, 0x73, 0x67,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x73,
	0x67, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x4f, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x62, 0x79,
	0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x0a, 0x73, 0x74, 0x72,
	0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x72, 0x54, 0x6f,
	0x53, 0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x54, 0x6f, 0x53,
	0x74, 0x72, 0x1a, 0x3e, 0x0a, 0x10, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x59, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a,
	0x10, 0x42, 0x79, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a,
	0x0d, 0x53, 0x74, 0x72, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x05, 0x0a, 0x05, 0x4f,
	0x6e, 0x65, 0x6f, 0x66, 0x12, 0x17, 0x0a, 0x06, 0x46, 0x5f, 0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x46, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x19, 0x0a,
	0x07, 0x46, 0x5f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x06, 0x46, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x19, 0x0a, 0x07, 0x46, 0x5f, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x46, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x1d, 0x0a, 0x09, 0x46, 0x5f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x48, 0x00, 0x52, 0x08, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x12, 0x1d, 0x0a, 0x09, 0x46, 0x5f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x06, 0x48, 0x00, 0x52, 0x08, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x12, 0x1b, 0x0a, 0x08, 0x46, 0x5f, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1b,
	0x0a, 0x08, 0x46, 0x5f, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x07, 0x46, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x19, 0x0a, 0x07, 0x46,
	0x5f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x06,
	0x46, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x46, 0x5f, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x07, 0x46, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x46, 0x5f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x46, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x19, 0x0a, 0x07, 0x46, 0x5f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x06, 0x46, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x08, 0x46,
	0x5f, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52,
	0x07, 0x46, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1b, 0x0a, 0x08, 0x46, 0x5f, 0x53, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x07, 0x46, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x35, 0x0a, 0x06, 0x46, 0x5f, 0x45, 0x6e, 0x75, 0x6d, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x46, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x09,
	0x46, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x6f,
	0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x08, 0x46, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x66, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0a, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x2e, 0x46, 0x5f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x48, 0x00, 0x52, 0x06, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x28, 0x0a, 0x0d,
	0x46, 0x5f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x54, 0x61, 0x67, 0x18, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x46, 0x4c, 0x61, 0x72, 0x67,
	0x65, 0x73, 0x74, 0x54, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x17,
	0x0a, 0x07, 0x46, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x42, 0x09, 0x0a, 0x07, 0x74, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x6f, 0x22, 0xf0, 0x01, 0x0a, 0x0a,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61,
	0x6b, 0x65, 0x5f, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6d, 0x61, 0x6b, 0x65, 0x4d, 0x65, 0x43, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x17, 0x0a, 0x06, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x00, 0x52, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x43, 0x12, 0x30, 0x0a, 0x03, 0x63, 0x6f, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x03, 0x63, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0xd1,
	0x02, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x55, 0x54, 0x46, 0x38, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x55, 0x54, 0x46, 0x38, 0x2e, 0x4d, 0x61, 0x70, 0x4b,
	0x65, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x12,
	0x40, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x55, 0x54, 0x46, 0x38, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x2a, 0x0f, 0x0a, 0x03, 0x46, 0x4f, 0x4f, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4f, 0x4f,
	0x31, 0x10, 0x01, 0x3a, 0x32, 0x0a, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x6a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67,
	0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x53, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xc8, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x3a, 0x56, 0x0a, 0x09,
	0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0xc9, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x3a, 0x48, 0x0a, 0x11, 0x6e, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6e,
	0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x3a, 0x46,
	0x0a, 0x10, 0x6e, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6e, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x3a, 0x46, 0x0a, 0x10, 0x6e, 0x6f, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x6e, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x3a, 0x46,
	0x0a, 0x10, 0x6e, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x68, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6e, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x3a, 0x48, 0x0a, 0x11, 0x6e, 0x6f, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x6e, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x3a, 0x48, 0x0a, 0x11, 0x6e, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6e, 0x6f, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x3a, 0x48, 0x0a, 0x11, 0x6e, 0x6f,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x6b, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x0f, 0x6e, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x3a, 0x48, 0x0a, 0x11, 0x6e, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x6e,
	0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x3a, 0x4a,
	0x0a, 0x12, 0x6e, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x07, 0x52, 0x10, 0x6e, 0x6f, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x3a, 0x4a, 0x0a, 0x12, 0x6e, 0x6f,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x6e,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x10, 0x6e, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x3a, 0x4c, 0x0a, 0x13, 0x6e, 0x6f, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28,
	0x0f, 0x52, 0x11, 0x6e, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x3a, 0x4c, 0x0a, 0x13, 0x6e, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x70, 0x20, 0x01, 0x28, 0x10, 0x52,
	0x11, 0x6e, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x3a, 0x44, 0x0a, 0x0f, 0x6e, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x71, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x6f, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x3a, 0x48, 0x0a, 0x11, 0x6e, 0x6f, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x72, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6e, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x3a, 0x46, 0x0a, 0x10, 0x6e, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6e, 0x6f, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x3a, 0x6f, 0x0a, 0x0f, 0x6e, 0x6f,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x74, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0d, 0x6e, 0x6f,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x3a, 0x4c, 0x0a, 0x0e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xc9, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x3a, 0x06, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x3a, 0x48, 0x0a, 0x0d, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x02, 0x3a,
	0x04, 0x33, 0x2e, 0x31, 0x34, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x3a, 0x46, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x34, 0x32, 0x52, 0x0c, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x3a, 0x46, 0x0a, 0x0d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x3a, 0x02, 0x34, 0x33, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x3a, 0x48, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x02, 0x34, 0x34, 0x52, 0x0d,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x3a, 0x48, 0x0a,
	0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xce, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x02, 0x34, 0x35, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x3a, 0x48, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x11, 0x3a, 0x02,
	0x34, 0x36, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x3a, 0x48, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x12, 0x3a, 0x02, 0x34, 0x37, 0x52, 0x0d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x3a, 0x4a, 0x0a, 0x0f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xd1, 0x01, 0x20,
	0x01, 0x28, 0x07, 0x3a, 0x02, 0x34, 0x38, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x3a, 0x4a, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x06, 0x3a,
	0x02, 0x34, 0x39, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x3a, 0x4c, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0f, 0x3a, 0x02, 0x35, 0x30,
	0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x3a, 0x4c, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x10, 0x3a, 0x02, 0x35, 0x31, 0x52, 0x0f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x3a,
	0x46, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x12,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xd5, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x3a, 0x5b, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xd6, 0x01, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x15,
	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x64, 0x65,
	0x66, 0x3d, 0x66, 0x6f, 0x6f, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x3a, 0x50, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x3a, 0x0c, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x2c, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x3a, 0x70, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0xd8, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x3a, 0x03, 0x4f, 0x4e, 0x45, 0x52, 0x0b, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x45, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73,
	0x6b, 0x76, 0x32, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x62, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_proto2_proto_test_proto_rawDescOnce sync.Once
	file_proto2_proto_test_proto_rawDescData = file_proto2_proto_test_proto_rawDesc
)

func file_proto2_proto_test_proto_rawDescGZIP() []byte {
	file_proto2_proto_test_proto_rawDescOnce.Do(func() {
		file_proto2_proto_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto2_proto_test_proto_rawDescData)
	})
	return file_proto2_proto_test_proto_rawDescData
}

var file_proto2_proto_test_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_proto2_proto_test_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_proto2_proto_test_proto_goTypes = []interface{}{
	(FOO)(0),                               // 0: proto2_test.FOO
	(GoTest_KIND)(0),                       // 1: proto2_test.GoTest.KIND
	(MyMessage_Color)(0),                   // 2: proto2_test.MyMessage.Color
	(DefaultsMessage_DefaultsEnum)(0),      // 3: proto2_test.DefaultsMessage.DefaultsEnum
	(Defaults_Color)(0),                    // 4: proto2_test.Defaults.Color
	(RepeatedEnum_Color)(0),                // 5: proto2_test.RepeatedEnum.Color
	(*GoEnum)(nil),                         // 6: proto2_test.GoEnum
	(*GoTestField)(nil),                    // 7: proto2_test.GoTestField
	(*GoTest)(nil),                         // 8: proto2_test.GoTest
	(*GoTestRequiredGroupField)(nil),       // 9: proto2_test.GoTestRequiredGroupField
	(*GoSkipTest)(nil),                     // 10: proto2_test.GoSkipTest
	(*NonPackedTest)(nil),                  // 11: proto2_test.NonPackedTest
	(*PackedTest)(nil),                     // 12: proto2_test.PackedTest
	(*MaxTag)(nil),                         // 13: proto2_test.MaxTag
	(*OldMessage)(nil),                     // 14: proto2_test.OldMessage
	(*NewMessage)(nil),                     // 15: proto2_test.NewMessage
	(*InnerMessage)(nil),                   // 16: proto2_test.InnerMessage
	(*OtherMessage)(nil),                   // 17: proto2_test.OtherMessage
	(*RequiredInnerMessage)(nil),           // 18: proto2_test.RequiredInnerMessage
	(*MyMessage)(nil),                      // 19: proto2_test.MyMessage
	(*Ext)(nil),                            // 20: proto2_test.Ext
	(*ComplexExtension)(nil),               // 21: proto2_test.ComplexExtension
	(*DefaultsMessage)(nil),                // 22: proto2_test.DefaultsMessage
	(*Empty)(nil),                          // 23: proto2_test.Empty
	(*MessageList)(nil),                    // 24: proto2_test.MessageList
	(*Strings)(nil),                        // 25: proto2_test.Strings
	(*Defaults)(nil),                       // 26: proto2_test.Defaults
	(*SubDefaults)(nil),                    // 27: proto2_test.SubDefaults
	(*RepeatedEnum)(nil),                   // 28: proto2_test.RepeatedEnum
	(*MoreRepeated)(nil),                   // 29: proto2_test.MoreRepeated
	(*GroupOld)(nil),                       // 30: proto2_test.GroupOld
	(*GroupNew)(nil),                       // 31: proto2_test.GroupNew
	(*FloatingPoint)(nil),                  // 32: proto2_test.FloatingPoint
	(*MessageWithMap)(nil),                 // 33: proto2_test.MessageWithMap
	(*Oneof)(nil),                          // 34: proto2_test.Oneof
	(*Communique)(nil),                     // 35: proto2_test.Communique
	(*TestUTF8)(nil),                       // 36: proto2_test.TestUTF8
	(*GoTest_RequiredGroup)(nil),           // 37: proto2_test.GoTest.RequiredGroup
	(*GoTest_RepeatedGroup)(nil),           // 38: proto2_test.GoTest.RepeatedGroup
	(*GoTest_OptionalGroup)(nil),           // 39: proto2_test.GoTest.OptionalGroup
	(*GoTestRequiredGroupField_Group)(nil), // 40: proto2_test.GoTestRequiredGroupField.Group
	(*GoSkipTest_SkipGroup)(nil),           // 41: proto2_test.GoSkipTest.SkipGroup
	(*OldMessage_Nested)(nil),              // 42: proto2_test.OldMessage.Nested
	(*NewMessage_Nested)(nil),              // 43: proto2_test.NewMessage.Nested
	(*MyMessage_SomeGroup)(nil),            // 44: proto2_test.MyMessage.SomeGroup
	nil,                                    // 45: proto2_test.Ext.MapFieldEntry
	(*MessageList_Message)(nil),            // 46: proto2_test.MessageList.Message
	(*GroupOld_G)(nil),                     // 47: proto2_test.GroupOld.G
	(*GroupNew_G)(nil),                     // 48: proto2_test.GroupNew.G
	nil,                                    // 49: proto2_test.MessageWithMap.NameMappingEntry
	nil,                                    // 50: proto2_test.MessageWithMap.MsgMappingEntry
	nil,                                    // 51: proto2_test.MessageWithMap.ByteMappingEntry
	nil,                                    // 52: proto2_test.MessageWithMap.StrToStrEntry
	(*Oneof_F_Group)(nil),                  // 53: proto2_test.Oneof.F_Group
	nil,                                    // 54: proto2_test.TestUTF8.MapKeyEntry
	nil,                                    // 55: proto2_test.TestUTF8.MapValueEntry
}
var file_proto2_proto_test_proto_depIdxs = []int32{
	0,  // 0: proto2_test.GoEnum.foo:type_name -> proto2_test.FOO
	1,  // 1: proto2_test.GoTest.Kind:type_name -> proto2_test.GoTest.KIND
	7,  // 2: proto2_test.GoTest.RequiredField:type_name -> proto2_test.GoTestField
	7,  // 3: proto2_test.GoTest.RepeatedField:type_name -> proto2_test.GoTestField
	7,  // 4: proto2_test.GoTest.OptionalField:type_name -> proto2_test.GoTestField
	37, // 5: proto2_test.GoTest.requiredgroup:type_name -> proto2_test.GoTest.RequiredGroup
	38, // 6: proto2_test.GoTest.repeatedgroup:type_name -> proto2_test.GoTest.RepeatedGroup
	39, // 7: proto2_test.GoTest.optionalgroup:type_name -> proto2_test.GoTest.OptionalGroup
	40, // 8: proto2_test.GoTestRequiredGroupField.group:type_name -> proto2_test.GoTestRequiredGroupField.Group
	41, // 9: proto2_test.GoSkipTest.skipgroup:type_name -> proto2_test.GoSkipTest.SkipGroup
	42, // 10: proto2_test.OldMessage.nested:type_name -> proto2_test.OldMessage.Nested
	43, // 11: proto2_test.NewMessage.nested:type_name -> proto2_test.NewMessage.Nested
	16, // 12: proto2_test.OtherMessage.inner:type_name -> proto2_test.InnerMessage
	16, // 13: proto2_test.RequiredInnerMessage.leo_finally_won_an_oscar:type_name -> proto2_test.InnerMessage
	16, // 14: proto2_test.MyMessage.inner:type_name -> proto2_test.InnerMessage
	17, // 15: proto2_test.MyMessage.others:type_name -> proto2_test.OtherMessage
	18, // 16: proto2_test.MyMessage.we_must_go_deeper:type_name -> proto2_test.RequiredInnerMessage
	16, // 17: proto2_test.MyMessage.rep_inner:type_name -> proto2_test.InnerMessage
	2,  // 18: proto2_test.MyMessage.bikeshed:type_name -> proto2_test.MyMessage.Color
	44, // 19: proto2_test.MyMessage.somegroup:type_name -> proto2_test.MyMessage.SomeGroup
	45, // 20: proto2_test.Ext.map_field:type_name -> proto2_test.Ext.MapFieldEntry
	46, // 21: proto2_test.MessageList.message:type_name -> proto2_test.MessageList.Message
	4,  // 22: proto2_test.Defaults.F_Enum:type_name -> proto2_test.Defaults.Color
	27, // 23: proto2_test.Defaults.sub:type_name -> proto2_test.SubDefaults
	5,  // 24: proto2_test.RepeatedEnum.color:type_name -> proto2_test.RepeatedEnum.Color
	47, // 25: proto2_test.GroupOld.g:type_name -> proto2_test.GroupOld.G
	48, // 26: proto2_test.GroupNew.g:type_name -> proto2_test.GroupNew.G
	49, // 27: proto2_test.MessageWithMap.name_mapping:type_name -> proto2_test.MessageWithMap.NameMappingEntry
	50, // 28: proto2_test.MessageWithMap.msg_mapping:type_name -> proto2_test.MessageWithMap.MsgMappingEntry
	51, // 29: proto2_test.MessageWithMap.byte_mapping:type_name -> proto2_test.MessageWithMap.ByteMappingEntry
	52, // 30: proto2_test.MessageWithMap.str_to_str:type_name -> proto2_test.MessageWithMap.StrToStrEntry
	2,  // 31: proto2_test.Oneof.F_Enum:type_name -> proto2_test.MyMessage.Color
	7,  // 32: proto2_test.Oneof.F_Message:type_name -> proto2_test.GoTestField
	53, // 33: proto2_test.Oneof.f_group:type_name -> proto2_test.Oneof.F_Group
	2,  // 34: proto2_test.Communique.col:type_name -> proto2_test.MyMessage.Color
	25, // 35: proto2_test.Communique.msg:type_name -> proto2_test.Strings
	54, // 36: proto2_test.TestUTF8.map_key:type_name -> proto2_test.TestUTF8.MapKeyEntry
	55, // 37: proto2_test.TestUTF8.map_value:type_name -> proto2_test.TestUTF8.MapValueEntry
	32, // 38: proto2_test.MessageWithMap.MsgMappingEntry.value:type_name -> proto2_test.FloatingPoint
	19, // 39: proto2_test.greeting:extendee -> proto2_test.MyMessage
	17, // 40: proto2_test.complex:extendee -> proto2_test.OtherMessage
	17, // 41: proto2_test.r_complex:extendee -> proto2_test.OtherMessage
	22, // 42: proto2_test.no_default_double:extendee -> proto2_test.DefaultsMessage
	22, // 43: proto2_test.no_default_float:extendee -> proto2_test.DefaultsMessage
	22, // 44: proto2_test.no_default_int32:extendee -> proto2_test.DefaultsMessage
	22, // 45: proto2_test.no_default_int64:extendee -> proto2_test.DefaultsMessage
	22, // 46: proto2_test.no_default_uint32:extendee -> proto2_test.DefaultsMessage
	22, // 47: proto2_test.no_default_uint64:extendee -> proto2_test.DefaultsMessage
	22, // 48: proto2_test.no_default_sint32:extendee -> proto2_test.DefaultsMessage
	22, // 49: proto2_test.no_default_sint64:extendee -> proto2_test.DefaultsMessage
	22, // 50: proto2_test.no_default_fixed32:extendee -> proto2_test.DefaultsMessage
	22, // 51: proto2_test.no_default_fixed64:extendee -> proto2_test.DefaultsMessage
	22, // 52: proto2_test.no_default_sfixed32:extendee -> proto2_test.DefaultsMessage
	22, // 53: proto2_test.no_default_sfixed64:extendee -> proto2_test.DefaultsMessage
	22, // 54: proto2_test.no_default_bool:extendee -> proto2_test.DefaultsMessage
	22, // 55: proto2_test.no_default_string:extendee -> proto2_test.DefaultsMessage
	22, // 56: proto2_test.no_default_bytes:extendee -> proto2_test.DefaultsMessage
	22, // 57: proto2_test.no_default_enum:extendee -> proto2_test.DefaultsMessage
	22, // 58: proto2_test.default_double:extendee -> proto2_test.DefaultsMessage
	22, // 59: proto2_test.default_float:extendee -> proto2_test.DefaultsMessage
	22, // 60: proto2_test.default_int32:extendee -> proto2_test.DefaultsMessage
	22, // 61: proto2_test.default_int64:extendee -> proto2_test.DefaultsMessage
	22, // 62: proto2_test.default_uint32:extendee -> proto2_test.DefaultsMessage
	22, // 63: proto2_test.default_uint64:extendee -> proto2_test.DefaultsMessage
	22, // 64: proto2_test.default_sint32:extendee -> proto2_test.DefaultsMessage
	22, // 65: proto2_test.default_sint64:extendee -> proto2_test.DefaultsMessage
	22, // 66: proto2_test.default_fixed32:extendee -> proto2_test.DefaultsMessage
	22, // 67: proto2_test.default_fixed64:extendee -> proto2_test.DefaultsMessage
	22, // 68: proto2_test.default_sfixed32:extendee -> proto2_test.DefaultsMessage
	22, // 69: proto2_test.default_sfixed64:extendee -> proto2_test.DefaultsMessage
	22, // 70: proto2_test.default_bool:extendee -> proto2_test.DefaultsMessage
	22, // 71: proto2_test.default_string:extendee -> proto2_test.DefaultsMessage
	22, // 72: proto2_test.default_bytes:extendee -> proto2_test.DefaultsMessage
	22, // 73: proto2_test.default_enum:extendee -> proto2_test.DefaultsMessage
	19, // 74: proto2_test.Ext.more:extendee -> proto2_test.MyMessage
	19, // 75: proto2_test.Ext.text:extendee -> proto2_test.MyMessage
	19, // 76: proto2_test.Ext.number:extendee -> proto2_test.MyMessage
	21, // 77: proto2_test.complex:type_name -> proto2_test.ComplexExtension
	21, // 78: proto2_test.r_complex:type_name -> proto2_test.ComplexExtension
	3,  // 79: proto2_test.no_default_enum:type_name -> proto2_test.DefaultsMessage.DefaultsEnum
	3,  // 80: proto2_test.default_enum:type_name -> proto2_test.DefaultsMessage.DefaultsEnum
	20, // 81: proto2_test.Ext.more:type_name -> proto2_test.Ext
	82, // [82:82] is the sub-list for method output_type
	82, // [82:82] is the sub-list for method input_type
	77, // [77:82] is the sub-list for extension type_name
	39, // [39:77] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_proto2_proto_test_proto_init() }
func file_proto2_proto_test_proto_init() {
	if File_proto2_proto_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto2_proto_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoTestField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoTestRequiredGroupField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoSkipTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonPackedTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackedTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OldMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InnerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtherMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequiredInnerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplexExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Strings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Defaults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubDefaults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoreRepeated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupOld); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageWithMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Oneof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Communique); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestUTF8); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoTest_RequiredGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoTest_RepeatedGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoTest_OptionalGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoTestRequiredGroupField_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoSkipTest_SkipGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OldMessage_Nested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMessage_Nested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyMessage_SomeGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageList_Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupOld_G); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupNew_G); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto2_proto_test_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Oneof_F_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto2_proto_test_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*Oneof_F_Bool)(nil),
		(*Oneof_F_Int32)(nil),
		(*Oneof_F_Int64)(nil),
		(*Oneof_F_Fixed32)(nil),
		(*Oneof_F_Fixed64)(nil),
		(*Oneof_F_Uint32)(nil),
		(*Oneof_F_Uint64)(nil),
		(*Oneof_F_Float)(nil),
		(*Oneof_F_Double)(nil),
		(*Oneof_F_String)(nil),
		(*Oneof_F_Bytes)(nil),
		(*Oneof_F_Sint32)(nil),
		(*Oneof_F_Sint64)(nil),
		(*Oneof_F_Enum)(nil),
		(*Oneof_F_Message)(nil),
		(*Oneof_FGroup)(nil),
		(*Oneof_F_Largest_Tag)(nil),
		(*Oneof_Value)(nil),
	}
	file_proto2_proto_test_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*Communique_Number)(nil),
		(*Communique_Name)(nil),
		(*Communique_Data)(nil),
		(*Communique_TempC)(nil),
		(*Communique_Col)(nil),
		(*Communique_Msg)(nil),
	}
	file_proto2_proto_test_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*TestUTF8_Field)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto2_proto_test_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   50,
			NumExtensions: 38,
			NumServices:   0,
		},
		GoTypes:           file_proto2_proto_test_proto_goTypes,
		DependencyIndexes: file_proto2_proto_test_proto_depIdxs,
		EnumInfos:         file_proto2_proto_test_proto_enumTypes,
		MessageInfos:      file_proto2_proto_test_proto_msgTypes,
		ExtensionInfos:    file_proto2_proto_test_proto_extTypes,
	}.Build()
	File_proto2_proto_test_proto = out.File
	file_proto2_proto_test_proto_rawDesc = nil
	file_proto2_proto_test_proto_goTypes = nil
	file_proto2_proto_test_proto_depIdxs = nil
}
