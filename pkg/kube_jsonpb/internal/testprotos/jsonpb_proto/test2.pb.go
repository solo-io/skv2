// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: jsonpb_proto/test2.proto

package jsonpb_proto

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	duration "github.com/golang/protobuf/ptypes/duration"
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Widget_Color int32

const (
	Widget_RED   Widget_Color = 0
	Widget_GREEN Widget_Color = 1
	Widget_BLUE  Widget_Color = 2
)

// Enum value maps for Widget_Color.
var (
	Widget_Color_name = map[int32]string{
		0: "RED",
		1: "GREEN",
		2: "BLUE",
	}
	Widget_Color_value = map[string]int32{
		"RED":   0,
		"GREEN": 1,
		"BLUE":  2,
	}
)

func (x Widget_Color) Enum() *Widget_Color {
	p := new(Widget_Color)
	*p = x
	return p
}

func (x Widget_Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Widget_Color) Descriptor() protoreflect.EnumDescriptor {
	return file_jsonpb_proto_test2_proto_enumTypes[0].Descriptor()
}

func (Widget_Color) Type() protoreflect.EnumType {
	return &file_jsonpb_proto_test2_proto_enumTypes[0]
}

func (x Widget_Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Widget_Color) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Widget_Color(num)
	return nil
}

// Deprecated: Use Widget_Color.Descriptor instead.
func (Widget_Color) EnumDescriptor() ([]byte, []int) {
	return file_jsonpb_proto_test2_proto_rawDescGZIP(), []int{3, 0}
}

// Test message for holding primitive types.
type Simple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OBool      *bool    `protobuf:"varint,1,opt,name=o_bool,json=oBool" json:"o_bool,omitempty"`
	OInt32     *int32   `protobuf:"varint,2,opt,name=o_int32,json=oInt32" json:"o_int32,omitempty"`
	OInt32Str  *int32   `protobuf:"varint,3,opt,name=o_int32_str,json=oInt32Str" json:"o_int32_str,omitempty"`
	OInt64     *int64   `protobuf:"varint,4,opt,name=o_int64,json=oInt64" json:"o_int64,omitempty"`
	OInt64Str  *int64   `protobuf:"varint,5,opt,name=o_int64_str,json=oInt64Str" json:"o_int64_str,omitempty"`
	OUint32    *uint32  `protobuf:"varint,6,opt,name=o_uint32,json=oUint32" json:"o_uint32,omitempty"`
	OUint32Str *uint32  `protobuf:"varint,7,opt,name=o_uint32_str,json=oUint32Str" json:"o_uint32_str,omitempty"`
	OUint64    *uint64  `protobuf:"varint,8,opt,name=o_uint64,json=oUint64" json:"o_uint64,omitempty"`
	OUint64Str *uint64  `protobuf:"varint,9,opt,name=o_uint64_str,json=oUint64Str" json:"o_uint64_str,omitempty"`
	OSint32    *int32   `protobuf:"zigzag32,10,opt,name=o_sint32,json=oSint32" json:"o_sint32,omitempty"`
	OSint32Str *int32   `protobuf:"zigzag32,11,opt,name=o_sint32_str,json=oSint32Str" json:"o_sint32_str,omitempty"`
	OSint64    *int64   `protobuf:"zigzag64,12,opt,name=o_sint64,json=oSint64" json:"o_sint64,omitempty"`
	OSint64Str *int64   `protobuf:"zigzag64,13,opt,name=o_sint64_str,json=oSint64Str" json:"o_sint64_str,omitempty"`
	OFloat     *float32 `protobuf:"fixed32,14,opt,name=o_float,json=oFloat" json:"o_float,omitempty"`
	OFloatStr  *float32 `protobuf:"fixed32,15,opt,name=o_float_str,json=oFloatStr" json:"o_float_str,omitempty"`
	ODouble    *float64 `protobuf:"fixed64,16,opt,name=o_double,json=oDouble" json:"o_double,omitempty"`
	ODoubleStr *float64 `protobuf:"fixed64,17,opt,name=o_double_str,json=oDoubleStr" json:"o_double_str,omitempty"`
	OString    *string  `protobuf:"bytes,18,opt,name=o_string,json=oString" json:"o_string,omitempty"`
	OBytes     []byte   `protobuf:"bytes,19,opt,name=o_bytes,json=oBytes" json:"o_bytes,omitempty"`
}

func (x *Simple) Reset() {
	*x = Simple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonpb_proto_test2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Simple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Simple) ProtoMessage() {}

func (x *Simple) ProtoReflect() protoreflect.Message {
	mi := &file_jsonpb_proto_test2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Simple.ProtoReflect.Descriptor instead.
func (*Simple) Descriptor() ([]byte, []int) {
	return file_jsonpb_proto_test2_proto_rawDescGZIP(), []int{0}
}

func (x *Simple) GetOBool() bool {
	if x != nil && x.OBool != nil {
		return *x.OBool
	}
	return false
}

func (x *Simple) GetOInt32() int32 {
	if x != nil && x.OInt32 != nil {
		return *x.OInt32
	}
	return 0
}

func (x *Simple) GetOInt32Str() int32 {
	if x != nil && x.OInt32Str != nil {
		return *x.OInt32Str
	}
	return 0
}

func (x *Simple) GetOInt64() int64 {
	if x != nil && x.OInt64 != nil {
		return *x.OInt64
	}
	return 0
}

func (x *Simple) GetOInt64Str() int64 {
	if x != nil && x.OInt64Str != nil {
		return *x.OInt64Str
	}
	return 0
}

func (x *Simple) GetOUint32() uint32 {
	if x != nil && x.OUint32 != nil {
		return *x.OUint32
	}
	return 0
}

func (x *Simple) GetOUint32Str() uint32 {
	if x != nil && x.OUint32Str != nil {
		return *x.OUint32Str
	}
	return 0
}

func (x *Simple) GetOUint64() uint64 {
	if x != nil && x.OUint64 != nil {
		return *x.OUint64
	}
	return 0
}

func (x *Simple) GetOUint64Str() uint64 {
	if x != nil && x.OUint64Str != nil {
		return *x.OUint64Str
	}
	return 0
}

func (x *Simple) GetOSint32() int32 {
	if x != nil && x.OSint32 != nil {
		return *x.OSint32
	}
	return 0
}

func (x *Simple) GetOSint32Str() int32 {
	if x != nil && x.OSint32Str != nil {
		return *x.OSint32Str
	}
	return 0
}

func (x *Simple) GetOSint64() int64 {
	if x != nil && x.OSint64 != nil {
		return *x.OSint64
	}
	return 0
}

func (x *Simple) GetOSint64Str() int64 {
	if x != nil && x.OSint64Str != nil {
		return *x.OSint64Str
	}
	return 0
}

func (x *Simple) GetOFloat() float32 {
	if x != nil && x.OFloat != nil {
		return *x.OFloat
	}
	return 0
}

func (x *Simple) GetOFloatStr() float32 {
	if x != nil && x.OFloatStr != nil {
		return *x.OFloatStr
	}
	return 0
}

func (x *Simple) GetODouble() float64 {
	if x != nil && x.ODouble != nil {
		return *x.ODouble
	}
	return 0
}

func (x *Simple) GetODoubleStr() float64 {
	if x != nil && x.ODoubleStr != nil {
		return *x.ODoubleStr
	}
	return 0
}

func (x *Simple) GetOString() string {
	if x != nil && x.OString != nil {
		return *x.OString
	}
	return ""
}

func (x *Simple) GetOBytes() []byte {
	if x != nil {
		return x.OBytes
	}
	return nil
}

// Test message for holding special non-finites primitives.
type NonFinites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FNan  *float32 `protobuf:"fixed32,1,opt,name=f_nan,json=fNan" json:"f_nan,omitempty"`
	FPinf *float32 `protobuf:"fixed32,2,opt,name=f_pinf,json=fPinf" json:"f_pinf,omitempty"`
	FNinf *float32 `protobuf:"fixed32,3,opt,name=f_ninf,json=fNinf" json:"f_ninf,omitempty"`
	DNan  *float64 `protobuf:"fixed64,4,opt,name=d_nan,json=dNan" json:"d_nan,omitempty"`
	DPinf *float64 `protobuf:"fixed64,5,opt,name=d_pinf,json=dPinf" json:"d_pinf,omitempty"`
	DNinf *float64 `protobuf:"fixed64,6,opt,name=d_ninf,json=dNinf" json:"d_ninf,omitempty"`
}

func (x *NonFinites) Reset() {
	*x = NonFinites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonpb_proto_test2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonFinites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonFinites) ProtoMessage() {}

func (x *NonFinites) ProtoReflect() protoreflect.Message {
	mi := &file_jsonpb_proto_test2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonFinites.ProtoReflect.Descriptor instead.
func (*NonFinites) Descriptor() ([]byte, []int) {
	return file_jsonpb_proto_test2_proto_rawDescGZIP(), []int{1}
}

func (x *NonFinites) GetFNan() float32 {
	if x != nil && x.FNan != nil {
		return *x.FNan
	}
	return 0
}

func (x *NonFinites) GetFPinf() float32 {
	if x != nil && x.FPinf != nil {
		return *x.FPinf
	}
	return 0
}

func (x *NonFinites) GetFNinf() float32 {
	if x != nil && x.FNinf != nil {
		return *x.FNinf
	}
	return 0
}

func (x *NonFinites) GetDNan() float64 {
	if x != nil && x.DNan != nil {
		return *x.DNan
	}
	return 0
}

func (x *NonFinites) GetDPinf() float64 {
	if x != nil && x.DPinf != nil {
		return *x.DPinf
	}
	return 0
}

func (x *NonFinites) GetDNinf() float64 {
	if x != nil && x.DNinf != nil {
		return *x.DNinf
	}
	return 0
}

// Test message for holding repeated primitives.
type Repeats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RBool   []bool    `protobuf:"varint,1,rep,name=r_bool,json=rBool" json:"r_bool,omitempty"`
	RInt32  []int32   `protobuf:"varint,2,rep,name=r_int32,json=rInt32" json:"r_int32,omitempty"`
	RInt64  []int64   `protobuf:"varint,3,rep,name=r_int64,json=rInt64" json:"r_int64,omitempty"`
	RUint32 []uint32  `protobuf:"varint,4,rep,name=r_uint32,json=rUint32" json:"r_uint32,omitempty"`
	RUint64 []uint64  `protobuf:"varint,5,rep,name=r_uint64,json=rUint64" json:"r_uint64,omitempty"`
	RSint32 []int32   `protobuf:"zigzag32,6,rep,name=r_sint32,json=rSint32" json:"r_sint32,omitempty"`
	RSint64 []int64   `protobuf:"zigzag64,7,rep,name=r_sint64,json=rSint64" json:"r_sint64,omitempty"`
	RFloat  []float32 `protobuf:"fixed32,8,rep,name=r_float,json=rFloat" json:"r_float,omitempty"`
	RDouble []float64 `protobuf:"fixed64,9,rep,name=r_double,json=rDouble" json:"r_double,omitempty"`
	RString []string  `protobuf:"bytes,10,rep,name=r_string,json=rString" json:"r_string,omitempty"`
	RBytes  [][]byte  `protobuf:"bytes,11,rep,name=r_bytes,json=rBytes" json:"r_bytes,omitempty"`
}

func (x *Repeats) Reset() {
	*x = Repeats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonpb_proto_test2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repeats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repeats) ProtoMessage() {}

func (x *Repeats) ProtoReflect() protoreflect.Message {
	mi := &file_jsonpb_proto_test2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repeats.ProtoReflect.Descriptor instead.
func (*Repeats) Descriptor() ([]byte, []int) {
	return file_jsonpb_proto_test2_proto_rawDescGZIP(), []int{2}
}

func (x *Repeats) GetRBool() []bool {
	if x != nil {
		return x.RBool
	}
	return nil
}

func (x *Repeats) GetRInt32() []int32 {
	if x != nil {
		return x.RInt32
	}
	return nil
}

func (x *Repeats) GetRInt64() []int64 {
	if x != nil {
		return x.RInt64
	}
	return nil
}

func (x *Repeats) GetRUint32() []uint32 {
	if x != nil {
		return x.RUint32
	}
	return nil
}

func (x *Repeats) GetRUint64() []uint64 {
	if x != nil {
		return x.RUint64
	}
	return nil
}

func (x *Repeats) GetRSint32() []int32 {
	if x != nil {
		return x.RSint32
	}
	return nil
}

func (x *Repeats) GetRSint64() []int64 {
	if x != nil {
		return x.RSint64
	}
	return nil
}

func (x *Repeats) GetRFloat() []float32 {
	if x != nil {
		return x.RFloat
	}
	return nil
}

func (x *Repeats) GetRDouble() []float64 {
	if x != nil {
		return x.RDouble
	}
	return nil
}

func (x *Repeats) GetRString() []string {
	if x != nil {
		return x.RString
	}
	return nil
}

func (x *Repeats) GetRBytes() [][]byte {
	if x != nil {
		return x.RBytes
	}
	return nil
}

// Test message for holding enums and nested messages.
type Widget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color    *Widget_Color  `protobuf:"varint,1,opt,name=color,enum=jsonpb_test.Widget_Color" json:"color,omitempty"`
	RColor   []Widget_Color `protobuf:"varint,2,rep,name=r_color,json=rColor,enum=jsonpb_test.Widget_Color" json:"r_color,omitempty"`
	Simple   *Simple        `protobuf:"bytes,10,opt,name=simple" json:"simple,omitempty"`
	RSimple  []*Simple      `protobuf:"bytes,11,rep,name=r_simple,json=rSimple" json:"r_simple,omitempty"`
	Repeats  *Repeats       `protobuf:"bytes,20,opt,name=repeats" json:"repeats,omitempty"`
	RRepeats []*Repeats     `protobuf:"bytes,21,rep,name=r_repeats,json=rRepeats" json:"r_repeats,omitempty"`
}

func (x *Widget) Reset() {
	*x = Widget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonpb_proto_test2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Widget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Widget) ProtoMessage() {}

func (x *Widget) ProtoReflect() protoreflect.Message {
	mi := &file_jsonpb_proto_test2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Widget.ProtoReflect.Descriptor instead.
func (*Widget) Descriptor() ([]byte, []int) {
	return file_jsonpb_proto_test2_proto_rawDescGZIP(), []int{3}
}

func (x *Widget) GetColor() Widget_Color {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return Widget_RED
}

func (x *Widget) GetRColor() []Widget_Color {
	if x != nil {
		return x.RColor
	}
	return nil
}

func (x *Widget) GetSimple() *Simple {
	if x != nil {
		return x.Simple
	}
	return nil
}

func (x *Widget) GetRSimple() []*Simple {
	if x != nil {
		return x.RSimple
	}
	return nil
}

func (x *Widget) GetRepeats() *Repeats {
	if x != nil {
		return x.Repeats
	}
	return nil
}

func (x *Widget) GetRRepeats() []*Repeats {
	if x != nil {
		return x.RRepeats
	}
	return nil
}

type Maps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MInt64Str   map[int64]string `protobuf:"bytes,1,rep,name=m_int64_str,json=mInt64Str" json:"m_int64_str,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MBoolSimple map[bool]*Simple `protobuf:"bytes,2,rep,name=m_bool_simple,json=mBoolSimple" json:"m_bool_simple,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *Maps) Reset() {
	*x = Maps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonpb_proto_test2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Maps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Maps) ProtoMessage() {}

func (x *Maps) ProtoReflect() protoreflect.Message {
	mi := &file_jsonpb_proto_test2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Maps.ProtoReflect.Descriptor instead.
func (*Maps) Descriptor() ([]byte, []int) {
	return file_jsonpb_proto_test2_proto_rawDescGZIP(), []int{4}
}

func (x *Maps) GetMInt64Str() map[int64]string {
	if x != nil {
		return x.MInt64Str
	}
	return nil
}

func (x *Maps) GetMBoolSimple() map[bool]*Simple {
	if x != nil {
		return x.MBoolSimple
	}
	return nil
}

type MsgWithOneof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Union:
	//	*MsgWithOneof_Title
	//	*MsgWithOneof_Salary
	//	*MsgWithOneof_Country
	//	*MsgWithOneof_HomeAddress
	//	*MsgWithOneof_MsgWithRequired
	Union isMsgWithOneof_Union `protobuf_oneof:"union"`
}

func (x *MsgWithOneof) Reset() {
	*x = MsgWithOneof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonpb_proto_test2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgWithOneof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgWithOneof) ProtoMessage() {}

func (x *MsgWithOneof) ProtoReflect() protoreflect.Message {
	mi := &file_jsonpb_proto_test2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgWithOneof.ProtoReflect.Descriptor instead.
func (*MsgWithOneof) Descriptor() ([]byte, []int) {
	return file_jsonpb_proto_test2_proto_rawDescGZIP(), []int{5}
}

func (m *MsgWithOneof) GetUnion() isMsgWithOneof_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (x *MsgWithOneof) GetTitle() string {
	if x, ok := x.GetUnion().(*MsgWithOneof_Title); ok {
		return x.Title
	}
	return ""
}

func (x *MsgWithOneof) GetSalary() int64 {
	if x, ok := x.GetUnion().(*MsgWithOneof_Salary); ok {
		return x.Salary
	}
	return 0
}

func (x *MsgWithOneof) GetCountry() string {
	if x, ok := x.GetUnion().(*MsgWithOneof_Country); ok {
		return x.Country
	}
	return ""
}

func (x *MsgWithOneof) GetHomeAddress() string {
	if x, ok := x.GetUnion().(*MsgWithOneof_HomeAddress); ok {
		return x.HomeAddress
	}
	return ""
}

func (x *MsgWithOneof) GetMsgWithRequired() *MsgWithRequired {
	if x, ok := x.GetUnion().(*MsgWithOneof_MsgWithRequired); ok {
		return x.MsgWithRequired
	}
	return nil
}

type isMsgWithOneof_Union interface {
	isMsgWithOneof_Union()
}

type MsgWithOneof_Title struct {
	Title string `protobuf:"bytes,1,opt,name=title,oneof"`
}

type MsgWithOneof_Salary struct {
	Salary int64 `protobuf:"varint,2,opt,name=salary,oneof"`
}

type MsgWithOneof_Country struct {
	Country string `protobuf:"bytes,3,opt,name=Country,oneof"`
}

type MsgWithOneof_HomeAddress struct {
	HomeAddress string `protobuf:"bytes,4,opt,name=home_address,json=homeAddress,oneof"`
}

type MsgWithOneof_MsgWithRequired struct {
	MsgWithRequired *MsgWithRequired `protobuf:"bytes,5,opt,name=msg_with_required,json=msgWithRequired,oneof"`
}

func (*MsgWithOneof_Title) isMsgWithOneof_Union() {}

func (*MsgWithOneof_Salary) isMsgWithOneof_Union() {}

func (*MsgWithOneof_Country) isMsgWithOneof_Union() {}

func (*MsgWithOneof_HomeAddress) isMsgWithOneof_Union() {}

func (*MsgWithOneof_MsgWithRequired) isMsgWithOneof_Union() {}

type Real struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Value *float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
}

func (x *Real) Reset() {
	*x = Real{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonpb_proto_test2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Real) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Real) ProtoMessage() {}

func (x *Real) ProtoReflect() protoreflect.Message {
	mi := &file_jsonpb_proto_test2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Real.ProtoReflect.Descriptor instead.
func (*Real) Descriptor() ([]byte, []int) {
	return file_jsonpb_proto_test2_proto_rawDescGZIP(), []int{6}
}

var extRange_Real = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 536870911},
}

// Deprecated: Use Real.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*Real) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_Real
}

func (x *Real) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type Complex struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Imaginary *float64 `protobuf:"fixed64,1,opt,name=imaginary" json:"imaginary,omitempty"`
}

func (x *Complex) Reset() {
	*x = Complex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonpb_proto_test2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Complex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Complex) ProtoMessage() {}

func (x *Complex) ProtoReflect() protoreflect.Message {
	mi := &file_jsonpb_proto_test2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Complex.ProtoReflect.Descriptor instead.
func (*Complex) Descriptor() ([]byte, []int) {
	return file_jsonpb_proto_test2_proto_rawDescGZIP(), []int{7}
}

var extRange_Complex = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 536870911},
}

// Deprecated: Use Complex.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*Complex) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_Complex
}

func (x *Complex) GetImaginary() float64 {
	if x != nil && x.Imaginary != nil {
		return *x.Imaginary
	}
	return 0
}

type KnownTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	An    *any.Any              `protobuf:"bytes,14,opt,name=an" json:"an,omitempty"`
	Dur   *duration.Duration    `protobuf:"bytes,1,opt,name=dur" json:"dur,omitempty"`
	St    *_struct.Struct       `protobuf:"bytes,12,opt,name=st" json:"st,omitempty"`
	Ts    *timestamp.Timestamp  `protobuf:"bytes,2,opt,name=ts" json:"ts,omitempty"`
	Lv    *_struct.ListValue    `protobuf:"bytes,15,opt,name=lv" json:"lv,omitempty"`
	Val   *_struct.Value        `protobuf:"bytes,16,opt,name=val" json:"val,omitempty"`
	Dbl   *wrappers.DoubleValue `protobuf:"bytes,3,opt,name=dbl" json:"dbl,omitempty"`
	Flt   *wrappers.FloatValue  `protobuf:"bytes,4,opt,name=flt" json:"flt,omitempty"`
	I64   *wrappers.Int64Value  `protobuf:"bytes,5,opt,name=i64" json:"i64,omitempty"`
	U64   *wrappers.UInt64Value `protobuf:"bytes,6,opt,name=u64" json:"u64,omitempty"`
	I32   *wrappers.Int32Value  `protobuf:"bytes,7,opt,name=i32" json:"i32,omitempty"`
	U32   *wrappers.UInt32Value `protobuf:"bytes,8,opt,name=u32" json:"u32,omitempty"`
	Bool  *wrappers.BoolValue   `protobuf:"bytes,9,opt,name=bool" json:"bool,omitempty"`
	Str   *wrappers.StringValue `protobuf:"bytes,10,opt,name=str" json:"str,omitempty"`
	Bytes *wrappers.BytesValue  `protobuf:"bytes,11,opt,name=bytes" json:"bytes,omitempty"`
}

func (x *KnownTypes) Reset() {
	*x = KnownTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonpb_proto_test2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnownTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnownTypes) ProtoMessage() {}

func (x *KnownTypes) ProtoReflect() protoreflect.Message {
	mi := &file_jsonpb_proto_test2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnownTypes.ProtoReflect.Descriptor instead.
func (*KnownTypes) Descriptor() ([]byte, []int) {
	return file_jsonpb_proto_test2_proto_rawDescGZIP(), []int{8}
}

func (x *KnownTypes) GetAn() *any.Any {
	if x != nil {
		return x.An
	}
	return nil
}

func (x *KnownTypes) GetDur() *duration.Duration {
	if x != nil {
		return x.Dur
	}
	return nil
}

func (x *KnownTypes) GetSt() *_struct.Struct {
	if x != nil {
		return x.St
	}
	return nil
}

func (x *KnownTypes) GetTs() *timestamp.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *KnownTypes) GetLv() *_struct.ListValue {
	if x != nil {
		return x.Lv
	}
	return nil
}

func (x *KnownTypes) GetVal() *_struct.Value {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *KnownTypes) GetDbl() *wrappers.DoubleValue {
	if x != nil {
		return x.Dbl
	}
	return nil
}

func (x *KnownTypes) GetFlt() *wrappers.FloatValue {
	if x != nil {
		return x.Flt
	}
	return nil
}

func (x *KnownTypes) GetI64() *wrappers.Int64Value {
	if x != nil {
		return x.I64
	}
	return nil
}

func (x *KnownTypes) GetU64() *wrappers.UInt64Value {
	if x != nil {
		return x.U64
	}
	return nil
}

func (x *KnownTypes) GetI32() *wrappers.Int32Value {
	if x != nil {
		return x.I32
	}
	return nil
}

func (x *KnownTypes) GetU32() *wrappers.UInt32Value {
	if x != nil {
		return x.U32
	}
	return nil
}

func (x *KnownTypes) GetBool() *wrappers.BoolValue {
	if x != nil {
		return x.Bool
	}
	return nil
}

func (x *KnownTypes) GetStr() *wrappers.StringValue {
	if x != nil {
		return x.Str
	}
	return nil
}

func (x *KnownTypes) GetBytes() *wrappers.BytesValue {
	if x != nil {
		return x.Bytes
	}
	return nil
}

// Test messages for marshaling/unmarshaling required fields.
type MsgWithRequired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str *string `protobuf:"bytes,1,req,name=str" json:"str,omitempty"`
}

func (x *MsgWithRequired) Reset() {
	*x = MsgWithRequired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonpb_proto_test2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgWithRequired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgWithRequired) ProtoMessage() {}

func (x *MsgWithRequired) ProtoReflect() protoreflect.Message {
	mi := &file_jsonpb_proto_test2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgWithRequired.ProtoReflect.Descriptor instead.
func (*MsgWithRequired) Descriptor() ([]byte, []int) {
	return file_jsonpb_proto_test2_proto_rawDescGZIP(), []int{9}
}

func (x *MsgWithRequired) GetStr() string {
	if x != nil && x.Str != nil {
		return *x.Str
	}
	return ""
}

type MsgWithIndirectRequired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subm       *MsgWithRequired            `protobuf:"bytes,1,opt,name=subm" json:"subm,omitempty"`
	MapField   map[string]*MsgWithRequired `protobuf:"bytes,2,rep,name=map_field,json=mapField" json:"map_field,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SliceField []*MsgWithRequired          `protobuf:"bytes,3,rep,name=slice_field,json=sliceField" json:"slice_field,omitempty"`
}

func (x *MsgWithIndirectRequired) Reset() {
	*x = MsgWithIndirectRequired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonpb_proto_test2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgWithIndirectRequired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgWithIndirectRequired) ProtoMessage() {}

func (x *MsgWithIndirectRequired) ProtoReflect() protoreflect.Message {
	mi := &file_jsonpb_proto_test2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgWithIndirectRequired.ProtoReflect.Descriptor instead.
func (*MsgWithIndirectRequired) Descriptor() ([]byte, []int) {
	return file_jsonpb_proto_test2_proto_rawDescGZIP(), []int{10}
}

func (x *MsgWithIndirectRequired) GetSubm() *MsgWithRequired {
	if x != nil {
		return x.Subm
	}
	return nil
}

func (x *MsgWithIndirectRequired) GetMapField() map[string]*MsgWithRequired {
	if x != nil {
		return x.MapField
	}
	return nil
}

func (x *MsgWithIndirectRequired) GetSliceField() []*MsgWithRequired {
	if x != nil {
		return x.SliceField
	}
	return nil
}

type MsgWithRequiredBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Byts []byte `protobuf:"bytes,1,req,name=byts" json:"byts,omitempty"`
}

func (x *MsgWithRequiredBytes) Reset() {
	*x = MsgWithRequiredBytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonpb_proto_test2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgWithRequiredBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgWithRequiredBytes) ProtoMessage() {}

func (x *MsgWithRequiredBytes) ProtoReflect() protoreflect.Message {
	mi := &file_jsonpb_proto_test2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgWithRequiredBytes.ProtoReflect.Descriptor instead.
func (*MsgWithRequiredBytes) Descriptor() ([]byte, []int) {
	return file_jsonpb_proto_test2_proto_rawDescGZIP(), []int{11}
}

func (x *MsgWithRequiredBytes) GetByts() []byte {
	if x != nil {
		return x.Byts
	}
	return nil
}

type MsgWithRequiredWKT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str *wrappers.StringValue `protobuf:"bytes,1,req,name=str" json:"str,omitempty"`
}

func (x *MsgWithRequiredWKT) Reset() {
	*x = MsgWithRequiredWKT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jsonpb_proto_test2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgWithRequiredWKT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgWithRequiredWKT) ProtoMessage() {}

func (x *MsgWithRequiredWKT) ProtoReflect() protoreflect.Message {
	mi := &file_jsonpb_proto_test2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgWithRequiredWKT.ProtoReflect.Descriptor instead.
func (*MsgWithRequiredWKT) Descriptor() ([]byte, []int) {
	return file_jsonpb_proto_test2_proto_rawDescGZIP(), []int{12}
}

func (x *MsgWithRequiredWKT) GetStr() *wrappers.StringValue {
	if x != nil {
		return x.Str
	}
	return nil
}

var file_jsonpb_proto_test2_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*Real)(nil),
		ExtensionType: (*string)(nil),
		Field:         124,
		Name:          "jsonpb_test.name",
		Tag:           "bytes,124,opt,name=name",
		Filename:      "jsonpb_proto/test2.proto",
	},
	{
		ExtendedType:  (*Real)(nil),
		ExtensionType: (*MsgWithRequired)(nil),
		Field:         125,
		Name:          "jsonpb_test.extm",
		Tag:           "bytes,125,opt,name=extm",
		Filename:      "jsonpb_proto/test2.proto",
	},
	{
		ExtendedType:  (*Real)(nil),
		ExtensionType: (*Complex)(nil),
		Field:         123,
		Name:          "jsonpb_test.Complex.real_extension",
		Tag:           "bytes,123,opt,name=real_extension",
		Filename:      "jsonpb_proto/test2.proto",
	},
}

// Extension fields to Real.
var (
	// optional string name = 124;
	E_Name = &file_jsonpb_proto_test2_proto_extTypes[0]
	// optional jsonpb_test.MsgWithRequired extm = 125;
	E_Extm = &file_jsonpb_proto_test2_proto_extTypes[1]
	// optional jsonpb_test.Complex real_extension = 123;
	E_Complex_RealExtension = &file_jsonpb_proto_test2_proto_extTypes[2]
)

var File_jsonpb_proto_test2_proto protoreflect.FileDescriptor

var file_jsonpb_proto_test2_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6a, 0x73, 0x6f, 0x6e,
	0x70, 0x62, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xaf, 0x04, 0x0a, 0x06, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x6f, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x42,
	0x6f, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1e, 0x0a, 0x0b,
	0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x53, 0x74, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53,
	0x74, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x20, 0x0a,
	0x0c, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x07, 0x6f, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x0a, 0x6f, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07,
	0x6f, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x6f,
	0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6f, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x53,
	0x74, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x6f, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x0a, 0x4e, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x74,
	0x65, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x5f, 0x6e, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x04, 0x66, 0x4e, 0x61, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x5f, 0x70, 0x69, 0x6e,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x50, 0x69, 0x6e, 0x66, 0x12, 0x15,
	0x0a, 0x06, 0x66, 0x5f, 0x6e, 0x69, 0x6e, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x66, 0x4e, 0x69, 0x6e, 0x66, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x5f, 0x6e, 0x61, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x64, 0x4e, 0x61, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x5f,
	0x70, 0x69, 0x6e, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x64, 0x50, 0x69, 0x6e,
	0x66, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x5f, 0x6e, 0x69, 0x6e, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x64, 0x4e, 0x69, 0x6e, 0x66, 0x22, 0xa6, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x08, 0x52, 0x05, 0x72, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x72, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x72, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x07, 0x72, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x72, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x11, 0x52, 0x07, 0x72, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x03, 0x28, 0x12,
	0x52, 0x07, 0x72, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x72, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x01, 0x52, 0x07, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x22, 0xd4, 0x02, 0x0a, 0x06, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6a, 0x73,
	0x6f, 0x6e, 0x70, 0x62, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x32, 0x0a,
	0x07, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x62, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x62, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x2e,
	0x0a, 0x08, 0x72, 0x5f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x62, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x2e,
	0x0a, 0x07, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x62, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73, 0x12, 0x31,
	0x0a, 0x09, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x62, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73, 0x52, 0x08, 0x72, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x73, 0x22, 0x25, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x02, 0x22, 0xa3, 0x02, 0x0a, 0x04, 0x4d, 0x61, 0x70,
	0x73, 0x12, 0x40, 0x0a, 0x0b, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x62, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x4d, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x53, 0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x53, 0x74, 0x72, 0x12, 0x46, 0x0a, 0x0d, 0x6d, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x73, 0x6f,
	0x6e, 0x70, 0x62, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x4d, 0x42,
	0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x6d, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x10, 0x4d, 0x42, 0x6f,
	0x6f, 0x6c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x62, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6,
	0x01, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x12,
	0x16, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x61, 0x6c, 0x61, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x73, 0x61, 0x6c, 0x61, 0x72,
	0x79, 0x12, 0x1a, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x23, 0x0a,
	0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x68, 0x6f, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x6d, 0x73, 0x67, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x62, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x73, 0x67, 0x57,
	0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x6d,
	0x73, 0x67, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x08, 0x08, 0x64, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22,
	0x81, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2a, 0x08, 0x08, 0x64, 0x10, 0x80, 0x80,
	0x80, 0x80, 0x02, 0x32, 0x4e, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x62, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x62, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xba, 0x05, 0x0a, 0x0a, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x24, 0x0a, 0x02, 0x61, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x02, 0x61, 0x6e, 0x12, 0x2b, 0x0a, 0x03, 0x64, 0x75, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x03, 0x64, 0x75, 0x72, 0x12, 0x27, 0x0a, 0x02, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x02, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x02, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x6c, 0x76,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x02, 0x6c, 0x76, 0x12, 0x28, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x76, 0x61, 0x6c,
	0x12, 0x2e, 0x0a, 0x03, 0x64, 0x62, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x64, 0x62, 0x6c,
	0x12, 0x2d, 0x0a, 0x03, 0x66, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x66, 0x6c, 0x74, 0x12,
	0x2d, 0x0a, 0x03, 0x69, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x69, 0x36, 0x34, 0x12, 0x2e,
	0x0a, 0x03, 0x75, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x36, 0x34, 0x12, 0x2d,
	0x0a, 0x03, 0x69, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x69, 0x33, 0x32, 0x12, 0x2e, 0x0a,
	0x03, 0x75, 0x33, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x33, 0x32, 0x12, 0x2e, 0x0a,
	0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x2e, 0x0a,
	0x03, 0x73, 0x74, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x31, 0x0a,
	0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x22, 0x23, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x74, 0x72, 0x22, 0xb6, 0x02, 0x0a, 0x17, 0x4d, 0x73, 0x67, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x75, 0x62, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x62, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x73,
	0x67, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x04, 0x73,
	0x75, 0x62, 0x6d, 0x12, 0x4f, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x62, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x73, 0x67, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x70,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x73, 0x6f, 0x6e,
	0x70, 0x62, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x73, 0x67, 0x57, 0x69, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x1a, 0x59, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x62, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x73, 0x67, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2a,
	0x0a, 0x14, 0x4d, 0x73, 0x67, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x79, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x79, 0x74, 0x73, 0x22, 0x44, 0x0a, 0x12, 0x4d, 0x73,
	0x67, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x57, 0x4b, 0x54,
	0x12, 0x2e, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x73, 0x74, 0x72,
	0x3a, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x11, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x70,
	0x62, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x18, 0x7c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x43, 0x0a, 0x04, 0x65, 0x78, 0x74, 0x6d, 0x12,
	0x11, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x62, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x61, 0x6c, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x70,
	0x62, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x73, 0x67, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x04, 0x65, 0x78, 0x74, 0x6d, 0x42, 0x45, 0x5a, 0x43,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d,
	0x69, 0x6f, 0x2f, 0x73, 0x6b, 0x76, 0x32, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x70, 0x62, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x62, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f,
}

var (
	file_jsonpb_proto_test2_proto_rawDescOnce sync.Once
	file_jsonpb_proto_test2_proto_rawDescData = file_jsonpb_proto_test2_proto_rawDesc
)

func file_jsonpb_proto_test2_proto_rawDescGZIP() []byte {
	file_jsonpb_proto_test2_proto_rawDescOnce.Do(func() {
		file_jsonpb_proto_test2_proto_rawDescData = protoimpl.X.CompressGZIP(file_jsonpb_proto_test2_proto_rawDescData)
	})
	return file_jsonpb_proto_test2_proto_rawDescData
}

var file_jsonpb_proto_test2_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_jsonpb_proto_test2_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_jsonpb_proto_test2_proto_goTypes = []interface{}{
	(Widget_Color)(0),               // 0: jsonpb_test.Widget.Color
	(*Simple)(nil),                  // 1: jsonpb_test.Simple
	(*NonFinites)(nil),              // 2: jsonpb_test.NonFinites
	(*Repeats)(nil),                 // 3: jsonpb_test.Repeats
	(*Widget)(nil),                  // 4: jsonpb_test.Widget
	(*Maps)(nil),                    // 5: jsonpb_test.Maps
	(*MsgWithOneof)(nil),            // 6: jsonpb_test.MsgWithOneof
	(*Real)(nil),                    // 7: jsonpb_test.Real
	(*Complex)(nil),                 // 8: jsonpb_test.Complex
	(*KnownTypes)(nil),              // 9: jsonpb_test.KnownTypes
	(*MsgWithRequired)(nil),         // 10: jsonpb_test.MsgWithRequired
	(*MsgWithIndirectRequired)(nil), // 11: jsonpb_test.MsgWithIndirectRequired
	(*MsgWithRequiredBytes)(nil),    // 12: jsonpb_test.MsgWithRequiredBytes
	(*MsgWithRequiredWKT)(nil),      // 13: jsonpb_test.MsgWithRequiredWKT
	nil,                             // 14: jsonpb_test.Maps.MInt64StrEntry
	nil,                             // 15: jsonpb_test.Maps.MBoolSimpleEntry
	nil,                             // 16: jsonpb_test.MsgWithIndirectRequired.MapFieldEntry
	(*any.Any)(nil),                 // 17: google.protobuf.Any
	(*duration.Duration)(nil),       // 18: google.protobuf.Duration
	(*_struct.Struct)(nil),          // 19: google.protobuf.Struct
	(*timestamp.Timestamp)(nil),     // 20: google.protobuf.Timestamp
	(*_struct.ListValue)(nil),       // 21: google.protobuf.ListValue
	(*_struct.Value)(nil),           // 22: google.protobuf.Value
	(*wrappers.DoubleValue)(nil),    // 23: google.protobuf.DoubleValue
	(*wrappers.FloatValue)(nil),     // 24: google.protobuf.FloatValue
	(*wrappers.Int64Value)(nil),     // 25: google.protobuf.Int64Value
	(*wrappers.UInt64Value)(nil),    // 26: google.protobuf.UInt64Value
	(*wrappers.Int32Value)(nil),     // 27: google.protobuf.Int32Value
	(*wrappers.UInt32Value)(nil),    // 28: google.protobuf.UInt32Value
	(*wrappers.BoolValue)(nil),      // 29: google.protobuf.BoolValue
	(*wrappers.StringValue)(nil),    // 30: google.protobuf.StringValue
	(*wrappers.BytesValue)(nil),     // 31: google.protobuf.BytesValue
}
var file_jsonpb_proto_test2_proto_depIdxs = []int32{
	0,  // 0: jsonpb_test.Widget.color:type_name -> jsonpb_test.Widget.Color
	0,  // 1: jsonpb_test.Widget.r_color:type_name -> jsonpb_test.Widget.Color
	1,  // 2: jsonpb_test.Widget.simple:type_name -> jsonpb_test.Simple
	1,  // 3: jsonpb_test.Widget.r_simple:type_name -> jsonpb_test.Simple
	3,  // 4: jsonpb_test.Widget.repeats:type_name -> jsonpb_test.Repeats
	3,  // 5: jsonpb_test.Widget.r_repeats:type_name -> jsonpb_test.Repeats
	14, // 6: jsonpb_test.Maps.m_int64_str:type_name -> jsonpb_test.Maps.MInt64StrEntry
	15, // 7: jsonpb_test.Maps.m_bool_simple:type_name -> jsonpb_test.Maps.MBoolSimpleEntry
	10, // 8: jsonpb_test.MsgWithOneof.msg_with_required:type_name -> jsonpb_test.MsgWithRequired
	17, // 9: jsonpb_test.KnownTypes.an:type_name -> google.protobuf.Any
	18, // 10: jsonpb_test.KnownTypes.dur:type_name -> google.protobuf.Duration
	19, // 11: jsonpb_test.KnownTypes.st:type_name -> google.protobuf.Struct
	20, // 12: jsonpb_test.KnownTypes.ts:type_name -> google.protobuf.Timestamp
	21, // 13: jsonpb_test.KnownTypes.lv:type_name -> google.protobuf.ListValue
	22, // 14: jsonpb_test.KnownTypes.val:type_name -> google.protobuf.Value
	23, // 15: jsonpb_test.KnownTypes.dbl:type_name -> google.protobuf.DoubleValue
	24, // 16: jsonpb_test.KnownTypes.flt:type_name -> google.protobuf.FloatValue
	25, // 17: jsonpb_test.KnownTypes.i64:type_name -> google.protobuf.Int64Value
	26, // 18: jsonpb_test.KnownTypes.u64:type_name -> google.protobuf.UInt64Value
	27, // 19: jsonpb_test.KnownTypes.i32:type_name -> google.protobuf.Int32Value
	28, // 20: jsonpb_test.KnownTypes.u32:type_name -> google.protobuf.UInt32Value
	29, // 21: jsonpb_test.KnownTypes.bool:type_name -> google.protobuf.BoolValue
	30, // 22: jsonpb_test.KnownTypes.str:type_name -> google.protobuf.StringValue
	31, // 23: jsonpb_test.KnownTypes.bytes:type_name -> google.protobuf.BytesValue
	10, // 24: jsonpb_test.MsgWithIndirectRequired.subm:type_name -> jsonpb_test.MsgWithRequired
	16, // 25: jsonpb_test.MsgWithIndirectRequired.map_field:type_name -> jsonpb_test.MsgWithIndirectRequired.MapFieldEntry
	10, // 26: jsonpb_test.MsgWithIndirectRequired.slice_field:type_name -> jsonpb_test.MsgWithRequired
	30, // 27: jsonpb_test.MsgWithRequiredWKT.str:type_name -> google.protobuf.StringValue
	1,  // 28: jsonpb_test.Maps.MBoolSimpleEntry.value:type_name -> jsonpb_test.Simple
	10, // 29: jsonpb_test.MsgWithIndirectRequired.MapFieldEntry.value:type_name -> jsonpb_test.MsgWithRequired
	7,  // 30: jsonpb_test.name:extendee -> jsonpb_test.Real
	7,  // 31: jsonpb_test.extm:extendee -> jsonpb_test.Real
	7,  // 32: jsonpb_test.Complex.real_extension:extendee -> jsonpb_test.Real
	10, // 33: jsonpb_test.extm:type_name -> jsonpb_test.MsgWithRequired
	8,  // 34: jsonpb_test.Complex.real_extension:type_name -> jsonpb_test.Complex
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	33, // [33:35] is the sub-list for extension type_name
	30, // [30:33] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_jsonpb_proto_test2_proto_init() }
func file_jsonpb_proto_test2_proto_init() {
	if File_jsonpb_proto_test2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_jsonpb_proto_test2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Simple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jsonpb_proto_test2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonFinites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jsonpb_proto_test2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repeats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jsonpb_proto_test2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Widget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jsonpb_proto_test2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Maps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jsonpb_proto_test2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgWithOneof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jsonpb_proto_test2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Real); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_jsonpb_proto_test2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Complex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_jsonpb_proto_test2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KnownTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jsonpb_proto_test2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgWithRequired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jsonpb_proto_test2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgWithIndirectRequired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jsonpb_proto_test2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgWithRequiredBytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jsonpb_proto_test2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgWithRequiredWKT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_jsonpb_proto_test2_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*MsgWithOneof_Title)(nil),
		(*MsgWithOneof_Salary)(nil),
		(*MsgWithOneof_Country)(nil),
		(*MsgWithOneof_HomeAddress)(nil),
		(*MsgWithOneof_MsgWithRequired)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jsonpb_proto_test2_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 3,
			NumServices:   0,
		},
		GoTypes:           file_jsonpb_proto_test2_proto_goTypes,
		DependencyIndexes: file_jsonpb_proto_test2_proto_depIdxs,
		EnumInfos:         file_jsonpb_proto_test2_proto_enumTypes,
		MessageInfos:      file_jsonpb_proto_test2_proto_msgTypes,
		ExtensionInfos:    file_jsonpb_proto_test2_proto_extTypes,
	}.Build()
	File_jsonpb_proto_test2_proto = out.File
	file_jsonpb_proto_test2_proto_rawDesc = nil
	file_jsonpb_proto_test2_proto_goTypes = nil
	file_jsonpb_proto_test2_proto_depIdxs = nil
}
