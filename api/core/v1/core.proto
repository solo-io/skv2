syntax = "proto3";

package core.skv2.solo.io;

option go_package = "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1";

import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

import "extproto/ext.proto";
option (extproto.hash_all) = true;
option (extproto.equal_all) = true;
option (extproto.clone_all) = true;

// Resource reference for an object
message ObjectRef {

    // name of the resource being referenced
    string name = 1;

    // namespace of the resource being referenced
    string namespace = 2;
}

// Object providing a list of object refs.
// Used to store lists of refs inside a map.
message ObjectRefList {
    repeated ObjectRef refs = 1;
}

// Resource reference for a cross-cluster-scoped object
message ClusterObjectRef {

    // name of the resource being referenced
    string name = 1;

    // namespace of the resource being referenced
    string namespace = 2;

    // name of the cluster in which the resource exists
    string cluster_name = 3;
}

// Resource reference for a typed object
message TypedObjectRef {

    // API group of the resource being referenced
    google.protobuf.StringValue api_group = 1;

    // Kind of the resource being referenced
    google.protobuf.StringValue kind = 2;

    // name of the resource being referenced
    string name = 3;

    // namespace of the resource being referenced
    string namespace = 4;
}

// Resource reference for a typed, cross-cluster-scoped object
message TypedClusterObjectRef {

    // API group of the resource being referenced
    google.protobuf.StringValue api_group = 1;

    // Kind of the resource being referenced
    google.protobuf.StringValue kind = 2;

    // name of the resource being referenced
    string name = 3;

    // namespace of the resource being referenced
    string namespace = 4;

    // name of the cluster in which the resource exists
    string cluster_name = 5;
}

// A generic status
message Status {

    // The State of a reconciled object
    enum State {
        // Waiting to be processed.
        PENDING = 0;

        // Currently processing.
        PROCESSING = 1;

        // Invalid parameters supplied, will not continue.
        INVALID = 2;

        // Failed during processing.
        FAILED = 3;

        // Finished processing successfully.
        ACCEPTED = 4;
    }

    // The current state of the resource
    State state = 1;

    // A human readable message about the current state of the object
    string message = 2;

    // The most recently observed generation of the resource. This value corresponds to the `metadata.generation` of
    // a kubernetes resource
    int64 observed_generation = 3;

    // The time at which this status was recorded
    google.protobuf.Timestamp processing_time = 4;

    // (optional) The owner of the status, this value can be used to identify the entity which wrote this status.
    // This is useful in situations where a given resource may have multiple owners.
    google.protobuf.StringValue owner = 5;
}

// Select K8s Objects by namespace, labels, or both.
message ObjectSelector {

    // Select Objects in these namespaces. If omitted, Gloo Mesh will only select Objects in the same namespace
    // as the parent resource (e.g. VirtualGateway) that owns this selector.
    // The reserved value "*" can be used to select objects in all namespaces watched by Gloo Mesh.
    repeated string namespaces = 1;

    // Select objects whose labels match the ones specified here.
    map<string, string> labels = 2;

    // Expressions allow for more flexible object label matching, such as equality-based requirements, set-based requirements, or a combination of both.
    // https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#equality-based-requirement
    repeated Expression expressions = 3;

    message Expression {
        // Kubernetes label key, must conform to Kubernetes syntax requirements
        // https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set
        string key = 1;
        // The operator can only be in, notin, =, ==, !=, exists, ! (DoesNotExist), gt (GreaterThan), lt (LessThan).
        Operator operator = 2;
        repeated string values = 3;

        // Object Selector expression operator, while the set-based syntax differs from Kubernetes (kubernetes: `key: !mylabel`, gloo: `key: mylabel, operator: "!"` | kubernetes: `key: mylabel`, gloo: `key: mylabel, operator: exists`), the functionality remains the same.
        enum Operator {
            // =
            Equals = 0;
            // ==
            DoubleEquals = 1;
            // !=
            NotEquals = 2;
            // in
            In = 3;
            // notin
            NotIn = 4;
            // exists
            Exists = 5;
            // !
            DoesNotExist = 6;
            // gt
            GreaterThan = 7;
            // lt
            LessThan = 8;
        }
    }
}

