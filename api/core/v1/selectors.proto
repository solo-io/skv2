syntax = "proto3";
package common.mesh.gloo.solo.io;
option go_package = "github.com/solo-io/gloo-mesh/pkg/api/common.mesh.gloo.solo.io/v1";

import "google/protobuf/wrappers.proto";
import "github.com/solo-io/skv2/api/core/v1/core.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;

// Select Destinations using one or more platform-specific selectors.
message DestinationSelector {

  // Match Kubernetes Services by their labels, namespaces, and/or clusters.
  KubeServiceMatcher kube_service_matcher = 1;

  // Match Kubernetes Services by direct reference.
  KubeServiceRefs kube_service_refs = 2;

  // Match Kubernetes Services by their labels, namespaces, and/or clusters.
  message KubeServiceMatcher {

    /*
        If specified, a match requires all labels to exist on a Kubernetes Service.
        When used in a networking policy, omission matches any labels.
        When used in a Gloo Mesh Role, a wildcard (`"*"`) must be specified to match any label key and/or value.
    */
    map<string, string> labels = 1;

    /*
        If specified, match Kubernetes Services if they exist in one of the specified namespaces.
        When used in a networking policy, omission matches any namespace.
        When used in a Gloo Mesh Role, a wildcard (`"*"`) must be specified to match any namespace.
    */
    repeated string namespaces = 2;

    /*
        If specified, match Kubernetes Services if they exist in one of the specified clusters.
        When used in a networking policy, omission matches any cluster.
        When used in a Gloo Mesh Role, a wildcard (`"*"`) must be specified to match any cluster.
    */
    repeated string clusters = 3;
  }

  // Match Kubernetes Services by direct reference.
  message KubeServiceRefs {
    /*
        Match Kubernetes Services by direct reference. All fields are required.
        When used in a Gloo Mesh Role, a wildcard (`"*"`) must be specified to match any value for the given field.
    */
    repeated .core.skv2.solo.io.ClusterObjectRef services = 1;
  }
}

// Select Workloads using one or more platform-specific selectors.
message WorkloadSelector {

  // Match Kubernetes workloads by their labels, namespaces, and/or clusters.
  KubeWorkloadMatcher kube_workload_matcher = 1;

  // Match Kubernetes workloads by their labels, namespaces, and/or clusters.
  message KubeWorkloadMatcher {
    /*
    If specified, all labels must exist on Kubernetes workload.
    When used in a networking policy, omission matches any labels.
    When used in a Gloo Mesh Role, a wildcard (`"*"`) must be specified to match any label key and/or value.
*/
    map<string, string> labels = 1;

    /*
        If specified, match Kubernetes workloads if they exist in one of the specified namespaces.
        When used in a networking policy, omission matches any namespace.
        When used in a Gloo Mesh Role, a wildcard (`"*"`) must be specified to match any namespace.
    */
    repeated string namespaces = 2;

    /*
        If specified, match Kubernetes workloads if they exist in one of the specified clusters.
        When used in a networking policy, omission matches any cluster.
        When used in a Gloo Mesh Role, a wildcard (`"*"`) must be specified to match any cluster.
    */
    repeated string clusters = 3;
  }
}

// Select Destination identities using one or more platform-specific selectors.
message IdentitySelector {

  // Match request identities based on the Kubernetes namespace and cluster.
  KubeIdentityMatcher kube_identity_matcher = 1;

  // Match request identities based on the Kubernetes service account of the request.
  KubeServiceAccountRefs kube_service_account_refs = 2;

  message KubeIdentityMatcher {

    /*
        If specified, match a Kubernetes identity if it exists in one of the specified namespaces.
        When used in a networking policy, omission matches any namespace.
        When used in a Gloo Mesh Role, a wildcard (`"*"`) must be specified to match any namespace.
    */
    repeated string namespaces = 1;

    /*
        If specified, match a Kubernetes identity if it exists in one of the specified clusters.
        When used in a networking policy, omission matches any cluster.
        When used in a Gloo Mesh Role, a wildcard (`"*"`) must be specified to match any cluster.
    */
    repeated string clusters = 2;
  }

  message KubeServiceAccountRefs {
    /*
        Match Kubernetes service accounts by direct reference.
        When used in a networking policy, omission of any field (name, namespace, or clusterName) allows matching any value for that field.
        When used in a Gloo Mesh Role, a wildcard (`"*"`) must be specified to match any value for the given field.
    */
    repeated .core.skv2.solo.io.ClusterObjectRef service_accounts = 1;
  }
}

// Select K8s Objects by namespace, labels, or both.
message ObjectSelector {

  // Select Objects in these namespaces. If omitted, Gloo Mesh will only select Objects in the same namespace
  // as the parent resource (e.g. VirtualGateway) that owns this selector.
  // The reserved value "*" can be used to select objects in all namespaces watched by Gloo Mesh.
  repeated string namespaces = 1;

  // Select objects whose labels match the ones specified here.
  map<string, string> labels = 2;

  // Expressions allow for more flexible object label matching, such as equality-based requirements, set-based requirements, or a combination of both.
  // https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#equality-based-requirement
  repeated Expression expressions = 3;

  message Expression {
    // Kubernetes label key, must conform to Kubernetes syntax requirements
    // https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set
    string key = 1;
    // The operator can only be in, notin, =, ==, !=, exists, ! (DoesNotExist), gt (GreaterThan), lt (LessThan).
    Operator operator = 2;
    repeated string values = 3;

    // Object Selector expression operator, while the set-based syntax differs from Kubernetes (kubernetes: `key: !mylabel`, gloo: `key: mylabel, operator: "!"` | kubernetes: `key: mylabel`, gloo: `key: mylabel, operator: exists`), the functionality remains the same.
    enum Operator {
      // =
      Equals = 0;
      // ==
      DoubleEquals = 1;
      // !=
      NotEquals = 2;
      // in
      In = 3;
      // notin
      NotIn = 4;
      // exists
      Exists = 5;
      // !
      DoesNotExist = 6;
      // gt
      GreaterThan = 7;
      // lt
      LessThan = 8;
    }
  }
}
