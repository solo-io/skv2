syntax = "proto3";
package multicluster.solo.io;

import "extproto/ext.proto";
option (extproto.hash_all) = true;
option (extproto.equal_all) = true;

option go_package = "github.com/solo-io/skv2/pkg/api/multicluster.solo.io/v1alpha1";

import "github.com/solo-io/skv2/api/core/v1/core.proto";

/*
    Representation of a Kubernetes cluster that has been registered.
*/
message KubernetesClusterSpec {

    // Metadata for clusters provisioned from cloud providers.
    message ProviderInfo {

        // Metadata specific to a cloud provider.
        oneof provider_info_type {
            // Provider info for an AWS EKS provisioned cluster.
            Eks eks = 1;
        }
    }

    // AWS metadata associated with an EKS provisioned cluster.
    message Eks {
        // AWS ARN.
        string arn = 1;

        // AWS 12 digit account ID.
        string account_id = 2;

        // AWS region.
        string region = 3;

        // EKS resource name.
        string name = 4;
    }

    // name of the secret which contains the kubeconfig with information to connect to the remote cluster.
    string secret_name = 1;

    // name local DNS suffix used by the cluster.
    // used for building FQDNs for in-cluster services
    // defaults to 'cluster.local'
    string cluster_domain = 2;

    // Metadata for clusters provisioned from cloud providers.
    ProviderInfo provider_info = 3;
}

message KubernetesClusterStatus {
    // List of statuses about the kubernetes cluster.
    // This list allows for multiple applications/pods to record their connection status.
    repeated core.skv2.solo.io.Status status = 1;

    // The namespace in which cluster registration resources were created.
    string namespace = 2;

    // The set of PolicyRules attached to ClusterRoles when this cluster was registered.
    repeated PolicyRule policy_rules = 3;
}

/*
    Copy pasted from the official kubernetes definition:
    https://github.com/kubernetes/api/blob/697df40f2d58d7d48b180b83d7b9b2b5ff812923/rbac/v1alpha1/generated.proto#L98
    PolicyRule holds information that describes a policy rule, but does not contain information
    about who the rule applies to or which namespace the rule applies to.
    */
message PolicyRule {
    // Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
    repeated string verbs = 1;

    // APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of
    // the enumerated resources in any API group will be allowed.
    // +optional
    repeated string api_groups = 2;

    // Resources is a list of resources this rule applies to.  ResourceAll represents all resources.
    // +optional
    repeated string resources = 3;

    // ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
    // +optional
    repeated string resource_names = 4;

    // NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path
    // Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding.
    // Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
    // +optional
    repeated string non_resource_urls = 5;
}
