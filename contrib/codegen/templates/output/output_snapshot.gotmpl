// Definitions for Output Snapshots
package output

{{ $groups := imported_groups }}

import (
	"context"

    "github.com/rotisserie/eris"
    "github.com/solo-io/skv2/contrib/pkg/sets"
    "github.com/solo-io/skv2/pkg/ezkube"
    "github.com/solo-io/service-mesh-hub/codegen/pkg/output"
    "sigs.k8s.io/controller-runtime/pkg/client"


{{- range $group := $groups }}
{{ $type_import_prefix := group_import_name $group }}
{{ $set_import_prefix := (printf "%v_sets" (group_import_name $group)) }}
    {{ $type_import_prefix }} "{{ group_import_path $group }}"
    {{ $set_import_prefix }} "{{ set_import_path $group }}"
{{- end }}

)

// this error can occur if constructing a Partitioned Snapshot from a resource
// that is missing the partition label
var MissingRequiredLabelError = func(labelKey, resourceKind string, obj ezkube.ResourceId) error {
    return eris.Errorf("expected label %v not on labels of %v %v", labelKey, resourceKind, sets.Key(obj))
}

// the snapshot of output resources produced by a translation
type Snapshot interface {
{{/* generate a getter for each resource */}}
{{- range $group := $groups }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
    // return the set of {{ $kindPlural }} with a given set of labels
    {{ $kindPlural }}() []Labeled{{ $resource.Kind }}Set
{{- end }}
{{- end }}

    // apply the snapshot to the cluster, garbage collecting stale resources
    Apply(ctx context.Context, clusterClient client.Client) error
}

type snapshot struct {
    name string
{{/* generate fields of the real snapshot impl here */}}
{{- range $group := $groups }}
{{- range $resource := $group.Resources }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    {{ $kindLowerCamelPlural }} []Labeled{{ $resource.Kind }}Set
{{- end }}
{{- end }}

}

func NewSnapshot(
	name string,
{{/* generate constructor params here */}}
{{- range $group := $groups }}
{{- range $resource := $group.Resources }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    {{ $kindLowerCamelPlural }} []Labeled{{ $resource.Kind }}Set,
{{- end }}
{{- end }}

) Snapshot {
    return &snapshot{
    	name: name,
{{/* add constructor params here */}}
{{- range $group := $groups }}
{{- range $resource := $group.Resources }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    {{ $kindLowerCamelPlural }}:  {{ $kindLowerCamelPlural }},
{{- end }}
{{- end }}
    }
}

// automatically partitions the input resources
// by the presence of the provided label.
func NewLabelPartitionedSnapshot(
	name,
	labelKey string, // the key by which to partition the resources
{{/* generate partitioned constructor params here */}}
{{- range $group := $groups }}
{{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
{{- range $resource := $group.Resources }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    {{ $kindLowerCamelPlural }} {{ $set_import_prefix }}.{{ $resource.Kind }}Set,
{{- end }}
{{- end }}

) (Snapshot, error) {

{{/* convert input sets to partioned output sets */}}
{{- range $group := $groups }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    partitioned{{ $kindPlural }}, err := partition{{ $kindPlural }}ByLabel(labelKey, {{ $kindLowerCamelPlural }})
    if err != nil {
    	return nil, err
    }
{{- end }}
{{- end }}

    return NewSnapshot(
    	name,
{{/* args for NewSnapshot */}}
{{- range $group := $groups }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
        partitioned{{ $kindPlural }},
{{- end }}
{{- end }}
    ), nil
}


// apply the desired resources to the cluster state; remove stale resources where necessary
func (s *snapshot) Apply(ctx context.Context, cli client.Client) error {
    var genericLists []output.ResourceList

{{/* generate each list conversion */}}
{{- range $group := $groups }}
{{- range $resource := $group.Resources }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    for _, outputSet := range s.{{ $kindLowerCamelPlural }} {
        genericLists = append(genericLists,  outputSet.Generic())
    }
{{- end }}
{{- end }}

    return output.Snapshot{
        Name:        s.name,
        ListsToSync: genericLists,
    }.Sync(ctx, cli)
}

{{/* generate conversion funcs which partition each individual set */}}
{{- range $group := $groups }}
{{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}

func partition{{ $kindPlural }}ByLabel(labelKey string, set {{ $set_import_prefix }}.{{ $resource.Kind }}Set) ([]Labeled{{ $resource.Kind }}Set, error) {
    setsByLabel := map[string]{{ $set_import_prefix }}.{{ $resource.Kind }}Set{}

    for _, obj := range set.List() {
        if obj.Labels == nil {
            return nil, MissingRequiredLabelError(labelKey, "{{ $resource.Kind }}", obj)
        }
        labelValue := obj.Labels[labelKey]
        if labelValue == "" {
            return nil, MissingRequiredLabelError(labelKey, "{{ $resource.Kind }}", obj)
        }

        setForValue, ok := setsByLabel[labelValue]
        if !ok {
            setForValue = {{ $set_import_prefix }}.New{{ $resource.Kind }}Set()
            setsByLabel[labelValue] = setForValue
        }
        setForValue.Insert(obj)
    }

    // partition by label key
    var partitioned{{ $kindPlural }} []Labeled{{ $resource.Kind }}Set

    for labelValue, setForValue := range setsByLabel {
        labels := map[string]string{labelKey: labelValue}

        partitionedSet, err := NewLabeled{{ $resource.Kind }}Set(setForValue, labels)
        if err != nil {
            return nil, err
        }

        partitioned{{ $kindPlural }} = append(partitioned{{ $kindPlural }}, partitionedSet)
    }

    // sort for idempotency
    sort.SliceStable(partitioned{{ $kindPlural }}, func(i, j int) bool {
        leftLabelValue := partitioned{{ $kindPlural }}[i].Labels()[labelKey]
        rightLabelValue := partitioned{{ $kindPlural }}[j].Labels()[labelKey]
        return leftLabelValue < rightLabelValue
    })

    return partitioned{{ $kindPlural }}, nil
}

{{- end }}
{{- end }}

{{/* generate getters here */}}
{{- range $group := $groups }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}

func (s snapshot) {{ $kindPlural }}() []Labeled{{ $resource.Kind }}Set {
    return s.{{ $kindLowerCamelPlural }}
}
{{- end }}
{{- end }}


{{/* generate labeled sets here */}}
{{- range $group := $groups }}
{{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
{{ $type_import_prefix := group_import_name $group }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}

// Labeled{{ $resource.Kind }}Set represents a set of {{ $kindLowerCamelPlural }}
// which share a common set of labels.
// These labels are used to find diffs between {{ $resource.Kind }}Sets.
type Labeled{{ $resource.Kind }}Set interface {
    // returns the set of Labels shared by this {{ $resource.Kind }}Set
    Labels() map[string]string

    // returns the set of {{ $resource.Kind }}es with the given labels
    Set() {{ $set_import_prefix }}.{{ $resource.Kind }}Set

    // converts the set to a generic format which can be applied by the Snapshot.Apply functions
    Generic() output.ResourceList
}

type labeled{{ $resource.Kind }}Set struct {
    set    {{ $set_import_prefix }}.{{ $resource.Kind }}Set
    labels map[string]string
}

func NewLabeled{{ $resource.Kind }}Set(set {{ $set_import_prefix }}.{{ $resource.Kind }}Set, labels map[string]string) (Labeled{{ $resource.Kind }}Set, error) {
    // validate that each {{ $resource.Kind }} contains the labels, else this is not a valid Labeled{{ $resource.Kind }}Set
    for _, item := range set.List() {
        for k, v := range labels {
            // k=v must be present in the item
            if item.Labels[k] != v {
                return nil, eris.Errorf("internal error: %v=%v missing on {{ $resource.Kind }} %v", k, v, item.Name)
            }
        }
    }

    return &labeled{{ $resource.Kind }}Set{set: set, labels: labels}, nil
}

func (l *labeled{{ $resource.Kind }}Set) Labels() map[string]string {
    return l.labels
}

func (l *labeled{{ $resource.Kind }}Set) Set() {{ $set_import_prefix }}.{{ $resource.Kind }}Set {
    return l.set
}

func (l labeled{{ $resource.Kind }}Set) Generic() output.ResourceList {
    var desiredResources []ezkube.Object
    for _, desired := range l.set.List() {
        desiredResources = append(desiredResources, desired)
    }

    // enable list func for garbage collection
    listFunc := func(ctx context.Context, cli client.Client) ([]ezkube.Object, error) {
        var list {{ $type_import_prefix }}.{{ $resource.Kind }}List
        if err := cli.List(ctx, &list, client.MatchingLabels(l.labels)); err != nil {
            return nil, err
        }
        var items []ezkube.Object
        for _, item := range list.Items {
            item := item // pike
            items = append(items, &item)
        }
        return items, nil
    }

    return output.ResourceList{
        Resources: desiredResources,
        ListFunc: listFunc,
    }
}

{{- end }}
{{- end }}