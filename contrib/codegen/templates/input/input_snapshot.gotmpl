{{ $snapshotName := snapshot_name }}
{{ $groups := imported_groups }}

// The Input {{ $snapshotName }}Snapshot contains the set of all:
{{- range $group := $groups }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
// * {{ $kindPlural }}
{{- end }}
{{- end }}
// read from a given cluster or set of clusters, across all namespaces.
//
// A snapshot can be constructed from either a single Manager (for a single cluster)
// or a ClusterWatcher (for multiple clusters) using the {{ $snapshotName }}SnapshotBuilder.
//
// Resources in a MultiCluster snapshot will have their ClusterName set to the
// name of the cluster from which the resource was read.

package {{ package }}

import (
    "context"
    "encoding/json"

    "k8s.io/apimachinery/pkg/runtime/schema"
    "github.com/solo-io/skv2/pkg/resource"
    "github.com/solo-io/skv2/pkg/verifier"

    "github.com/hashicorp/go-multierror"
{{ $needsControllerUtils := false }}
{{- range $group := $groups }}
{{- range $resource := $group.Resources }}
{{- if $resource.Status }}
{{ $needsControllerUtils = true }}
{{- end }}
{{- end }}
{{- end }}
{{- if $needsControllerUtils }}
    "github.com/solo-io/skv2/pkg/controllerutils"
{{- end }}
    "github.com/solo-io/skv2/pkg/multicluster"
    "sigs.k8s.io/controller-runtime/pkg/manager"
    "sigs.k8s.io/controller-runtime/pkg/client"

{{- range $group := $groups }}
{{ $client_import_prefix := group_import_name $group }}
{{ $types_import_prefix := printf "%v_types" (group_import_name $group) }}
{{ $set_import_prefix := (printf "%v_sets" (group_import_name $group)) }}
    {{ $types_import_prefix }} "{{ group_import_path $group }}"
    {{ $client_import_prefix }} "{{ client_import_path $group }}"
    {{ $set_import_prefix }} "{{ set_import_path $group }}"
{{- end }}

)

// SnapshotGVKs is a list of the GVKs included in this snapshot
var {{ $snapshotName }}SnapshotGVKs = []schema.GroupVersionKind{
    {{- range $group := $groups }}
    {{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
    {{- range $resource := $group.Resources }}
    {{- $kindPlural := pluralize $resource.Kind }}
    {{- $kindLowerCamel := lower_camel $resource.Kind }}
    {{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    schema.GroupVersionKind{
        Group: "{{ $resource.Group.Group }}",
        Version: "{{ $resource.Version }}",
        Kind: "{{ $resource.Kind }}",
    },
    {{- end }}
    {{- end }}
}

{{/* determine if snapshot contains status resources */}}
{{ $needs_sync_status := false }}
{{- range $group := $groups }}
{{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
{{- range $resource := $group.Resources }}
{{- if $resource.Status }}
{{ $needs_sync_status = true }}
{{- end }}
{{- end }}
{{- end }}

// the snapshot of input resources consumed by translation
type {{ $snapshotName }}Snapshot interface {
{{/* generate a getter for each resource */}}
{{- range $group := $groups }}
{{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
    // return the set of input {{ $kindPlural }}
    {{ $kindPlural }}() {{ $set_import_prefix }}.{{ $resource.Kind }}Set
{{- end }}
{{- end }}
{{- if $needs_sync_status }}
    // update the status of all input objects which support
    // the Status subresource (across multiple clusters)
    SyncStatusesMultiCluster(ctx context.Context, mcClient multicluster.Client, opts {{ $snapshotName }}SyncStatusOptions) error
    // update the status of all input objects which support
    // the Status subresource (in the local cluster)
    SyncStatuses(ctx context.Context, c client.Client, opts {{ $snapshotName }}SyncStatusOptions) error
{{- end }}
    // serialize the entire snapshot as JSON
    MarshalJSON() ([]byte, error)
}

// options for syncing input object statuses
type {{ $snapshotName }}SyncStatusOptions struct {
    {{/* generate fields of the real snapshot impl here */}}
    {{- range $group := $groups }}
    {{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
    {{- range $resource := $group.Resources }}
    // sync status of {{ $resource.Kind }} objects
    {{ $resource.Kind }} bool
    {{- end }}
    {{- end }}
}

type snapshot{{ $snapshotName }} struct {
    name string
{{/* generate fields of the real snapshot impl here */}}
{{- range $group := $groups }}
{{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
{{- range $resource := $group.Resources }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    {{ $kindLowerCamelPlural }} {{ $set_import_prefix }}.{{ $resource.Kind }}Set
{{- end }}
{{- end }}

}

func New{{ $snapshotName }}Snapshot(
	name string,
{{/* generate constructor params here */}}
{{- range $group := $groups }}
{{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
{{- range $resource := $group.Resources }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    {{ $kindLowerCamelPlural }} {{ $set_import_prefix }}.{{ $resource.Kind }}Set,
{{- end }}
{{- end }}

) {{ $snapshotName }}Snapshot {
    return &snapshot{{ $snapshotName }}{
    	name: name,
{{/* add constructor params here */}}
{{- range $group := $groups }}
{{- range $resource := $group.Resources }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    {{ $kindLowerCamelPlural }}:  {{ $kindLowerCamelPlural }},
{{- end }}
{{- end }}
    }
}

func New{{ $snapshotName }}SnapshotFromGeneric(
	name string,
    genericSnapshot resource.ClusterSnapshot,
) {{ $snapshotName }}Snapshot {
    {{- range $group := $groups }}
    {{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
    {{- range $resource := $group.Resources }}
    {{- $kindPlural := pluralize $resource.Kind }}
    {{- $kindLowerCamel := lower_camel $resource.Kind }}
    {{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    {{ $kindLowerCamel }}Set := {{ $set_import_prefix }}.New{{ $resource.Kind }}Set()
    {{- end }}
    {{- end }}


	for _, snapshot := range genericSnapshot {

    {{- range $group := $groups }}
    {{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
    {{ $types_import_prefix := printf "%v_types" (group_import_name $group) }}

    {{- range $resource := $group.Resources }}
    {{- $kindPlural := pluralize $resource.Kind }}
    {{- $kindLowerCamel := lower_camel $resource.Kind }}
    {{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    {{ $kindLowerCamelPlural }} := snapshot[schema.GroupVersionKind{
        Group: "{{ $resource.Group.Group }}",
        Version: "{{ $resource.Version }}",
        Kind: "{{ $resource.Kind }}",
    }]

    for _, {{ $kindLowerCamel }} := range {{ $kindLowerCamelPlural }} {
        {{ $kindLowerCamel }}Set.Insert({{ $kindLowerCamel }}.(*{{ $types_import_prefix }}.{{ $resource.Kind }}))
    }


    {{- end }}
    {{- end }}

    }
    return New{{ $snapshotName }}Snapshot(
    	name,
{{- range $group := $groups }}
{{- range $resource := $group.Resources }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    {{ $kindLowerCamel }}Set,
{{- end }}
{{- end }}
    )
}

{{/* generate getters here */}}
{{- range $group := $groups }}
{{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}

func (s snapshot{{ $snapshotName }}) {{ $kindPlural }}() {{ $set_import_prefix }}.{{ $resource.Kind }}Set {
    return s.{{ $kindLowerCamelPlural }}
}
{{- end }}
{{- end }}

{{- if $needs_sync_status }}

func (s snapshot{{ $snapshotName }}) SyncStatusesMultiCluster(ctx context.Context, mcClient multicluster.Client, opts {{ $snapshotName }}SyncStatusOptions) error {
	var errs error
    {{/* generate calls to update status here */}}
    {{- range $group := $groups }}
    {{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
    {{- range $resource := $group.Resources }}
    {{- $kindPlural := pluralize $resource.Kind }}
    {{- $kindLowerCamel := lower_camel $resource.Kind }}
    {{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    {{- if $resource.Status }}
    if opts.{{ $resource.Kind }} {
        for _, obj := range s.{{ $kindPlural }}().List() {
            clusterClient, err := mcClient.Cluster(obj.ClusterName)
            if err != nil {
                errs = multierror.Append(errs, err)
                continue
            }
            if _, err := controllerutils.UpdateStatus(ctx, clusterClient, obj); err != nil {
                errs = multierror.Append(errs, err)
            }
        }
    }
    {{- end }}
    {{- end }}
    {{- end }}
    return errs
}


func (s snapshot{{ $snapshotName }}) SyncStatuses(ctx context.Context, c client.Client, opts {{ $snapshotName }}SyncStatusOptions) error {
    var errs error
    {{/* generate calls to update status here */}}
    {{- range $group := $groups }}
    {{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
    {{- range $resource := $group.Resources }}
    {{- $kindPlural := pluralize $resource.Kind }}
    {{- $kindLowerCamel := lower_camel $resource.Kind }}
    {{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    {{- if $resource.Status }}
    if opts.{{ $resource.Kind }} {
        for _, obj := range s.{{ $kindPlural }}().List() {
            if _, err := controllerutils.UpdateStatus(ctx, c, obj); err != nil {
                errs = multierror.Append(errs, err)
            }
        }
    }
    {{- end }}
    {{- end }}
    {{- end }}
    return errs
}

{{- end }}

func (s snapshot{{ $snapshotName }}) MarshalJSON() ([]byte, error) {
    snapshotMap := map[string]interface{}{"name": s.name}
{{/* add map contents here */}}
{{- range $group := $groups }}
{{- range $resource := $group.Resources }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    snapshotMap["{{ $kindLowerCamelPlural }}"] = s.{{ $kindLowerCamelPlural }}.List()
{{- end }}
{{- end }}
	return json.Marshal(snapshotMap)
}

// builds the input snapshot from API Clients.
type {{ $snapshotName }}Builder interface {
    BuildSnapshot(ctx context.Context, name string, opts {{ $snapshotName }}BuildOptions) ({{ $snapshotName }}Snapshot, error)
}

// Options for building a snapshot
type {{ $snapshotName }}BuildOptions struct {
{{/* generate build options here */}}
{{- range $group := $groups }}
{{ $client_import_prefix := group_import_name $group }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    // List options for composing a snapshot from {{ $kindPlural }}
    {{ $kindPlural }} Resource{{ $snapshotName }}BuildOptions
{{- end }}
{{- end }}
}

// Options for reading resources of a given type
type Resource{{ $snapshotName }}BuildOptions struct {
{{/* generate build options here */}}
    // List options for composing a snapshot from a resource type
    ListOptions []client.ListOption

    // If provided, ensure the resource has been verified before adding it to snapshots
    Verifier verifier.ServerResourceVerifier
}

// build a snapshot from resources across multiple clusters
type multiCluster{{ $snapshotName }}Builder struct {
    clusters multicluster.Interface
    client   multicluster.Client
}

// Produces snapshots of resources across all clusters defined in the ClusterSet
func NewMultiCluster{{ $snapshotName }}Builder(
        clusters multicluster.Interface,
        client multicluster.Client,
) {{ $snapshotName }}Builder {
    return &multiCluster{{ $snapshotName }}Builder{
        clusters: clusters,
        client:   client,
    }
}

func (b *multiCluster{{ $snapshotName }}Builder) BuildSnapshot(ctx context.Context, name string, opts {{ $snapshotName }}BuildOptions) ({{ $snapshotName }}Snapshot, error) {
{{/* generate set initialization here */}}
{{- range $group := $groups }}
{{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    {{ $kindLowerCamelPlural }} := {{ $set_import_prefix }}.New{{ $resource.Kind }}Set()
{{- end }}
{{- end }}

    var errs error

    for _, cluster := range b.clusters.ListClusters() {

{{/* generate calls to insert funcs here */}}
{{- range $group := $groups }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
        if err := b.insert{{ $kindPlural }}FromCluster(ctx, cluster, {{ $kindLowerCamelPlural }}, opts.{{ $kindPlural }}); err != nil {
            errs = multierror.Append(errs, err)
        }
{{- end }}
{{- end }}

    }

    outputSnap := New{{ $snapshotName }}Snapshot(
        name,
{{/* generate params for snapshot constructor here */}}
{{- range $group := $groups }}
{{- range $resource := $group.Resources }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
        {{$kindLowerCamelPlural}},
{{- end }}
{{- end }}
    )

    return outputSnap, errs
}

{{/* generate insertion funcs here */}}
{{- range $group := $groups }}
{{ $client_import_prefix := group_import_name $group }}
{{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
func (b *multiCluster{{ $snapshotName }}Builder) insert{{ $kindPlural }}FromCluster(ctx context.Context, cluster string, {{ $kindLowerCamelPlural }} {{ $set_import_prefix }}.{{ $resource.Kind }}Set, opts Resource{{ $snapshotName }}BuildOptions) error {
    {{ $kindLowerCamel }}Client, err := {{ $client_import_prefix }}.NewMulticluster{{ $resource.Kind }}Client(b.client).Cluster(cluster)
    if err != nil {
        return err
    }

    if opts.Verifier != nil {
    	mgr, err := b.clusters.Cluster(cluster)
    	if err != nil {
    		return err
        }

        gvk := schema.GroupVersionKind{
            Group:   "{{ $resource.Group.Group }}",
            Version: "{{ $resource.Group.Version }}",
            Kind:    "{{ $resource.Kind }}",
        }

        if resourceRegistered, err := opts.Verifier.VerifyServerResource(
        	cluster,
        	mgr.GetConfig(),
        	gvk,
        ); err != nil{
            return err
        } else if !resourceRegistered {
            return nil
        }
    }

    {{ $kindLowerCamel }}List, err := {{ $kindLowerCamel }}Client.List{{ $resource.Kind }}(ctx, opts.ListOptions...)
    if err != nil {
        return err
    }

    for _, item := range {{ $kindLowerCamel }}List.Items {
        item := item               // pike
        item.ClusterName = cluster // set cluster for in-memory processing
        {{ $kindLowerCamelPlural }}.Insert(&item)
    }

    return nil
}

{{- end }}
{{- end }}


// build a snapshot from resources in a single cluster
type singleCluster{{ $snapshotName }}Builder struct {
    mgr manager.Manager
    clusterName string
}

// Produces snapshots of resources read from the manager for the given cluster
func NewSingleCluster{{ $snapshotName }}Builder(
        mgr manager.Manager,
) {{ $snapshotName }}Builder {
    return NewSingleCluster{{ $snapshotName }}BuilderWithClusterName(mgr, "")
}

// Produces snapshots of resources read from the manager for the given cluster.
// Snapshot resources will be marked with the given ClusterName.
func NewSingleCluster{{ $snapshotName }}BuilderWithClusterName(
        mgr manager.Manager,
        clusterName string,
) {{ $snapshotName }}Builder {
    return &singleCluster{{ $snapshotName }}Builder{
        mgr: mgr,
        clusterName: clusterName,
    }
}


func (b *singleCluster{{ $snapshotName }}Builder) BuildSnapshot(ctx context.Context, name string, opts {{ $snapshotName }}BuildOptions) ({{ $snapshotName }}Snapshot, error) {
{{/* generate set initialization here */}}
{{- range $group := $groups }}
{{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    {{ $kindLowerCamelPlural }} := {{ $set_import_prefix }}.New{{ $resource.Kind }}Set()
{{- end }}
{{- end }}

    var errs error

{{/* generate calls to insert funcs here */}}
{{- range $group := $groups }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    if err := b.insert{{ $kindPlural }}(ctx,  {{ $kindLowerCamelPlural }}, opts.{{ $kindPlural }}); err != nil {
        errs = multierror.Append(errs, err)
    }
{{- end }}
{{- end }}

    outputSnap := New{{ $snapshotName }}Snapshot(
        name,
{{/* generate params for snapshot constructor here */}}
{{- range $group := $groups }}
{{- range $resource := $group.Resources }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
        {{$kindLowerCamelPlural}},
{{- end }}
{{- end }}
    )

    return outputSnap, errs
}

{{/* generate insertion funcs here */}}
{{- range $group := $groups }}
{{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
{{ $client_import_prefix := group_import_name $group }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
func (b *singleCluster{{ $snapshotName }}Builder) insert{{ $kindPlural }}(ctx context.Context, {{ $kindLowerCamelPlural }} {{ $set_import_prefix }}.{{ $resource.Kind }}Set, opts Resource{{ $snapshotName }}BuildOptions) error {

    if opts.Verifier != nil {
        gvk := schema.GroupVersionKind{
            Group:   "{{ $resource.Group.Group }}",
            Version: "{{ $resource.Group.Version }}",
            Kind:    "{{ $resource.Kind }}",
        }

        if resourceRegistered, err := opts.Verifier.VerifyServerResource(
            "", // verify in the local cluster
            b.mgr.GetConfig(),
            gvk,
        ); err != nil{
            return err
        } else if !resourceRegistered {
            return nil
        }
    }

    {{ $kindLowerCamel }}List, err := {{ $client_import_prefix }}.New{{ $resource.Kind }}Client(b.mgr.GetClient()).List{{ $resource.Kind }}(ctx, opts.ListOptions...)
    if err != nil {
        return err
    }

    for _, item := range {{ $kindLowerCamel }}List.Items {
        item := item               // pike
        item.ClusterName = b.clusterName
        {{ $kindLowerCamelPlural }}.Insert(&item)
    }

    return nil
}

{{- end }}
{{- end }}


// build a snapshot from resources in a single cluster
type inMemory{{ $snapshotName }}Builder struct {
    getSnapshot func() (resource.ClusterSnapshot, error)
}

// Produces snapshots of resources read from the manager for the given cluster
func NewInMemory{{ $snapshotName }}Builder(
        getSnapshot func() (resource.ClusterSnapshot, error),
) {{ $snapshotName }}Builder {
    return &inMemory{{ $snapshotName }}Builder{
        getSnapshot: getSnapshot,
    }
}

func (i *inMemory{{ $snapshotName }}Builder) BuildSnapshot(ctx context.Context, name string, opts {{ $snapshotName }}BuildOptions) ({{ $snapshotName }}Snapshot, error) {
    genericSnap, err := i.getSnapshot()
    if err != nil {
        return nil, err
    }

    {{- range $group := $groups }}
    {{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
    {{- range $resource := $group.Resources }}
    {{- $kindPlural := pluralize $resource.Kind }}
    {{- $kindLowerCamel := lower_camel $resource.Kind }}
    {{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    {{ $kindLowerCamelPlural }} := {{ $set_import_prefix }}.New{{ $resource.Kind }}Set()
    {{- end }}
    {{- end }}

    genericSnap.ForEachObject(func(cluster string, gvk schema.GroupVersionKind, obj resource.TypedObject) {
        switch obj := obj.(type) {
    {{- range $group := $groups }}
    {{- $types_import_prefix := printf "%v_types" (group_import_name $group) }}
    {{- $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
    {{- range $resource := $group.Resources }}
    {{- $kindPlural := pluralize $resource.Kind }}
    {{- $kindLowerCamel := lower_camel $resource.Kind }}
    {{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
        // insert {{ $kindPlural }}
        case *{{ $types_import_prefix }}.{{ $resource.Kind }}:
            {{ $kindLowerCamelPlural }}.Insert(obj)
    {{- end }}
    {{- end }}
        }
    })

    return New{{ $snapshotName }}Snapshot(
        name,
        {{/* generate params for snapshot constructor here */}}
        {{- range $group := $groups }}
        {{- range $resource := $group.Resources }}
        {{- $kindLowerCamel := lower_camel $resource.Kind }}
        {{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
        {{$kindLowerCamelPlural}},
        {{- end }}
        {{- end }}
    ), nil
}

