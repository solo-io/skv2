// Definitions for Input Snapshots
package input

{{ $groups := imported_groups }}

import (
    "context"
    "github.com/hashicorp/go-multierror"
    "github.com/solo-io/skv2/pkg/multicluster"
    "sigs.k8s.io/controller-runtime/pkg/client"

{{- range $group := $groups }}
{{ $client_import_prefix := group_import_name $group }}
{{ $set_import_prefix := (printf "%v_sets" (group_import_name $group)) }}
    {{ $client_import_prefix }} "{{ client_import_path $group }}"
    {{ $set_import_prefix }} "{{ set_import_path $group }}"
{{- end }}

)

// the snapshot of input resources consumed by translation
type Snapshot interface {
{{/* generate a getter for each resource */}}
{{- range $group := $groups }}
{{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
    // return the set of input {{ $kindPlural }}
    {{ $kindPlural }}() {{ $set_import_prefix }}.{{ $resource.Kind }}Set
{{- end }}
{{- end }}
}

type snapshot struct {
    name string
{{/* generate fields of the real snapshot impl here */}}
{{- range $group := $groups }}
{{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
{{- range $resource := $group.Resources }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    {{ $kindLowerCamelPlural }} {{ $set_import_prefix }}.{{ $resource.Kind }}Set
{{- end }}
{{- end }}

}

func NewSnapshot(
	name string,
{{/* generate constructor params here */}}
{{- range $group := $groups }}
{{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
{{- range $resource := $group.Resources }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    {{ $kindLowerCamelPlural }} {{ $set_import_prefix }}.{{ $resource.Kind }}Set,
{{- end }}
{{- end }}

) Snapshot {
    return &snapshot{
    	name: name,
{{/* add constructor params here */}}
{{- range $group := $groups }}
{{- range $resource := $group.Resources }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    {{ $kindLowerCamelPlural }}:  {{ $kindLowerCamelPlural }},
{{- end }}
{{- end }}
    }
}

{{/* generate getters here */}}
{{- range $group := $groups }}
{{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}

func (s snapshot) {{ $kindPlural }}() {{ $set_import_prefix }}.{{ $resource.Kind }}Set {
    return s.{{ $kindLowerCamelPlural }}
}
{{- end }}
{{- end }}

// builds the input snapshot from API Clients.
// Two types of builders are available:
// a builder for snapshots of resources across multiple clusters
// a builder for snapshots of resources within a single cluster
type Builder interface {
    BuildSnapshot(ctx context.Context, name string) (Snapshot, error)
}

// build a snapshot from resources across multiple clusters
type multiClusterBuilder struct {
    clusters     multicluster.ClusterSet
{{/* generate client fields here */}}
{{- range $group := $groups }}
{{ $client_import_prefix := group_import_name $group }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    {{ $kindLowerCamelPlural }} {{ $client_import_prefix }}.Multicluster{{ $resource.Kind }}Client
{{- end }}
{{- end }}
}

// Produces snapshots of resources across all clusters defined in the ClusterSet
func NewMultiClusterBuilder(
        clusters multicluster.ClusterSet,
        client multicluster.Client,
) Builder {
    return &multiClusterBuilder{
        clusters:     clusters,
{{/* generate constructor fields here */}}
{{- range $group := $groups }}
{{ $client_import_prefix := group_import_name $group }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    {{ $kindLowerCamelPlural }}: {{ $client_import_prefix }}.NewMulticluster{{ $resource.Kind }}Client(client),
{{- end }}
{{- end }}
    }
}


func (b *multiClusterBuilder) BuildSnapshot(ctx context.Context, name string) (Snapshot, error) {
{{/* generate set initialization here */}}
{{- range $group := $groups }}
{{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    {{ $kindLowerCamelPlural }} := {{ $set_import_prefix }}.New{{ $resource.Kind }}Set()
{{- end }}
{{- end }}

    var errs error

    for _, cluster := range b.clusters.ListClusters() {

{{/* generate calls to insert funcs here */}}
{{- range $group := $groups }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
        if err := b.insert{{ $kindPlural }}FromCluster(ctx, cluster, {{ $kindLowerCamelPlural }}); err != nil {
            errs = multierror.Append(errs, err)
        }
{{- end }}
{{- end }}

    }

    outputSnap := NewSnapshot(
        name,
{{/* generate params for snapshot constructor here */}}
{{- range $group := $groups }}
{{- range $resource := $group.Resources }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
        {{$kindLowerCamelPlural}},
{{- end }}
{{- end }}
    )

    return outputSnap, errs
}

{{/* generate insertion funcs here */}}
{{- range $group := $groups }}
{{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
func (b *multiClusterBuilder) insert{{ $kindPlural }}FromCluster(ctx context.Context, cluster string, {{ $kindLowerCamelPlural }} {{ $set_import_prefix }}.{{ $resource.Kind }}Set) error {
    {{ $kindLowerCamel }}Client, err := b.{{ $kindLowerCamelPlural }}.Cluster(cluster)
    if err != nil {
        return err
    }

    {{ $kindLowerCamel }}List, err := {{ $kindLowerCamel }}Client.List{{ $resource.Kind }}(ctx)
    if err != nil {
        return err
    }

    for _, item := range {{ $kindLowerCamel }}List.Items {
        item := item               // pike
        item.ClusterName = cluster // set cluster for in-memory processing
        {{ $kindLowerCamelPlural }}.Insert(&item)
    }

    return nil
}

{{- end }}
{{- end }}


// build a snapshot from resources in a single cluster
type singleClusterBuilder struct {
{{/* generate client fields here */}}
{{- range $group := $groups }}
{{ $client_import_prefix := group_import_name $group }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    {{ $kindLowerCamelPlural }} {{ $client_import_prefix }}.{{ $resource.Kind }}Client
{{- end }}
{{- end }}
}

// Produces snapshots of resources across all clusters defined in the ClusterSet
func NewSingleClusterBuilder(
        client client.Client,
) Builder {
    return &singleClusterBuilder{
{{/* generate constructor fields here */}}
{{- range $group := $groups }}
{{ $client_import_prefix := group_import_name $group }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    {{ $kindLowerCamelPlural }}: {{ $client_import_prefix }}.New{{ $resource.Kind }}Client(client),
{{- end }}
{{- end }}
    }
}


func (b *singleClusterBuilder) BuildSnapshot(ctx context.Context, name string) (Snapshot, error) {
{{/* generate set initialization here */}}
{{- range $group := $groups }}
{{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    {{ $kindLowerCamelPlural }} := {{ $set_import_prefix }}.New{{ $resource.Kind }}Set()
{{- end }}
{{- end }}

    var errs error

{{/* generate calls to insert funcs here */}}
{{- range $group := $groups }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    if err := b.insert{{ $kindPlural }}(ctx,  {{ $kindLowerCamelPlural }}); err != nil {
        errs = multierror.Append(errs, err)
    }
{{- end }}
{{- end }}

    outputSnap := NewSnapshot(
        name,
{{/* generate params for snapshot constructor here */}}
{{- range $group := $groups }}
{{- range $resource := $group.Resources }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
        {{$kindLowerCamelPlural}},
{{- end }}
{{- end }}
    )

    return outputSnap, errs
}

{{/* generate insertion funcs here */}}
{{- range $group := $groups }}
{{ $set_import_prefix := printf "%v_sets" (group_import_name $group) }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
func (b *singleClusterBuilder) insert{{ $kindPlural }}(ctx context.Context, {{ $kindLowerCamelPlural }} {{ $set_import_prefix }}.{{ $resource.Kind }}Set) error {
    {{ $kindLowerCamel }}List, err := b.{{ $kindLowerCamelPlural }}.List{{ $resource.Kind }}(ctx)
    if err != nil {
        return err
    }

    for _, item := range {{ $kindLowerCamel }}List.Items {
        item := item               // pike
        {{ $kindLowerCamelPlural }}.Insert(&item)
    }

    return nil
}

{{- end }}
{{- end }}
