{{ $snapshotName := snapshot_name }}
{{ $groups := imported_groups }}

// The Input Reconciler calls a simple func() error whenever a
// storage event is received for any of:
{{- range $group := $groups }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
// * {{ $kindPlural }}
{{- end }}
{{- end }}
// for a given cluster or set of clusters.
//
// Input Reconcilers can be be constructed from either a single Manager (watch events in a single cluster)
// or a ClusterWatcher (watch events in multiple clusters).
package {{ package }}

import (
    "context"
    "time"

    "github.com/solo-io/skv2/contrib/pkg/input"
    sk_core_v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
    "github.com/solo-io/skv2/pkg/multicluster"
    multicluster_reconcile_v2 "github.com/solo-io/skv2/pkg/multicluster/reconcile/v2"
    multicluster_v2 "github.com/solo-io/skv2/pkg/multicluster/v2"
    reconcile "github.com/solo-io/skv2/pkg/reconcile"
    reconcile_v2 "github.com/solo-io/skv2/pkg/reconcile/v2"

    "sigs.k8s.io/controller-runtime/pkg/manager"
    "sigs.k8s.io/controller-runtime/pkg/predicate"

{{- range $group := $groups }}
{{ $types_import_prefix := printf "%v_types" (group_import_name $group) }}
    {{ $types_import_prefix }} "{{ group_import_path $group }}"
{{- end }}
)

type multiCluster{{ $snapshotName }}ReconcilerImpl struct {
    base input.InputReconciler
}

// Options for reconciling a snapshot
type {{ $snapshotName }}ReconcileOptions struct {
{{/* generate reconcile options here */}}
{{- range $group := $groups }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    // Options for reconciling {{ $kindPlural }}
    {{ $kindPlural }} reconcile.Options
{{- end }}
{{- end }}
}

// register the reconcile func with the cluster watcher
// the reconcileInterval, if greater than 0, will limit the number of reconciles
// to one per interval.
func RegisterMultiCluster{{ $snapshotName }}Reconciler(
        ctx context.Context,
        clusters multicluster.ClusterWatcher,
        reconcileFunc input.MultiClusterReconcileFunc,
        reconcileInterval time.Duration,
        options {{ $snapshotName }}ReconcileOptions,
        predicates ...predicate.Predicate,
) input.InputReconciler {

	base := input.NewInputReconciler(
		ctx,
		reconcileFunc,
		nil,
		reconcileInterval,
    )

    r := &multiCluster{{ $snapshotName }}ReconcilerImpl{
    	base: base,
    }

// initialize reconcile loops
{{- range $group := $groups }}
{{ $types_import_prefix := printf "%v_types" (group_import_name $group) }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}

    multicluster_reconcile_v2.NewLoop[*{{ $types_import_prefix }}.{{ $resource.Kind }}]("das", clusters, reconcile_v2.Options{}).
        AddReconciler(ctx, &multicluster_v2.ReconcilerFuncs[*{{ $types_import_prefix }}.{{ $resource.Kind }}]{
            ReconcileFunc: func(ctx context.Context, clusterName string, obj *{{ $types_import_prefix }}.{{ $resource.Kind }}) (reconcile.Result, error) {
                obj.ClusterName = clusterName
                return r.base.ReconcileRemoteGeneric(obj)
            } ,
            ReconcileDeletionFunc: func(ctx context.Context, clusterName string, obj reconcile_v2.Request) error {
                ref := &sk_core_v1.ClusterObjectRef{
                    Name:                 obj.Name,
                    Namespace:            obj.Namespace,
                    ClusterName:          clusterName,
                }
                _, err := r.base.ReconcileRemoteGeneric(ref)
            return err
        },
    }, predicates...)

{{- end }}
{{- end }}
  return r.base
}


type singleCluster{{ $snapshotName }}ReconcilerImpl struct {
    base input.InputReconciler
}

// register the reconcile func with the manager
// the reconcileInterval, if greater than 0, will limit the number of reconciles
// to one per interval.
func RegisterSingleCluster{{ $snapshotName }}Reconciler(
    ctx context.Context,
    mgr manager.Manager,
    reconcileFunc input.SingleClusterReconcileFunc,
    reconcileInterval time.Duration,
    options reconcile_v2.Options,
    predicates ...predicate.Predicate,
) (input.InputReconciler, error) {

    base := input.NewInputReconciler(
        ctx,
        nil,
        reconcileFunc,
        reconcileInterval,
    )

    r := &singleCluster{{ $snapshotName }}ReconcilerImpl{
        base: base,
    }

// initialize reconcile loops
{{- range $group := $groups }}
    {{ $types_import_prefix := printf "%v_types" (group_import_name $group) }}
{{- range $resource := $group.Resources }}
{{- $kindPlural := pluralize $resource.Kind }}
{{- $kindLowerCamel := lower_camel $resource.Kind }}
{{- $kindLowerCamelPlural := pluralize $kindLowerCamel }}
    if err := reconcile_v2.NewLoop[*{{ $types_import_prefix }}.{{ $resource.Kind }}]("Service", "", mgr, options).
        RunReconciler(ctx, &reconcile_v2.ReconcileFuncs[*{{ $types_import_prefix }}.{{ $resource.Kind }}]{
        ReconcileFunc:func(ctx context.Context, object *{{ $types_import_prefix }}.{{ $resource.Kind }}) (reconcile.Result, error){
            return r.base.ReconcileRemoteGeneric(object)
        },
        DeletionReconcilerFunc: func(ctx context.Context, obj reconcile_v2.Request) error {
            ref := &sk_core_v1.ObjectRef{
            Name:                 obj.Name,
            Namespace:            obj.Namespace,
            }
            _, err := r.base.ReconcileLocalGeneric(ref)
            return err
        },
    }, predicates...); err != nil {
        return nil, err
    }
{{- end }}
{{- end }}

    return r.base, nil
}
