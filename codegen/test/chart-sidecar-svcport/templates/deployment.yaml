# Code generated by skv2. DO NOT EDIT.



{{- $painter := $.Values.painter }}
---

{{- define "painter.deploymentSpec" }}
# Deployment manifest for painter

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: painter
  annotations:
    app.kubernetes.io/name: painter
  name: painter
  namespace: {{ default .Release.Namespace $.Values.painter.namespace }}
spec:
  selector:
    matchLabels:
      app: painter
  template:
    metadata:
      labels:
        app: painter
      annotations:
        app.kubernetes.io/name: painter
    spec:
      serviceAccountName: painter
      containers:
{{- $painter := $.Values.painter }}
{{- $painterImage := $painter.image }}
      - name: painter
        image: {{ $painterImage.registry }}/{{ $painterImage.repository }}:{{ $painterImage.tag }}
        imagePullPolicy: {{ $painterImage.pullPolicy }}
{{- if $painter.env }}
        env:
{{ toYaml $painter.env | indent 10 }}
{{- else if $painter.extraEnvs }}
        env:
{{- end }}
{{- range $name, $item := $painter.extraEnvs }}
          - name: {{ $name }}
{{- $item | toYaml | nindent 12 }}
{{- end }}
        resources:
{{- if $painter.resources }}
{{ toYaml $painter.resources | indent 10}}
{{- else}}
          requests:
            cpu: 500m
            memory: 256Mi
{{- end }}
        {{- /*
          Render securityContext configs if it is set.
          If securityContext is not set, render the default securityContext.
          If securityContext is set to 'false', render an empty map.
        */}}
        securityContext:
{{- if or ($painter.securityContext) (eq "map[]" (printf "%v" $painter.securityContext)) }}
{{ toYaml $painter.securityContext | indent 10}}
{{/* Because securityContext is nil by default we can only perform following conversion if it is a boolean. Skip conditional otherwise. */}}
{{- else if eq (ternary $painter.securityContext true (eq "bool" (printf "%T" $painter.securityContext))) false }}
          {}
{{- else}}
          runAsNonRoot: true
          {{- if not $painter.floatingUserId }}
          runAsUser: {{ printf "%.0f" (float64 $painter.runAsUser) }}
          {{- end }}
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
{{- end }}
{{ if true }}
{{- $sidecarPainter := $.Values.painter.sidecars.sidecarPainter }}
{{- $sidecarPainterImage := $sidecarPainter.image }}
      - name: sidecar-painter
        image: {{ $sidecarPainterImage.registry }}/{{ $sidecarPainterImage.repository }}:{{ $sidecarPainterImage.tag }}
        imagePullPolicy: {{ $sidecarPainterImage.pullPolicy }}
{{- if $sidecarPainter.env }}
        env:
{{ toYaml $sidecarPainter.env | indent 10 }}
{{- else if $sidecarPainter.extraEnvs }}
        env:
{{- end }}
{{- range $name, $item := $sidecarPainter.extraEnvs }}
          - name: {{ $name }}
{{- $item | toYaml | nindent 12 }}
{{- end }}
        resources:
{{- if $sidecarPainter.resources }}
{{ toYaml $sidecarPainter.resources | indent 10}}
{{- else}}
          requests:
            cpu: 500m
            memory: 256Mi
{{- end }}
        {{- /*
          Render securityContext configs if it is set.
          If securityContext is not set, render the default securityContext.
          If securityContext is set to 'false', render an empty map.
        */}}
        securityContext:
{{- if or ($sidecarPainter.securityContext) (eq "map[]" (printf "%v" $sidecarPainter.securityContext)) }}
{{ toYaml $sidecarPainter.securityContext | indent 10}}
{{/* Because securityContext is nil by default we can only perform following conversion if it is a boolean. Skip conditional otherwise. */}}
{{- else if eq (ternary $sidecarPainter.securityContext true (eq "bool" (printf "%T" $sidecarPainter.securityContext))) false }}
          {}
{{- else}}
          runAsNonRoot: true
          {{- if not $painter.floatingUserId }}
          runAsUser: {{ printf "%.0f" (float64 $painter.runAsUser) }}
          {{- end }}
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
{{- end }}
{{- end }}
      {{- if $painterImage.pullSecret }}
      imagePullSecrets:
        - name: {{ $painterImage.pullSecret }}
      {{- end}}
{{- end }} {{/* define "painter.deploymentSpec" */}}

{{/* Render painter deployment template with overrides from values*/}}
{{ if $painter.enabled }}
{{- $painterDeploymentOverrides := dict }}
{{- if $painter.deploymentOverrides }}
{{- $painterDeploymentOverrides = $painter.deploymentOverrides  }}
{{- end }}
---
{{ include "skv2.utils.merge" (list . $painterDeploymentOverrides "painter.deploymentSpec") }}
{{- end }}
---
{{ if $painter.enabled }}
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: painter
  {{- if $painter.serviceAccount}}
  {{- if $painter.serviceAccount.extraAnnotations }}
  annotations:
    {{- range $key, $value := $painter.serviceAccount.extraAnnotations }}
    {{ $key }}: {{ $value }}
    {{- end }}
  {{- end }}
  {{- end}}
  name: painter
  namespace: {{ default .Release.Namespace $.Values.painter.namespace }}
{{- end }}


{{- define "painter.serviceSpec"}}

# Service for painter
{{/* Define variables in function scope */}}
{{- $painter := $.Values.painter}}
apiVersion: v1
kind: Service
metadata:
  labels:
    app: painter
  annotations:
    app.kubernetes.io/name: painter
  name: painter
  namespace: {{ default .Release.Namespace $.Values.painter.namespace }}
spec:
  selector:
    app: painter
  type: {{ $painter.serviceType }}
  ports:
  - name: foo-bar
    port: {{ index $painter "ports" "foo-bar" }}

{{- end }} {{/* define "painter.serviceSpec" */}}
{{ if $painter.enabled }}
{{/* Render painter service template with overrides from values*/}}
{{- $painterServiceOverrides := dict }}
{{- if $painter.serviceOverrides }}
{{- $painterServiceOverrides = $painter.serviceOverrides  }}
{{- end }}

---

{{ include "skv2.utils.merge" (list . $painterServiceOverrides "painter.serviceSpec") }}
{{- end }}

---

{{- $sidecarPainter := $.Values.painter.sidecars.sidecarPainter }}
{{ if true }}
apiVersion: v1
kind: Service
metadata:
  labels:
    app: sidecar-painter
  annotations:
    app.kubernetes.io/name: sidecar-painter
  name: sidecar-painter
  namespace: {{ default .Release.Namespace $painter.namespace }}
spec:
  selector:
    app: painter
  type: {{ $sidecarPainter.serviceType }}
  ports:
  - name: foo-bar
    port: {{ index $sidecarPainter "ports" "foo-bar" }}
{{- end }}

