// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1sets



import (
    things_test_io_v1 "github.com/solo-io/skv2/codegen/test/api/things.test.io/v1"

    "github.com/rotisserie/eris"
    sksets "github.com/solo-io/skv2/contrib/pkg/sets"
    "github.com/solo-io/skv2/pkg/ezkube"
    "k8s.io/apimachinery/pkg/util/sets"
)

type CueBugSet interface {
	// Get the set stored keys
    Keys() sets.String
    // List of resources stored in the set. Pass an optional filter function to filter on the list.
    List(filterResource ... func(*things_test_io_v1.CueBug) bool) []*things_test_io_v1.CueBug
    // Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
    UnsortedList(filterResource ... func(*things_test_io_v1.CueBug) bool) []*things_test_io_v1.CueBug
    // Return the Set as a map of key to resource.
    Map() map[string]*things_test_io_v1.CueBug
    // Insert a resource into the set.
    Insert(cueBug ...*things_test_io_v1.CueBug)
    // Compare the equality of the keys in two sets (not the resources themselves)
    Equal(cueBugSet CueBugSet) bool
    // Check if the set contains a key matching the resource (not the resource itself)
    Has(cueBug ezkube.ResourceId) bool
    // Delete the key matching the resource
    Delete(cueBug  ezkube.ResourceId)
    // Return the union with the provided set
    Union(set CueBugSet) CueBugSet
    // Return the difference with the provided set
    Difference(set CueBugSet) CueBugSet
    // Return the intersection with the provided set
    Intersection(set CueBugSet) CueBugSet
    // Find the resource with the given ID
    Find(id ezkube.ResourceId) (*things_test_io_v1.CueBug, error)
    // Get the length of the set
    Length() int
    // returns the generic implementation of the set
    Generic() sksets.ResourceSet
    // returns the delta between this and and another CueBugSet
    Delta(newSet CueBugSet) sksets.ResourceDelta
    // Create a deep copy of the current CueBugSet
    Clone() CueBugSet
}

func makeGenericCueBugSet(cueBugList []*things_test_io_v1.CueBug) sksets.ResourceSet {
    var genericResources []ezkube.ResourceId
    for _, obj := range cueBugList {
        genericResources = append(genericResources, obj)
    }
    return sksets.NewResourceSet(genericResources...)
}

type cueBugSet struct {
    set sksets.ResourceSet
}

func NewCueBugSet(cueBugList ...*things_test_io_v1.CueBug) CueBugSet {
    return &cueBugSet{set: makeGenericCueBugSet(cueBugList)}
}

func NewCueBugSetFromList(cueBugList *things_test_io_v1.CueBugList) CueBugSet {
    list := make([]*things_test_io_v1.CueBug, 0, len(cueBugList.Items))
    for idx := range cueBugList.Items {
        list = append(list, &cueBugList.Items[idx])
    }
    return &cueBugSet{set: makeGenericCueBugSet(list)}
}

func (s *cueBugSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
    }
    return s.Generic().Keys()
}

func (s *cueBugSet) List(filterResource ... func(*things_test_io_v1.CueBug) bool) []*things_test_io_v1.CueBug {
    if s == nil {
        return nil
    }
    var genericFilters []func(ezkube.ResourceId) bool
    for _, filter := range filterResource {
        filter := filter
        genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
            return filter(obj.(*things_test_io_v1.CueBug))
        })
    }

    objs := s.Generic().List(genericFilters...)
    cueBugList := make([]*things_test_io_v1.CueBug, 0, len(objs))
    for _, obj := range objs {
        cueBugList = append(cueBugList, obj.(*things_test_io_v1.CueBug))
    }
    return cueBugList
}

func (s *cueBugSet) UnsortedList(filterResource ... func(*things_test_io_v1.CueBug) bool) []*things_test_io_v1.CueBug {
    if s == nil {
        return nil
    }
    var genericFilters []func(ezkube.ResourceId) bool
    for _, filter := range filterResource {
        filter := filter
        genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
            return filter(obj.(*things_test_io_v1.CueBug))
        })
    }

    var cueBugList []*things_test_io_v1.CueBug
    for _, obj := range s.Generic().UnsortedList(genericFilters...) {
        cueBugList = append(cueBugList, obj.(*things_test_io_v1.CueBug))
    }
    return cueBugList
}

func (s *cueBugSet) Map() map[string]*things_test_io_v1.CueBug {
    if s == nil {
        return nil
    }

    newMap := map[string]*things_test_io_v1.CueBug{}
    for k, v := range s.Generic().Map() {
        newMap[k] = v.(*things_test_io_v1.CueBug)
    }
    return newMap
}

func (s *cueBugSet) Insert(
        cueBugList ...*things_test_io_v1.CueBug,
) {
    if s == nil {
        panic("cannot insert into nil set")
    }

    for _, obj := range cueBugList {
        s.Generic().Insert(obj)
    }
}

func (s *cueBugSet) Has(cueBug ezkube.ResourceId) bool {
    if s == nil {
        return false
    }
    return s.Generic().Has(cueBug)
}

func (s *cueBugSet) Equal(
        cueBugSet CueBugSet,
) bool {
    if s == nil {
        return cueBugSet == nil
    }
    return s.Generic().Equal(cueBugSet.Generic())
}

func (s *cueBugSet) Delete(CueBug ezkube.ResourceId) {
    if s == nil {
        return
    }
    s.Generic().Delete(CueBug)
}

func (s *cueBugSet) Union(set CueBugSet) CueBugSet {
    if s == nil {
        return set
    }
    return NewCueBugSet(append(s.List(), set.List()...)...)
}

func (s *cueBugSet) Difference(set CueBugSet) CueBugSet {
    if s == nil {
        return set
    }
    newSet := s.Generic().Difference(set.Generic())
    return &cueBugSet{set: newSet}
}

func (s *cueBugSet) Intersection(set CueBugSet) CueBugSet {
    if s == nil {
        return nil
    }
    newSet := s.Generic().Intersection(set.Generic())
    var cueBugList []*things_test_io_v1.CueBug
    for _, obj := range newSet.List() {
        cueBugList = append(cueBugList, obj.(*things_test_io_v1.CueBug))
    }
    return NewCueBugSet(cueBugList...)
}


func (s *cueBugSet) Find(id ezkube.ResourceId) (*things_test_io_v1.CueBug, error) {
    if s == nil {
        return nil, eris.Errorf("empty set, cannot find CueBug %v", sksets.Key(id))
    }
	obj, err := s.Generic().Find(&things_test_io_v1.CueBug{}, id)
	if err != nil {
		return nil, err
    }

    return obj.(*things_test_io_v1.CueBug), nil
}

func (s *cueBugSet) Length() int {
    if s == nil {
        return 0
    }
    return s.Generic().Length()
}

func (s *cueBugSet) Generic() sksets.ResourceSet {
    if s == nil {
        return nil
    }
    return s.set
}

func (s *cueBugSet) Delta(newSet CueBugSet) sksets.ResourceDelta {
    if s == nil {
        return sksets.ResourceDelta{
            Inserted: newSet.Generic(),
        }
    }
    return s.Generic().Delta(newSet.Generic())
}

func (s *cueBugSet) Clone() CueBugSet {
	if s == nil {
		return nil
	}
	return &cueBugSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}
