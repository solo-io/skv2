// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1sets

import (
	things_test_io_v1 "github.com/solo-io/skv2/codegen/test/api/things.test.io/v1"

	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type PaintSet interface {
	Keys() sets.String
	List() []*things_test_io_v1.Paint
	Map() map[string]*things_test_io_v1.Paint
	Insert(paint ...*things_test_io_v1.Paint)
	Equal(paintSet PaintSet) bool
	Has(paint *things_test_io_v1.Paint) bool
	Delete(paint *things_test_io_v1.Paint)
	Union(set PaintSet) PaintSet
	Difference(set PaintSet) PaintSet
	Intersection(set PaintSet) PaintSet
	Find(id ezkube.ResourceId) (*things_test_io_v1.Paint, error)
	Length() int
}

func makeGenericPaintSet(paintList []*things_test_io_v1.Paint) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range paintList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type paintSet struct {
	set sksets.ResourceSet
}

func NewPaintSet(paintList ...*things_test_io_v1.Paint) PaintSet {
	return &paintSet{set: makeGenericPaintSet(paintList)}
}

func NewPaintSetFromList(paintList *things_test_io_v1.PaintList) PaintSet {
	list := make([]*things_test_io_v1.Paint, 0, len(paintList.Items))
	for idx := range paintList.Items {
		list = append(list, &paintList.Items[idx])
	}
	return &paintSet{set: makeGenericPaintSet(list)}
}

func (s *paintSet) Keys() sets.String {
	return s.set.Keys()
}

func (s *paintSet) List() []*things_test_io_v1.Paint {
	var paintList []*things_test_io_v1.Paint
	for _, obj := range s.set.List() {
		paintList = append(paintList, obj.(*things_test_io_v1.Paint))
	}
	return paintList
}

func (s *paintSet) Map() map[string]*things_test_io_v1.Paint {
	newMap := map[string]*things_test_io_v1.Paint{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*things_test_io_v1.Paint)
	}
	return newMap
}

func (s *paintSet) Insert(
	paintList ...*things_test_io_v1.Paint,
) {
	for _, obj := range paintList {
		s.set.Insert(obj)
	}
}

func (s *paintSet) Has(paint *things_test_io_v1.Paint) bool {
	return s.set.Has(paint)
}

func (s *paintSet) Equal(
	paintSet PaintSet,
) bool {
	return s.set.Equal(makeGenericPaintSet(paintSet.List()))
}

func (s *paintSet) Delete(Paint *things_test_io_v1.Paint) {
	s.set.Delete(Paint)
}

func (s *paintSet) Union(set PaintSet) PaintSet {
	return NewPaintSet(append(s.List(), set.List()...)...)
}

func (s *paintSet) Difference(set PaintSet) PaintSet {
	newSet := s.set.Difference(makeGenericPaintSet(set.List()))
	return &paintSet{set: newSet}
}

func (s *paintSet) Intersection(set PaintSet) PaintSet {
	newSet := s.set.Intersection(makeGenericPaintSet(set.List()))
	var paintList []*things_test_io_v1.Paint
	for _, obj := range newSet.List() {
		paintList = append(paintList, obj.(*things_test_io_v1.Paint))
	}
	return NewPaintSet(paintList...)
}

func (s *paintSet) Find(id ezkube.ResourceId) (*things_test_io_v1.Paint, error) {
	obj, err := s.set.Find(&things_test_io_v1.Paint{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*things_test_io_v1.Paint), nil
}

func (s *paintSet) Length() int {
	return s.set.Length()
}

type ClusterResourceSet interface {
	Keys() sets.String
	List() []*things_test_io_v1.ClusterResource
	Map() map[string]*things_test_io_v1.ClusterResource
	Insert(clusterResource ...*things_test_io_v1.ClusterResource)
	Equal(clusterResourceSet ClusterResourceSet) bool
	Has(clusterResource *things_test_io_v1.ClusterResource) bool
	Delete(clusterResource *things_test_io_v1.ClusterResource)
	Union(set ClusterResourceSet) ClusterResourceSet
	Difference(set ClusterResourceSet) ClusterResourceSet
	Intersection(set ClusterResourceSet) ClusterResourceSet
	Find(id ezkube.ResourceId) (*things_test_io_v1.ClusterResource, error)
	Length() int
}

func makeGenericClusterResourceSet(clusterResourceList []*things_test_io_v1.ClusterResource) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range clusterResourceList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type clusterResourceSet struct {
	set sksets.ResourceSet
}

func NewClusterResourceSet(clusterResourceList ...*things_test_io_v1.ClusterResource) ClusterResourceSet {
	return &clusterResourceSet{set: makeGenericClusterResourceSet(clusterResourceList)}
}

func NewClusterResourceSetFromList(clusterResourceList *things_test_io_v1.ClusterResourceList) ClusterResourceSet {
	list := make([]*things_test_io_v1.ClusterResource, 0, len(clusterResourceList.Items))
	for idx := range clusterResourceList.Items {
		list = append(list, &clusterResourceList.Items[idx])
	}
	return &clusterResourceSet{set: makeGenericClusterResourceSet(list)}
}

func (s *clusterResourceSet) Keys() sets.String {
	return s.set.Keys()
}

func (s *clusterResourceSet) List() []*things_test_io_v1.ClusterResource {
	var clusterResourceList []*things_test_io_v1.ClusterResource
	for _, obj := range s.set.List() {
		clusterResourceList = append(clusterResourceList, obj.(*things_test_io_v1.ClusterResource))
	}
	return clusterResourceList
}

func (s *clusterResourceSet) Map() map[string]*things_test_io_v1.ClusterResource {
	newMap := map[string]*things_test_io_v1.ClusterResource{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*things_test_io_v1.ClusterResource)
	}
	return newMap
}

func (s *clusterResourceSet) Insert(
	clusterResourceList ...*things_test_io_v1.ClusterResource,
) {
	for _, obj := range clusterResourceList {
		s.set.Insert(obj)
	}
}

func (s *clusterResourceSet) Has(clusterResource *things_test_io_v1.ClusterResource) bool {
	return s.set.Has(clusterResource)
}

func (s *clusterResourceSet) Equal(
	clusterResourceSet ClusterResourceSet,
) bool {
	return s.set.Equal(makeGenericClusterResourceSet(clusterResourceSet.List()))
}

func (s *clusterResourceSet) Delete(ClusterResource *things_test_io_v1.ClusterResource) {
	s.set.Delete(ClusterResource)
}

func (s *clusterResourceSet) Union(set ClusterResourceSet) ClusterResourceSet {
	return NewClusterResourceSet(append(s.List(), set.List()...)...)
}

func (s *clusterResourceSet) Difference(set ClusterResourceSet) ClusterResourceSet {
	newSet := s.set.Difference(makeGenericClusterResourceSet(set.List()))
	return &clusterResourceSet{set: newSet}
}

func (s *clusterResourceSet) Intersection(set ClusterResourceSet) ClusterResourceSet {
	newSet := s.set.Intersection(makeGenericClusterResourceSet(set.List()))
	var clusterResourceList []*things_test_io_v1.ClusterResource
	for _, obj := range newSet.List() {
		clusterResourceList = append(clusterResourceList, obj.(*things_test_io_v1.ClusterResource))
	}
	return NewClusterResourceSet(clusterResourceList...)
}

func (s *clusterResourceSet) Find(id ezkube.ResourceId) (*things_test_io_v1.ClusterResource, error) {
	obj, err := s.set.Find(&things_test_io_v1.ClusterResource{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*things_test_io_v1.ClusterResource), nil
}

func (s *clusterResourceSet) Length() int {
	return s.set.Length()
}
