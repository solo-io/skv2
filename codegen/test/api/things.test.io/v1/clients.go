// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./clients.go -destination mocks/clients.go

package v1




import (
    "context"

    "github.com/solo-io/skv2/pkg/controllerutils"
    "github.com/solo-io/skv2/pkg/multicluster"
    "k8s.io/apimachinery/pkg/runtime"
    "k8s.io/client-go/kubernetes/scheme"
    "k8s.io/client-go/rest"
    "sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the things.test.io/v1 APIs
type MulticlusterClientset interface {
    // Cluster returns a Clientset for the given cluster
    Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
    client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
    return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
    client, err := m.client.Cluster(cluster)
    if err != nil {
        return nil, err
    }
    return NewClientset(client), nil
}

// clienset for the things.test.io/v1 APIs
type Clientset interface {
    // clienset for the things.test.io/v1/v1 APIs
    CueBugs() CueBugClient
}

type clientSet struct {
    client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
    scheme := scheme.Scheme
    if err := SchemeBuilder.AddToScheme(scheme); err != nil{
        return nil, err
    }
    client, err := client.New(cfg, client.Options{
        Scheme: scheme,
    })
    if err != nil {
        return nil, err
    }
    return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
    return &clientSet{client: client}
}

// clienset for the things.test.io/v1/v1 APIs
func (c *clientSet) CueBugs() CueBugClient {
    return NewCueBugClient(c.client)
}

// Reader knows how to read and list CueBugs.
type CueBugReader interface {
    // Get retrieves a CueBug for the given object key
    GetCueBug(ctx context.Context, key client.ObjectKey) (*CueBug, error)

    // List retrieves list of CueBugs for a given namespace and list options.
    ListCueBug(ctx context.Context, opts ...client.ListOption) (*CueBugList, error)
}

// CueBugTransitionFunction instructs the CueBugWriter how to transition between an existing
// CueBug object and a desired on an Upsert
type CueBugTransitionFunction func(existing, desired *CueBug) error

// Writer knows how to create, delete, and update CueBugs.
type CueBugWriter interface {
    // Create saves the CueBug object.
    CreateCueBug(ctx context.Context, obj *CueBug, opts ...client.CreateOption) error

    // Delete deletes the CueBug object.
    DeleteCueBug(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

    // Update updates the given CueBug object.
    UpdateCueBug(ctx context.Context, obj *CueBug, opts ...client.UpdateOption) error

    // Patch patches the given CueBug object.
    PatchCueBug(ctx context.Context, obj *CueBug, patch client.Patch, opts ...client.PatchOption) error

    // DeleteAllOf deletes all CueBug objects matching the given options.
    DeleteAllOfCueBug(ctx context.Context, opts ...client.DeleteAllOfOption) error

    // Create or Update the CueBug object.
    UpsertCueBug(ctx context.Context, obj *CueBug, transitionFuncs ...CueBugTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a CueBug object.
type CueBugStatusWriter interface {
    // Update updates the fields corresponding to the status subresource for the
    // given CueBug object.
    UpdateCueBugStatus(ctx context.Context, obj *CueBug, opts ...client.UpdateOption) error

    // Patch patches the given CueBug object's subresource.
    PatchCueBugStatus(ctx context.Context, obj *CueBug, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on CueBugs.
type CueBugClient interface {
    CueBugReader
    CueBugWriter
    CueBugStatusWriter
}

type cueBugClient struct {
    client client.Client
}

func NewCueBugClient(client client.Client) *cueBugClient {
    return &cueBugClient{client: client}
}


func (c *cueBugClient) GetCueBug(ctx context.Context, key client.ObjectKey) (*CueBug, error) {
    obj := &CueBug{}
    if err := c.client.Get(ctx, key, obj); err != nil {
        return nil, err
    }
    return obj, nil
}

func (c *cueBugClient) ListCueBug(ctx context.Context, opts ...client.ListOption) (*CueBugList, error) {
    list := &CueBugList{}
    if err := c.client.List(ctx, list, opts...); err != nil {
        return nil, err
    }
    return list, nil
}

func (c *cueBugClient) CreateCueBug(ctx context.Context, obj *CueBug, opts ...client.CreateOption) error {
    return c.client.Create(ctx, obj, opts...)
}


func (c *cueBugClient) DeleteCueBug(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
    obj := &CueBug{}
    obj.SetName(key.Name)
    obj.SetNamespace(key.Namespace)
    return c.client.Delete(ctx, obj, opts...)
}

func (c *cueBugClient) UpdateCueBug(ctx context.Context, obj *CueBug, opts ...client.UpdateOption) error {
    return c.client.Update(ctx, obj, opts...)
}

func (c *cueBugClient) PatchCueBug(ctx context.Context, obj *CueBug, patch client.Patch, opts ...client.PatchOption) error {
    return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *cueBugClient) DeleteAllOfCueBug(ctx context.Context, opts ...client.DeleteAllOfOption) error {
    obj := &CueBug{}
    return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *cueBugClient) UpsertCueBug(ctx context.Context, obj *CueBug, transitionFuncs ...CueBugTransitionFunction) error {
    genericTxFunc := func(existing, desired runtime.Object) error {
        for _, txFunc := range transitionFuncs {
            if err := txFunc(existing.(*CueBug), desired.(*CueBug)); err != nil {
                return err
            }
        }
        return nil
    }
    _, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
    return err
}

func (c *cueBugClient) UpdateCueBugStatus(ctx context.Context, obj *CueBug, opts ...client.UpdateOption) error {
    return c.client.Status().Update(ctx, obj, opts...)
}

func (c *cueBugClient) PatchCueBugStatus(ctx context.Context, obj *CueBug, patch client.Patch, opts ...client.PatchOption) error {
    return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides CueBugClients for multiple clusters.
type MulticlusterCueBugClient interface {
    // Cluster returns a CueBugClient for the given cluster
    Cluster(cluster string) (CueBugClient, error)
}

type multiclusterCueBugClient struct {
    client multicluster.Client
}

func NewMulticlusterCueBugClient(client multicluster.Client) MulticlusterCueBugClient {
    return &multiclusterCueBugClient{client: client}
}

func (m *multiclusterCueBugClient) Cluster(cluster string) (CueBugClient, error) {
    client, err := m.client.Cluster(cluster)
    if err != nil {
        return nil, err
    }
    return  NewCueBugClient(client), nil
}