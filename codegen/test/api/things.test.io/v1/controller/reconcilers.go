// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./reconcilers.go -destination mocks/reconcilers.go

// Definitions for the Kubernetes Controllers
package controller



import (
	"context"

    things_test_io_v1 "github.com/solo-io/skv2/codegen/test/api/things.test.io/v1"

    "github.com/pkg/errors"
    "github.com/solo-io/skv2/pkg/ezkube"
    "github.com/solo-io/skv2/pkg/reconcile"
    "sigs.k8s.io/controller-runtime/pkg/manager"
    "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the CueBug Resource.
// implemented by the user
type CueBugReconciler interface {
    ReconcileCueBug(obj *things_test_io_v1.CueBug) (reconcile.Result, error)
}

// Reconcile deletion events for the CueBug Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type CueBugDeletionReconciler interface {
    ReconcileCueBugDeletion(req reconcile.Request) error
}

type CueBugReconcilerFuncs struct {
    OnReconcileCueBug func(obj *things_test_io_v1.CueBug) (reconcile.Result, error)
    OnReconcileCueBugDeletion func(req reconcile.Request) error
}

func (f *CueBugReconcilerFuncs) ReconcileCueBug(obj *things_test_io_v1.CueBug) (reconcile.Result, error) {
    if f.OnReconcileCueBug == nil {
        return reconcile.Result{}, nil
    }
    return f.OnReconcileCueBug(obj)
}

func (f *CueBugReconcilerFuncs) ReconcileCueBugDeletion(req reconcile.Request) error {
    if f.OnReconcileCueBugDeletion == nil {
        return nil
    }
    return f.OnReconcileCueBugDeletion(req)
}

// Reconcile and finalize the CueBug Resource
// implemented by the user
type CueBugFinalizer interface {
    CueBugReconciler

    // name of the finalizer used by this handler.
    // finalizer names should be unique for a single task
    CueBugFinalizerName() string

    // finalize the object before it is deleted.
    // Watchers created with a finalizing handler will a
    FinalizeCueBug(obj *things_test_io_v1.CueBug) error
}

type CueBugReconcileLoop interface {
    RunCueBugReconciler(ctx context.Context, rec CueBugReconciler, predicates ...predicate.Predicate) error
}

type cueBugReconcileLoop struct {
    loop reconcile.Loop
}

func NewCueBugReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) CueBugReconcileLoop {
    return &cueBugReconcileLoop{
    	// empty cluster indicates this reconciler is built for the local cluster
        loop: reconcile.NewLoop(name, "", mgr, &things_test_io_v1.CueBug{}, options),
    }
}

func (c *cueBugReconcileLoop) RunCueBugReconciler(ctx context.Context, reconciler CueBugReconciler, predicates ...predicate.Predicate) error {
    genericReconciler := genericCueBugReconciler{
        reconciler: reconciler,
    }

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(CueBugFinalizer); ok {
        reconcilerWrapper = genericCueBugFinalizer{
            genericCueBugReconciler: genericReconciler,
            finalizingReconciler: finalizingReconciler,
        }
    } else {
        reconcilerWrapper = genericReconciler
    }
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericCueBugHandler implements a generic reconcile.Reconciler
type genericCueBugReconciler struct {
    reconciler CueBugReconciler
}

func (r genericCueBugReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
    obj, ok := object.(*things_test_io_v1.CueBug)
    if !ok {
        return reconcile.Result{}, errors.Errorf("internal error: CueBug handler received event for %T", object)
    }
    return r.reconciler.ReconcileCueBug(obj)
}

func (r genericCueBugReconciler) ReconcileDeletion(request reconcile.Request) error {
    if deletionReconciler, ok := r.reconciler.(CueBugDeletionReconciler); ok {
        return deletionReconciler.ReconcileCueBugDeletion(request)
    }
    return nil
}

// genericCueBugFinalizer implements a generic reconcile.FinalizingReconciler
type genericCueBugFinalizer struct {
    genericCueBugReconciler
    finalizingReconciler CueBugFinalizer
}


func (r genericCueBugFinalizer) FinalizerName() string {
    return r.finalizingReconciler.CueBugFinalizerName()
}

func (r genericCueBugFinalizer) Finalize(object ezkube.Object) error {
    obj, ok := object.(*things_test_io_v1.CueBug)
    if !ok {
        return errors.Errorf("internal error: CueBug handler received event for %T", object)
    }
    return r.finalizingReconciler.FinalizeCueBug(obj)
}
