// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

    things_test_io_v1 "github.com/solo-io/skv2/codegen/test/api/things.test.io/v1"

    "github.com/pkg/errors"
    "github.com/solo-io/skv2/pkg/events"
    "sigs.k8s.io/controller-runtime/pkg/manager"
    "sigs.k8s.io/controller-runtime/pkg/predicate"
    "sigs.k8s.io/controller-runtime/pkg/client"
)

// Handle events for the CueBug Resource
// DEPRECATED: Prefer reconciler pattern.
type CueBugEventHandler interface {
    CreateCueBug(obj *things_test_io_v1.CueBug) error
    UpdateCueBug(old, new *things_test_io_v1.CueBug) error
    DeleteCueBug(obj *things_test_io_v1.CueBug) error
    GenericCueBug(obj *things_test_io_v1.CueBug) error
}

type CueBugEventHandlerFuncs struct {
    OnCreate  func(obj *things_test_io_v1.CueBug) error
    OnUpdate  func(old, new *things_test_io_v1.CueBug) error
    OnDelete  func(obj *things_test_io_v1.CueBug) error
    OnGeneric func(obj *things_test_io_v1.CueBug) error
}

func (f *CueBugEventHandlerFuncs) CreateCueBug(obj *things_test_io_v1.CueBug) error {
    if f.OnCreate == nil {
        return nil
    }
    return f.OnCreate(obj)
}

func (f *CueBugEventHandlerFuncs) DeleteCueBug(obj *things_test_io_v1.CueBug) error {
    if f.OnDelete == nil {
        return nil
    }
    return f.OnDelete(obj)
}

func (f *CueBugEventHandlerFuncs) UpdateCueBug(objOld, objNew *things_test_io_v1.CueBug) error {
    if f.OnUpdate == nil {
        return nil
    }
    return f.OnUpdate(objOld, objNew)
}

func (f *CueBugEventHandlerFuncs) GenericCueBug(obj *things_test_io_v1.CueBug) error {
    if f.OnGeneric == nil {
        return nil
    }
    return f.OnGeneric(obj)
}

type CueBugEventWatcher interface {
    AddEventHandler(ctx context.Context, h CueBugEventHandler, predicates ...predicate.Predicate) error
}

type cueBugEventWatcher struct {
    watcher events.EventWatcher
}

func NewCueBugEventWatcher(name string, mgr manager.Manager) CueBugEventWatcher {
    return &cueBugEventWatcher{
        watcher: events.NewWatcher(name, mgr, &things_test_io_v1.CueBug{}),
    }
}

func (c *cueBugEventWatcher) AddEventHandler(ctx context.Context, h CueBugEventHandler, predicates ...predicate.Predicate) error {
	handler := genericCueBugHandler{handler: h}
    if err := c.watcher.Watch(ctx, handler, predicates...); err != nil{
        return err
    }
    return nil
}

// genericCueBugHandler implements a generic events.EventHandler
type genericCueBugHandler struct {
    handler CueBugEventHandler
}

func (h genericCueBugHandler) Create(object client.Object) error {
    obj, ok := object.(*things_test_io_v1.CueBug)
    if !ok {
        return errors.Errorf("internal error: CueBug handler received event for %T", object)
    }
    return h.handler.CreateCueBug(obj)
}

func (h genericCueBugHandler) Delete(object client.Object) error {
    obj, ok := object.(*things_test_io_v1.CueBug)
    if !ok {
        return errors.Errorf("internal error: CueBug handler received event for %T", object)
    }
    return h.handler.DeleteCueBug(obj)
}

func (h genericCueBugHandler) Update(old, new client.Object) error {
    objOld, ok := old.(*things_test_io_v1.CueBug)
    if !ok {
        return errors.Errorf("internal error: CueBug handler received event for %T", old)
    }
    objNew, ok := new.(*things_test_io_v1.CueBug)
    if !ok {
        return errors.Errorf("internal error: CueBug handler received event for %T", new)
    }
    return h.handler.UpdateCueBug(objOld, objNew)
}

func (h genericCueBugHandler) Generic(object client.Object) error {
    obj, ok := object.(*things_test_io_v1.CueBug)
    if !ok {
        return errors.Errorf("internal error: CueBug handler received event for %T", object)
    }
    return h.handler.GenericCueBug(obj)
}
