// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/skv2/codegen/test/api/things.test.io/v1"
	controller "github.com/solo-io/skv2/codegen/test/api/things.test.io/v1/controller"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockPaintEventHandler is a mock of PaintEventHandler interface
type MockPaintEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPaintEventHandlerMockRecorder
}

// MockPaintEventHandlerMockRecorder is the mock recorder for MockPaintEventHandler
type MockPaintEventHandlerMockRecorder struct {
	mock *MockPaintEventHandler
}

// NewMockPaintEventHandler creates a new mock instance
func NewMockPaintEventHandler(ctrl *gomock.Controller) *MockPaintEventHandler {
	mock := &MockPaintEventHandler{ctrl: ctrl}
	mock.recorder = &MockPaintEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPaintEventHandler) EXPECT() *MockPaintEventHandlerMockRecorder {
	return m.recorder
}

// CreatePaint mocks base method
func (m *MockPaintEventHandler) CreatePaint(obj *v1.Paint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaint", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePaint indicates an expected call of CreatePaint
func (mr *MockPaintEventHandlerMockRecorder) CreatePaint(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaint", reflect.TypeOf((*MockPaintEventHandler)(nil).CreatePaint), obj)
}

// UpdatePaint mocks base method
func (m *MockPaintEventHandler) UpdatePaint(old, new *v1.Paint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaint", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePaint indicates an expected call of UpdatePaint
func (mr *MockPaintEventHandlerMockRecorder) UpdatePaint(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaint", reflect.TypeOf((*MockPaintEventHandler)(nil).UpdatePaint), old, new)
}

// DeletePaint mocks base method
func (m *MockPaintEventHandler) DeletePaint(obj *v1.Paint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePaint", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePaint indicates an expected call of DeletePaint
func (mr *MockPaintEventHandlerMockRecorder) DeletePaint(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePaint", reflect.TypeOf((*MockPaintEventHandler)(nil).DeletePaint), obj)
}

// GenericPaint mocks base method
func (m *MockPaintEventHandler) GenericPaint(obj *v1.Paint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericPaint", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericPaint indicates an expected call of GenericPaint
func (mr *MockPaintEventHandlerMockRecorder) GenericPaint(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericPaint", reflect.TypeOf((*MockPaintEventHandler)(nil).GenericPaint), obj)
}

// MockPaintEventWatcher is a mock of PaintEventWatcher interface
type MockPaintEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockPaintEventWatcherMockRecorder
}

// MockPaintEventWatcherMockRecorder is the mock recorder for MockPaintEventWatcher
type MockPaintEventWatcherMockRecorder struct {
	mock *MockPaintEventWatcher
}

// NewMockPaintEventWatcher creates a new mock instance
func NewMockPaintEventWatcher(ctrl *gomock.Controller) *MockPaintEventWatcher {
	mock := &MockPaintEventWatcher{ctrl: ctrl}
	mock.recorder = &MockPaintEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPaintEventWatcher) EXPECT() *MockPaintEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method
func (m *MockPaintEventWatcher) AddEventHandler(ctx context.Context, h controller.PaintEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler
func (mr *MockPaintEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockPaintEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockClusterResourceEventHandler is a mock of ClusterResourceEventHandler interface
type MockClusterResourceEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockClusterResourceEventHandlerMockRecorder
}

// MockClusterResourceEventHandlerMockRecorder is the mock recorder for MockClusterResourceEventHandler
type MockClusterResourceEventHandlerMockRecorder struct {
	mock *MockClusterResourceEventHandler
}

// NewMockClusterResourceEventHandler creates a new mock instance
func NewMockClusterResourceEventHandler(ctrl *gomock.Controller) *MockClusterResourceEventHandler {
	mock := &MockClusterResourceEventHandler{ctrl: ctrl}
	mock.recorder = &MockClusterResourceEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterResourceEventHandler) EXPECT() *MockClusterResourceEventHandlerMockRecorder {
	return m.recorder
}

// CreateClusterResource mocks base method
func (m *MockClusterResourceEventHandler) CreateClusterResource(obj *v1.ClusterResource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterResource", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClusterResource indicates an expected call of CreateClusterResource
func (mr *MockClusterResourceEventHandlerMockRecorder) CreateClusterResource(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterResource", reflect.TypeOf((*MockClusterResourceEventHandler)(nil).CreateClusterResource), obj)
}

// UpdateClusterResource mocks base method
func (m *MockClusterResourceEventHandler) UpdateClusterResource(old, new *v1.ClusterResource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterResource", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterResource indicates an expected call of UpdateClusterResource
func (mr *MockClusterResourceEventHandlerMockRecorder) UpdateClusterResource(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterResource", reflect.TypeOf((*MockClusterResourceEventHandler)(nil).UpdateClusterResource), old, new)
}

// DeleteClusterResource mocks base method
func (m *MockClusterResourceEventHandler) DeleteClusterResource(obj *v1.ClusterResource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterResource", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterResource indicates an expected call of DeleteClusterResource
func (mr *MockClusterResourceEventHandlerMockRecorder) DeleteClusterResource(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterResource", reflect.TypeOf((*MockClusterResourceEventHandler)(nil).DeleteClusterResource), obj)
}

// GenericClusterResource mocks base method
func (m *MockClusterResourceEventHandler) GenericClusterResource(obj *v1.ClusterResource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericClusterResource", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericClusterResource indicates an expected call of GenericClusterResource
func (mr *MockClusterResourceEventHandlerMockRecorder) GenericClusterResource(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericClusterResource", reflect.TypeOf((*MockClusterResourceEventHandler)(nil).GenericClusterResource), obj)
}

// MockClusterResourceEventWatcher is a mock of ClusterResourceEventWatcher interface
type MockClusterResourceEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockClusterResourceEventWatcherMockRecorder
}

// MockClusterResourceEventWatcherMockRecorder is the mock recorder for MockClusterResourceEventWatcher
type MockClusterResourceEventWatcherMockRecorder struct {
	mock *MockClusterResourceEventWatcher
}

// NewMockClusterResourceEventWatcher creates a new mock instance
func NewMockClusterResourceEventWatcher(ctrl *gomock.Controller) *MockClusterResourceEventWatcher {
	mock := &MockClusterResourceEventWatcher{ctrl: ctrl}
	mock.recorder = &MockClusterResourceEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterResourceEventWatcher) EXPECT() *MockClusterResourceEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method
func (m *MockClusterResourceEventWatcher) AddEventHandler(ctx context.Context, h controller.ClusterResourceEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler
func (mr *MockClusterResourceEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockClusterResourceEventWatcher)(nil).AddEventHandler), varargs...)
}
