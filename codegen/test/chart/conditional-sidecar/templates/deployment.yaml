# Code generated by skv2. DO NOT EDIT.



{{- $glooMgmtServer := $.Values.glooMgmtServer }}
---

{{- define "gloo-mgmt-server.deploymentSpec" }}

# Deployment manifest for gloo-mgmt-server

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo-mgmt-server
  annotations:
    app.kubernetes.io/name: gloo-mgmt-server
  name: gloo-mgmt-server
  namespace: {{ default .Release.Namespace $.Values.glooMgmtServer.namespace }}
spec:
  selector:
    matchLabels:
      app: gloo-mgmt-server
  template:
    metadata:
      labels:
        app: gloo-mgmt-server
      annotations:
        app.kubernetes.io/name: gloo-mgmt-server
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: gloo-mgmt-server
      volumes:
      - name: license-keys
        secret:
          secretName: license-keys
{{- if and ($.Values.glooAgent.enabled) ($.Values.glooAgent.runAsSidecar) -}}
      - name: agent-volume
        secret:
          secretName: agent-volume
      - name: agent-volume-2
        secret:
          secretName: agent-volume
{{- end }}
      containers:
{{- $glooMgmtServer := $.Values.glooMgmtServer }}
{{- $glooMgmtServerImage := $glooMgmtServer.image }}
      - name: gloo-mgmt-server
        image: {{ $glooMgmtServerImage.registry }}/{{ $glooMgmtServerImage.repository }}:{{ $glooMgmtServerImage.tag }}
        imagePullPolicy: {{ $glooMgmtServerImage.pullPolicy }}
{{- if $glooMgmtServer.env }}
        env:
{{ toYaml $glooMgmtServer.env | indent 10 }}
{{- else if $glooMgmtServer.extraEnvs }}
        env:
{{- end }}
{{- range $name, $item := $glooMgmtServer.extraEnvs }}
          - name: {{ $name }}
{{- $item | toYaml | nindent 12 }}
{{- end }}
        volumeMounts:
        - mountPath: /etc/gloo-mesh/license-keys
          name: license-keys
          readOnly: true
        resources:
{{- if $glooMgmtServer.resources }}
{{ toYaml $glooMgmtServer.resources | indent 10}}
{{- else}}
          requests:
            cpu: 500m
            memory: 256Mi
{{- end }}
        {{- /*
          Render securityContext configs if it is set.
          If securityContext is not set, render the default securityContext.
          If securityContext is set to 'false', render an empty map.
        */}}
        securityContext:
{{- if or ($glooMgmtServer.securityContext) (eq "map[]" (printf "%v" $glooMgmtServer.securityContext)) }}
{{ toYaml $glooMgmtServer.securityContext | indent 10}}
{{/* Because securityContext is nil by default we can only perform following conversion if it is a boolean. Skip conditional otherwise. */}}
{{- else if eq (ternary $glooMgmtServer.securityContext true (eq "bool" (printf "%T" $glooMgmtServer.securityContext))) false }}
          {}
{{- else}}
          runAsNonRoot: true
          {{- if not $glooMgmtServer.floatingUserId }}
          runAsUser: {{ printf "%.0f" (float64 $glooMgmtServer.runAsUser) }}
          {{- end }}
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
{{- end }}
{{- if and ($.Values.glooAgent.enabled) ($.Values.glooAgent.runAsSidecar) -}}
{{- $glooAgent := $.Values.glooAgent }}
{{- $glooAgentImage := $glooAgent.image }}
      - name: gloo-agent
        image: {{ $glooAgentImage.registry }}/{{ $glooAgentImage.repository }}:{{ $glooAgentImage.tag }}
        imagePullPolicy: {{ $glooAgentImage.pullPolicy }}
{{- if $glooAgent.env }}
        env:
{{ toYaml $glooAgent.env | indent 10 }}
{{- else if $glooAgent.extraEnvs }}
        env:
{{- end }}
{{- range $name, $item := $glooAgent.extraEnvs }}
          - name: {{ $name }}
{{- $item | toYaml | nindent 12 }}
{{- end }}
        resources:
{{- if $glooAgent.resources }}
{{ toYaml $glooAgent.resources | indent 10}}
{{- else}}
          requests:
            cpu: 500m
            memory: 256Mi
{{- end }}
        {{- /*
          Render securityContext configs if it is set.
          If securityContext is not set, render the default securityContext.
          If securityContext is set to 'false', render an empty map.
        */}}
        securityContext:
{{- if or ($glooAgent.securityContext) (eq "map[]" (printf "%v" $glooAgent.securityContext)) }}
{{ toYaml $glooAgent.securityContext | indent 10}}
{{/* Because securityContext is nil by default we can only perform following conversion if it is a boolean. Skip conditional otherwise. */}}
{{- else if eq (ternary $glooAgent.securityContext true (eq "bool" (printf "%T" $glooAgent.securityContext))) false }}
          {}
{{- else}}
          runAsNonRoot: true
          {{- if not $glooMgmtServer.floatingUserId }}
          runAsUser: {{ printf "%.0f" (float64 $glooMgmtServer.runAsUser) }}
          {{- end }}
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
{{- end }}
{{- end }}
      {{- if $glooMgmtServerImage.pullSecret }}
      imagePullSecrets:
        - name: {{ $glooMgmtServerImage.pullSecret }}
      {{- end}}
{{- end }} {{/* define "gloo-mgmt-server.deploymentSpec" */}}

{{/* Render gloo-mgmt-server deployment template with overrides from values*/}}
{{- if $glooMgmtServer.enabled -}}
{{- $glooMgmtServerDeploymentOverrides := dict }}
{{- if $glooMgmtServer.deploymentOverrides }}
{{- $glooMgmtServerDeploymentOverrides = $glooMgmtServer.deploymentOverrides  }}
{{- end }}
---
{{ include "skv2.utils.merge" (list . $glooMgmtServerDeploymentOverrides "gloo-mgmt-server.deploymentSpec") }}
{{- end }}
---
{{- if $glooMgmtServer.enabled -}}
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo-mgmt-server
  {{- if $glooMgmtServer.serviceAccount}}
  {{- if $glooMgmtServer.serviceAccount.extraAnnotations }}
  annotations:
    {{- range $key, $value := $glooMgmtServer.serviceAccount.extraAnnotations }}
    {{ $key }}: {{ $value }}
    {{- end }}
  {{- end }}
  {{- end}}
  name: gloo-mgmt-server
  namespace: {{ default .Release.Namespace $.Values.glooMgmtServer.namespace }}
{{- end }}


{{- define "gloo-mgmt-server.serviceSpec"}}

# Service for gloo-mgmt-server
{{/* Define variables in function scope */}}
{{- $glooMgmtServer := $.Values.glooMgmtServer}}
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo-mgmt-server
  annotations:
    app.kubernetes.io/name: gloo-mgmt-server
  name: gloo-mgmt-server
  namespace: {{ default .Release.Namespace $.Values.glooMgmtServer.namespace }}
spec:
  selector:
    app: gloo-mgmt-server
  type: {{ $glooMgmtServer.serviceType }}
  ports:
  - name: grpc
    port: {{ $glooMgmtServer.ports.grpc }}

{{- end }} {{/* define "gloo-mgmt-server.serviceSpec" */}}
{{- if $glooMgmtServer.enabled -}}
{{/* Render gloo-mgmt-server service template with overrides from values*/}}
{{- $glooMgmtServerServiceOverrides := dict }}
{{- if $glooMgmtServer.serviceOverrides }}
{{- $glooMgmtServerServiceOverrides = $glooMgmtServer.serviceOverrides  }}
{{- end }}

---

{{ include "skv2.utils.merge" (list . $glooMgmtServerServiceOverrides "gloo-mgmt-server.serviceSpec") }}
{{- end }}

---

{{- $glooAgent := $.Values.glooAgent }}
{{- if and ($.Values.glooAgent.enabled) ($.Values.glooAgent.runAsSidecar) -}}
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo-agent
  annotations:
    app.kubernetes.io/name: gloo-agent
  name: gloo-agent
  namespace: {{ default .Release.Namespace $glooMgmtServer.namespace }}
spec:
  selector:
    app: gloo-mgmt-server
  type: {{ $glooAgent.serviceType }}
  ports:
  - name: grpc
    port: {{ $glooAgent.ports.grpc }}
{{- end }}


{{- $glooAgent := $.Values.glooAgent }}
---

{{- define "gloo-agent.deploymentSpec" }}

# Deployment manifest for gloo-agent

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo-agent
  annotations:
    app.kubernetes.io/name: gloo-agent
  name: gloo-agent
  namespace: {{ default .Release.Namespace $.Values.glooAgent.namespace }}
spec:
  selector:
    matchLabels:
      app: gloo-agent
  template:
    metadata:
      labels:
        app: gloo-agent
      annotations:
        app.kubernetes.io/name: gloo-agent
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: gloo-agent
      containers:
{{- $glooAgent := $.Values.glooAgent }}
{{- $glooAgentImage := $glooAgent.image }}
      - name: gloo-agent
        image: {{ $glooAgentImage.registry }}/{{ $glooAgentImage.repository }}:{{ $glooAgentImage.tag }}
        imagePullPolicy: {{ $glooAgentImage.pullPolicy }}
{{- if $glooAgent.env }}
        env:
{{ toYaml $glooAgent.env | indent 10 }}
{{- else if $glooAgent.extraEnvs }}
        env:
{{- end }}
{{- range $name, $item := $glooAgent.extraEnvs }}
          - name: {{ $name }}
{{- $item | toYaml | nindent 12 }}
{{- end }}
        resources:
{{- if $glooAgent.resources }}
{{ toYaml $glooAgent.resources | indent 10}}
{{- else}}
          requests:
            cpu: 500m
            memory: 256Mi
{{- end }}
        {{- /*
          Render securityContext configs if it is set.
          If securityContext is not set, render the default securityContext.
          If securityContext is set to 'false', render an empty map.
        */}}
        securityContext:
{{- if or ($glooAgent.securityContext) (eq "map[]" (printf "%v" $glooAgent.securityContext)) }}
{{ toYaml $glooAgent.securityContext | indent 10}}
{{/* Because securityContext is nil by default we can only perform following conversion if it is a boolean. Skip conditional otherwise. */}}
{{- else if eq (ternary $glooAgent.securityContext true (eq "bool" (printf "%T" $glooAgent.securityContext))) false }}
          {}
{{- else}}
          runAsNonRoot: true
          {{- if not $glooAgent.floatingUserId }}
          runAsUser: {{ printf "%.0f" (float64 $glooAgent.runAsUser) }}
          {{- end }}
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
{{- end }}
      {{- if $glooAgentImage.pullSecret }}
      imagePullSecrets:
        - name: {{ $glooAgentImage.pullSecret }}
      {{- end}}
{{- end }} {{/* define "gloo-agent.deploymentSpec" */}}

{{/* Render gloo-agent deployment template with overrides from values*/}}
{{- if and ($.Values.glooAgent.enabled) (not $.Values.glooAgent.runAsSidecar) }}
{{- $glooAgentDeploymentOverrides := dict }}
{{- if $glooAgent.deploymentOverrides }}
{{- $glooAgentDeploymentOverrides = $glooAgent.deploymentOverrides  }}
{{- end }}
---
{{ include "skv2.utils.merge" (list . $glooAgentDeploymentOverrides "gloo-agent.deploymentSpec") }}
{{- end }}
---
{{- if and ($.Values.glooAgent.enabled) (not $.Values.glooAgent.runAsSidecar) }}
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo-agent
  {{- if $glooAgent.serviceAccount}}
  {{- if $glooAgent.serviceAccount.extraAnnotations }}
  annotations:
    {{- range $key, $value := $glooAgent.serviceAccount.extraAnnotations }}
    {{ $key }}: {{ $value }}
    {{- end }}
  {{- end }}
  {{- end}}
  name: gloo-agent
  namespace: {{ default .Release.Namespace $.Values.glooAgent.namespace }}
{{- end }}


{{- define "gloo-agent.serviceSpec"}}

{{- end }} {{/* define "gloo-agent.serviceSpec" */}}
{{- if and ($.Values.glooAgent.enabled) (not $.Values.glooAgent.runAsSidecar) }}
{{/* Render gloo-agent service template with overrides from values*/}}
{{- $glooAgentServiceOverrides := dict }}
{{- if $glooAgent.serviceOverrides }}
{{- $glooAgentServiceOverrides = $glooAgent.serviceOverrides  }}
{{- end }}

---

{{ include "skv2.utils.merge" (list . $glooAgentServiceOverrides "gloo-agent.serviceSpec") }}
{{- end }}

