[[- /*
This template contains the core components for the Operator deployment.
Expressions evaluating Helm Values use "{{" and "}}"
Expressions evaluating SKv2 Config use "[[" and "]]"
*/ -]]

[[- range $operator := $.Operators -]]
[[- $operatorVar := (lower_camel $operator.Name) -]]

[[/* custom values defined in codegen model */]]
[[- $containers := containerConfigs $operator -]]
[[- $strategy := $operator.Deployment.Strategy -]]
[[- $conditionalStrategy := $operator.Deployment.ConditionalStrategy -]]
[[- $podSecurityContext := $operator.Deployment.PodSecurityContext -]]
[[- $volumes := $operator.Deployment.Volumes -]]
[[- $conditionalVolumes := $operator.Deployment.ConditionalVolumes -]]
[[- $customPodLabels := $operator.Deployment.CustomPodLabels -]]
[[- $customPodAnnotations := $operator.Deployment.CustomPodAnnotations -]]
[[- $customDeploymentLabels := $operator.Deployment.CustomDeploymentLabels -]]
[[- $customDeploymentAnnotations := $operator.Deployment.CustomDeploymentAnnotations -]]
[[- $customServiceLabels := $operator.Service.CustomLabels -]]
[[- $customServiceAnnotations := $operator.Service.CustomAnnotations ]]

{{- $[[ $operatorVar ]] := [[ (opVar $operator) ]] }}
---
[[- $operatorEnabledCondition := printf "\n{{ if $%s.enabled }}\n" $operatorVar ]]
[[- if (gt (len $operator.CustomEnableCondition) 0) ]]
[[- $operatorEnabledCondition = printf "\n{{ if %s }}\n" $operator.CustomEnableCondition ]]
[[- end ]]

{{- define "[[ $operator.Name ]].deploymentSpec" }}
[[- $workloadKind := "Deployment" ]]
[[- if $operator.Deployment.UseDaemonSet ]]
[[- $workloadKind = "DaemonSet" ]]
[[- end ]]
# [[ $workloadKind ]] manifest for [[ $operator.Name ]]

apiVersion: apps/v1
kind: [[ $workloadKind ]]
metadata:
  labels:
    app: [[ $operator.Name ]]
    [[- range $key, $value := $customDeploymentLabels ]]
    [[ $key ]]: [[ $value ]]
    [[- end ]]
  annotations:
    app.kubernetes.io/name: [[ $operator.Name ]]
    [[- range $key, $value := $customDeploymentAnnotations ]]
    [[ $key ]]: [[ $value ]]
    [[- end ]]
  name: [[ $operator.Name ]]
[[- if $operator.NamespaceFromValuePath ]]
  namespace: [[ printf "{{ %s | default $.Release.Namespace }}" $operator.NamespaceFromValuePath ]]
[[- else ]]
  namespace: {{ default .Release.Namespace [[ (opVar $operator) ]].namespace }}
[[- end ]]
spec:
  selector:
    matchLabels:
      app: [[ $operator.Name ]]
      [[- range $key, $value := $customPodLabels ]]
      [[ $key ]]: [[ $value ]]
      [[- end ]]
[[- if $strategy ]]
  strategy:
[[ toYaml $strategy | indent 4 ]]
[[- else if $conditionalStrategy ]]
[[- range $s := $conditionalStrategy ]]
{{- if [[ $s.Condition ]] }}
  strategy:
[[ toYaml $s.Strategy | indent 4 ]]
{{- end }}
[[- end ]]
[[- end ]]
  template:
    metadata:
      labels:
        app: [[ $operator.Name ]]
        [[- range $key, $value := $customPodLabels ]]
        [[ $key ]]: [[ $value ]]
        [[- end ]]
      annotations:
        app.kubernetes.io/name: [[ $operator.Name ]]
        [[- range $key, $value := $customPodAnnotations ]]
        [[ $key ]]: [[ $value ]]
        [[- end ]]
    spec:
      serviceAccountName: [[ $operator.Name ]]
      {{- /* Override the default podSecurityContext config if it is set. */}}
{{- if or ([[ (opVar $operator) ]].podSecurityContext) (eq "map[]" (printf "%v" [[ (opVar $operator) ]].podSecurityContext)) }}
      securityContext:
{{ toYaml [[ (opVar $operator) ]].podSecurityContext | indent 8 }}
[[- if $podSecurityContext ]]
{{- else}}
      securityContext:
[[ toYaml $podSecurityContext | indent 8 ]]
[[- end ]]
{{- end }}
[[- if $volumes ]]
      volumes:
[[ toYaml $volumes | indent 6 ]]
[[- else if $conditionalVolumes ]]
      volumes:
[[- end ]]
[[- range $v := $conditionalVolumes ]]
{{- if [[ $v.Condition ]] }}
[[ toYaml (toListItem $v.Volume) | indent 6 ]]
{{- end }}
[[- end ]]
[[- range $container := $containers -]]
[[- if and (gt (len $container.EnableStatement) 0) ($container.Volumes) ]]
[[- printf "\n{{ if %s }}" $container.EnableStatement ]]
[[- range $volume := $container.Volumes ]]
[[ toYaml (toListItem $volume) | indent 6 ]]
[[- end ]]
{{- end }}
[[- end ]]
[[- end ]]
      containers:
[[- range $container := $containers ]]
[[- if (gt (len $container.EnableStatement) 0) ]]
[[- printf "\n{{ if %s }}" $container.EnableStatement ]]
[[- end ]]
[[- $containerName := lower_camel $container.Name ]]
[[- $containerVar := printf "$%s" $containerName ]]
[[- $imageVar := printf "$%s%s" $containerName "Image" ]]
{{- [[ $containerVar ]] := [[ $container.ValuesVar ]] }}
{{- [[ $imageVar ]] := [[ $containerVar ]].image }}
      - name: [[ $container.Name ]]
        image: {{ [[ $imageVar ]].registry }}/{{ [[ $imageVar ]].repository }}:{{ [[ $imageVar ]].tag }}
        imagePullPolicy: {{ [[ $imageVar ]].pullPolicy }}
[[- if $container.Args ]]
        args:
[[ toYaml $container.Args | indent 8 ]]
[[- end ]]
[[- if $container.ContainerPorts ]]
        ports:
        [[- range $port := $container.ContainerPorts ]]
        - name: [[ $port.Name ]]
          containerPort: [[ $port.Port ]]
        [[- end ]]
[[- end ]]
{{- if [[ $containerVar ]].env }}
        env:
{{ toYaml [[ $containerVar ]].env | indent 10 }}
[[- range $f := $container.TemplateEnvVars ]]
[[- if $f.Condition ]]
{{- if [[ $f.Condition ]] }}
[[- end]]
          [[- if $f.Value ]]
          - name: [[ $f.Name ]]
            value: [[ $f.Value ]]
          [[- else if $f.ValueFrom ]]
          - name: [[ $f.Name ]]
            valueFrom: [[ $f.ValueFrom | toYaml | nindent 14 ]]
          [[- end ]]
[[- if $f.Condition ]]
{{- end }}
[[- end ]] [[/* end Condition */]]
[[- end ]] [[/* end TemplateEnvVars */]]
{{- else if [[ $containerVar ]].extraEnvs }}
        env:
{{- end }}
{{- range $name, $item := [[ $containerVar ]].extraEnvs }}
          - name: {{ $name }}
{{- $item | toYaml | nindent 12 }}
{{- end }}
[[- if $container.VolumeMounts ]]
        volumeMounts:
[[ toYaml $container.VolumeMounts | indent 8 ]]
[[- else if $container.ConditionalVolumeMounts ]]
        volumeMounts:
[[- end ]]
[[- range $v := $container.ConditionalVolumeMounts ]]
{{- if [[ $v.Condition ]] }}
[[ toYaml (toListItem $v.VolumeMount) | indent 8 ]]
{{- end }}
[[- end ]]
        resources:
{{- if [[ $containerVar ]].resources }}
{{ toYaml [[ $containerVar ]].resources | indent 10}}
{{- else}}
          requests:
            cpu: 500m
            memory: 256Mi
{{- end }}
        {{- /*
          Render securityContext configs if it is set.
          If securityContext is not set, render the default securityContext.
          If securityContext is set to 'false', render an empty map.
        */}}
        securityContext:
{{- if or ([[ $containerVar ]].securityContext) (eq "map[]" (printf "%v" [[ $containerVar ]].securityContext)) }}
{{ toYaml [[ $containerVar ]].securityContext | indent 10}}
{{/* Because securityContext is nil by default we can only perform following conversion if it is a boolean. Skip conditional otherwise. */}}
{{- else if eq (ternary [[ $containerVar ]].securityContext true (eq "bool" (printf "%T" [[ $containerVar ]].securityContext))) false }}
          {}
{{- else}}
          runAsNonRoot: true
          {{- if not $[[ $operatorVar ]].floatingUserId }}
          runAsUser: {{ printf "%.0f" (float64 $[[ $operatorVar ]].runAsUser) }}
          {{- end }}
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
{{- end }}
[[- if $container.ReadinessProbe ]]
        readinessProbe:
        [[- if $container.ReadinessProbe.Exec ]]
          exec:
            command:
            [[- range $command := $container.ReadinessProbe.Exec ]]
            - [[ $command ]]
            [[- end ]]
        [[- else ]]
          httpGet:
            path: [[ $container.ReadinessProbe.Path ]]
            port: [[ $container.ReadinessProbe.Port ]]
            [[- if $container.ReadinessProbe.Scheme ]]
            scheme: [[ $container.ReadinessProbe.Scheme ]]
            [[- end ]]
        [[- end ]]
        [[- if $container.ReadinessProbe.InitialDelaySeconds ]]
          initialDelaySeconds: [[ $container.ReadinessProbe.InitialDelaySeconds ]]
        [[- end ]]
        [[- if $container.ReadinessProbe.PeriodSeconds ]]
          periodSeconds: [[ $container.ReadinessProbe.PeriodSeconds ]]
        [[- end ]]
[[- end ]]
[[- if $container.LivenessProbe ]]
        livenessProbe:
[[ toYaml $container.LivenessProbe | indent 10 ]]
[[- end ]]
[[- if (gt (len $container.EnableStatement) 0) ]]
{{- end }}
[[- end ]]
[[- end ]]
      {{- if $[[ $operatorVar ]]Image.pullSecret }}
      imagePullSecrets:
        - name: {{ $[[ $operatorVar ]]Image.pullSecret }}
      {{- end}}
{{- end }} {{/* define "[[ $operator.Name ]].deploymentSpec" */}}

{{/* Render [[ $operator.Name ]] deployment template with overrides from values*/}}
[[- $operatorEnabledCondition -]]
{{- $[[ $operatorVar ]]DeploymentOverrides := dict }}
{{- if $[[ $operatorVar ]].deploymentOverrides }}
{{- $[[ $operatorVar ]]DeploymentOverrides = $[[ $operatorVar ]].deploymentOverrides  }}
{{- end }}
---
{{ include "skv2.utils.merge" (list . $[[ $operatorVar ]]DeploymentOverrides "[[ $operator.Name ]].deploymentSpec") }}
{{- end }}
---

[[- $operatorEnabledCondition -]]
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: [[ $operator.Name ]]
  {{- if $[[ $operatorVar ]].serviceAccount}}
  {{- if $[[ $operatorVar ]].serviceAccount.extraAnnotations }}
  annotations:
    {{- range $key, $value := $[[ $operatorVar ]].serviceAccount.extraAnnotations }}
    {{ $key }}: {{ $value }}
    {{- end }}
  {{- end }}
  {{- end}}
  name: [[ $operator.Name ]]
[[- if $operator.NamespaceFromValuePath ]]
  namespace: [[ printf "{{ %s | default $.Release.Namespace }}" $operator.NamespaceFromValuePath ]]
[[- else ]]
  namespace: {{ default .Release.Namespace [[ (opVar $operator) ]].namespace }}
[[- end ]]
{{- end }}


{{- define "[[ $operator.Name ]].serviceSpec"}}
[[ if gt (len $operator.Service.Ports) 0 ]]
# Service for [[ $operator.Name ]]
{{/* Define variables in function scope */}}
{{- $[[ $operatorVar ]] := [[ (opVar $operator) ]]}}
apiVersion: v1
kind: Service
metadata:
  labels:
    app: [[ $operator.Name ]]
    [[- range $key, $value := $customServiceLabels ]]
    [[ $key ]]: [[ $value ]]
    [[- end ]]
  annotations:
    app.kubernetes.io/name: [[ $operator.Name ]]
    [[- range $key, $value := $customServiceAnnotations ]]
    [[ $key ]]: [[ $value ]]
    [[- end ]]
  name: [[ $operator.Name ]]
[[- if $operator.NamespaceFromValuePath ]]
  namespace: [[ printf "{{ %s | default $.Release.Namespace }}" $operator.NamespaceFromValuePath ]]
[[- else ]]
  namespace: {{ default .Release.Namespace [[ (opVar $operator) ]].namespace }}
[[- end ]]
spec:
  selector:
    app: [[ $operator.Name ]]
  type: {{ $[[ $operatorVar ]].serviceType }}
  ports:
  [[- range $port := $operator.Service.Ports ]]
  - name: [[ lower $port.Name ]]
    port: {{ index $[[ $operatorVar ]] "ports" "[[ $port.Name ]]" }}
  [[- end ]]
[[ end ]]
{{- end }} {{/* define "[[ $operator.Name ]].serviceSpec" */}}

[[- $operatorEnabledCondition -]]
{{/* Render [[ $operator.Name ]] service template with overrides from values*/}}
{{- $[[ $operatorVar ]]ServiceOverrides := dict }}
{{- if $[[ $operatorVar ]].serviceOverrides }}
{{- $[[ $operatorVar ]]ServiceOverrides = $[[ $operatorVar ]].serviceOverrides  }}
{{- end }}

---

{{ include "skv2.utils.merge" (list . $[[ $operatorVar ]]ServiceOverrides "[[ $operator.Name ]].serviceSpec") }}
{{- end }}

[[- range $container := $containers -]]
[[- if and (gt (len $container.EnableStatement) 0) (gt (len $container.Service.Ports) 0) ]]
[[ printf "\n---" ]]
[[ $containerVar := printf "$%s" ($container.Name | lower_camel) ]]
{{- [[ $containerVar ]] := [[ $container.ValuesVar ]] }}
[[- printf "\n{{ if %s }}" $container.EnableStatement ]]
apiVersion: v1
kind: Service
metadata:
  labels:
    app: [[ $container.Name ]]
    [[- range $key, $value := $container.Service.CustomLabels ]]
    [[ $key ]]: [[ $value ]]
    [[- end ]]
  annotations:
    app.kubernetes.io/name: [[ $container.Name ]]
    [[- range $key, $value := $container.Service.CustomAnnotations ]]
    [[ $key ]]: [[ $value ]]
    [[- end ]]
  name: [[ $container.Name ]]
  namespace: {{ default .Release.Namespace $[[ $operatorVar ]].namespace }}
spec:
  selector:
    app: [[ $operator.Name ]]
  type: {{ [[ $containerVar ]].serviceType }}
  ports:
  [[- range $port := $container.Service.Ports ]]
  - name: [[ lower $port.Name ]]
    port: {{ index [[ $containerVar ]] "ports" "[[ $port.Name ]]" }}
  [[- end ]]
{{- end }}
[[- end ]]
[[- end ]]
[[ end ]]
