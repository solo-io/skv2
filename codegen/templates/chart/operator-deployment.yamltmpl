[[/*
This template contains the core components for the Operator deployment.
Expressions evaluating Helm Values use "{{" and "}}"
Expressions evaluating SKv2 Config use "[[" and "]]"
*/]]

[[- range $operator := $.Operators -]]
[[- $operatorVar := (lower_camel $operator.Name) -]]

[[/* custom values defined in codegen model */]]
[[- $volumes := $operator.Deployment.Volumes -]]
[[- $customPodLabels := $operator.Deployment.CustomPodLabels -]]
[[- $customPodAnnotations := $operator.Deployment.CustomPodAnnotations -]]
[[- $customDeploymentLabels := $operator.Deployment.CustomDeploymentLabels -]]
[[- $customDeploymentAnnotations := $operator.Deployment.CustomDeploymentAnnotations -]]
[[- $customServiceLabels := $operator.Service.CustomLabels -]]
[[- $customServiceAnnotations := $operator.Service.CustomAnnotations ]]

{{- $[[ $operatorVar ]] := $.Values.[[ $operatorVar ]]}}
---

{{- define "[[ $operator.Name ]].deploymentSpec"}}
[[- $workloadKind := "Deployment" ]]
[[- if $operator.Deployment.UseDaemonSet ]]
[[- $workloadKind = "DaemonSet" ]]
[[- end ]]

# [[ $workloadKind ]] manifest for [[ $operator.Name ]]

apiVersion: apps/v1
kind: [[ $workloadKind ]]
metadata:
  labels:
    app: [[ $operator.Name ]]
    [[- range $key, $value := $customDeploymentLabels ]]
    [[ $key ]]: [[ $value ]]
    [[- end ]]
  annotations:
    app.kubernetes.io/name: [[ $operator.Name ]]
    [[- range $key, $value := $customDeploymentAnnotations ]]
    [[ $key ]]: [[ $value ]]
    [[- end ]]
  name: [[ $operator.Name ]]
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: [[ $operator.Name ]]
      [[- range $key, $value := $customPodLabels ]]
      [[ $key ]]: [[ $value ]]
      [[- end ]]
  template:
    metadata:
      labels:
        app: [[ $operator.Name ]]
        [[- range $key, $value := $customPodLabels ]]
        [[ $key ]]: [[ $value ]]
        [[- end ]]
      annotations:
        app.kubernetes.io/name: [[ $operator.Name ]]
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
        [[- range $key, $value := $customPodAnnotations ]]
        [[ $key ]]: [[ $value ]]
        [[- end ]]
    spec:
      serviceAccountName: [[ $operator.Name ]]
[[- if $volumes ]]
      volumes:
[[ toYaml $volumes | indent 6 ]]
[[- end ]]
      containers:
[[- range $container := containerConfigs $operator ]]
[[- $containerName := lower_camel $container.Name ]]
[[- $containerVar := printf "$%s" $containerName ]]
[[- $imageVar := printf "$%s%s" $containerName "Image" ]]
{{- [[ $containerVar ]] := [[ $container.ValuesVar ]] }}
{{- [[ $imageVar ]] := [[ $containerVar ]].image }}
      - name: [[ $container.Name ]]
        image: {{ [[ $imageVar ]].registry }}/{{ [[ $imageVar ]].repository }}:{{ [[ $imageVar ]].tag }}
        imagePullPolicy: {{ [[ $imageVar ]].pullPolicy }}
[[- if $container.Args ]]
        args:
[[ toYaml $container.Args | indent 8 ]]
[[- end ]]
{{- if [[ $containerVar ]].env }}
        env:
{{ toYaml [[ $containerVar ]].env | indent 10 }}
{{- end }}
[[- if $container.VolumeMounts ]]
        volumeMounts:
[[ toYaml $container.VolumeMounts | indent 8 ]]
[[- end ]]
        resources:
{{- if [[ $containerVar ]].resources }}
{{ toYaml [[ $containerVar ]].resources | indent 10}}
{{- else}}
          requests:
            cpu: 500m
            memory: 256Mi
{{- end}}
        {{- /*
          Render securityContext configs if it is set.
          If securityContext is not set, render the default securityContext.
          If securityContext is set to 'false', render an empty map.
        */}}
        securityContext:
{{- if or ([[ $containerVar ]].securityContext) (eq "map[]" (printf "%v" [[ $containerVar ]].securityContext)) }}
{{ toYaml [[ $containerVar ]].securityContext | indent 10}}
{{/* Because securityContext is nil by default we can only perform following conversion if it is a boolean. Skip conditional otherwise. */}}
{{- else if eq (ternary [[ $containerVar ]].securityContext true (eq "bool" (printf "%T" [[ $containerVar ]].securityContext))) false }}
          {}
{{- else}}
          runAsNonRoot: true
          {{- if not $[[ $operatorVar ]].floatingUserId }}
          runAsUser: {{ printf "%.0f" (float64 $[[ $operatorVar ]].runAsUser) }}
          {{- end }}
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
{{- end}}
[[- if $container.ReadinessProbe ]]
        readinessProbe:
[[ toYaml $container.ReadinessProbe | indent 10 ]]
[[- end ]]
[[- if $container.LivenessProbe ]]
        livenessProbe:
[[ toYaml $container.LivenessProbe | indent 10 ]]
[[- end ]]
[[- end ]]
      {{- if $[[ $operatorVar ]]Image.pullSecret }}
      imagePullSecrets:
        - name: {{ $[[ $operatorVar ]]Image.pullSecret }}
      {{- end}}
{{- end }} {{/* define "[[ $operator.Name ]].deploymentSpec" */}}

{{/* Render [[ $operator.Name ]] deployment template with overrides from values*/}}
{{- if $[[ $operatorVar ]].enabled }}
{{- $[[ $operatorVar ]]DeploymentOverrides := dict }}
{{- if $[[ $operatorVar ]].deploymentOverrides }}
{{- $[[ $operatorVar ]]DeploymentOverrides = $[[ $operatorVar ]].deploymentOverrides  }}
{{- end }}
---
{{ include "skv2.utils.merge" (list . $[[ $operatorVar ]]DeploymentOverrides "[[ $operator.Name ]].deploymentSpec") }}
{{- end }}
---

{{- if $[[ $operatorVar ]].enabled }}
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: [[ $operator.Name ]]
  name: [[ $operator.Name ]]
  namespace: {{ $.Release.Namespace }}
{{- end }}


{{- define "[[ $operator.Name ]].serviceSpec"}}
[[ if gt (len $operator.Service.Ports) 0 ]]
# Service for [[ $operator.Name ]]
{{/* Define variables in function scope */}}
{{- $[[ $operatorVar ]] := $.Values.[[ $operatorVar ]]}}
apiVersion: v1
kind: Service
metadata:
  labels:
    app: [[ $operator.Name ]]
    [[- range $key, $value := $customServiceLabels ]]
    [[ $key ]]: [[ $value ]]
    [[- end ]]
  annotations:
    app.kubernetes.io/name: [[ $operator.Name ]]
    [[- range $key, $value := $customServiceAnnotations ]]
    [[ $key ]]: [[ $value ]]
    [[- end ]]
  name: [[ $operator.Name ]]
  namespace: {{ $.Release.Namespace }}
spec:
  selector:
    app: [[ $operator.Name ]]
  type: {{ $[[ $operatorVar ]].serviceType }}
  ports:
  [[- range $port := $operator.Service.Ports ]]
  - name: [[ lower $port.Name ]]
    port: {{ $[[ $operatorVar ]].ports.[[ $port.Name ]] }}
  [[- end ]]
[[ end ]]
{{- end }} {{/* define "[[ $operator.Name ]].serviceSpec" */}}

{{- if $[[ $operatorVar ]].enabled }}
{{/* Render [[ $operator.Name ]] service template with overrides from values*/}}
{{- $[[ $operatorVar ]]ServiceOverrides := dict }}
{{- if $[[ $operatorVar ]].serviceOverrides }}
{{- $[[ $operatorVar ]]ServiceOverrides = $[[ $operatorVar ]].serviceOverrides  }}
{{- end }}

---

{{ include "skv2.utils.merge" (list . $[[ $operatorVar ]]ServiceOverrides "[[ $operator.Name ]].serviceSpec") }}
{{- end }}

---

[[ end ]]