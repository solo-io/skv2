[[- /*
This template contains the RBAC config required by the Operator deployment.
Expressions evaluating Helm Values use "{{" and "}}"
Expressions evaluating SKv2 Config use [[ "[[" ]] and [[ "]]" ]]
*/ -]]

[[- range $operator := $.Operators -]]
[[- $operatorVar := (lower_camel $operator.Name) -]]
[[- if or $operator.ClusterRbac $operator.NamespaceRbac ]]
# Rbac manifests for [[ $operator.Name ]]

{{- $[[ $operatorVar ]] := [[ (opVar $operator) ]] }}

[[- $operatorEnabledCondition := printf "\n{{ if $%s.enabled }}\n" $operatorVar -]]
[[- if (gt (len $operator.CustomEnableCondition) 0) -]]
[[- $operatorEnabledCondition = printf "\n{{ if %s }}\n" $operator.CustomEnableCondition -]]
[[- end -]]
[[- $operatorEnabledCondition -]]
[[- if $operator.ClusterRbac ]]

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
[[- if $operator.NamespaceFromValuePath ]]
  name: [[ $operator.Name ]]-[[ printf "{{ %s | default $.Release.Namespace }}" $operator.NamespaceFromValuePath ]]
[[- else ]]
  name: [[ $operator.Name ]]-{{ default .Release.Namespace $[[ $operatorVar ]].namespace }}
[[- end ]]
  labels:
    app: [[ $operator.Name ]]
rules:
[[ toYaml $operator.ClusterRbac ]]
[[- range $container := containerConfigs $operator -]]
[[- if and ($container.ClusterRbac) (gt (len $container.EnableStatement) 0) ]]
[[ printf "{{ if %s }}" $container.EnableStatement ]]
[[- end ]]
[[- range $rule := $container.ClusterRbac ]]
[[ toYaml (toListItem $rule) ]]
[[- end ]]
[[- if and ($container.ClusterRbac) (gt (len $container.EnableStatement) 0) ]]
{{- end }}
[[- end ]]
[[- end ]]

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
[[- if $operator.NamespaceFromValuePath ]]
  name: [[ $operator.Name ]]-[[ printf "{{ %s | default $.Release.Namespace }}" $operator.NamespaceFromValuePath ]]
[[- else ]]
  name: [[ $operator.Name ]]-{{ default .Release.Namespace $[[ $operatorVar ]].namespace }}
[[- end ]]
  labels:
    app: [[ $operator.Name ]]
subjects:
- kind: ServiceAccount
  name: [[ $operator.Name ]]
[[- if $operator.NamespaceFromValuePath ]]
  namespace: [[ printf "{{ %s | default $.Release.Namespace }}" $operator.NamespaceFromValuePath ]]
[[- else ]]
  namespace: {{ default .Release.Namespace $[[ $operatorVar ]].namespace }}
[[- end ]]
roleRef:
  kind: ClusterRole
[[- if $operator.NamespaceFromValuePath ]]
  name: [[ $operator.Name ]]-[[ printf "{{ %s | default $.Release.Namespace }}" $operator.NamespaceFromValuePath ]]
[[- else ]]
  name: [[ $operator.Name ]]-{{ default .Release.Namespace $[[ $operatorVar ]].namespace }}
[[- end ]]
  apiGroup: rbac.authorization.k8s.io

[[- end ]][[/* if $operator.ClusterRbac */]]

[[ if $operator.NamespaceRbac ]]
[[- /* 
We need the following variables:
  1. map of namespace -> list of resources
  2. list of resources to be namespace restricted
  3. list of namespaced resources that the operator supports
Prefixed with '#' to avoid printing variable values in yaml, per https://github.com/solo-io/gloo-mesh-enterprise/issues/12164
*/ -]]
#{{- $[[ $operatorVar ]]NsToResources := dict }}
#{{- $[[ $operatorVar ]]NamespacedResources := list }}
#{{- $[[ $operatorVar ]]SupportedResources := list }}
[[- range $resource, $_ := $operator.NamespaceRbac ]]
{{- $[[ $operatorVar ]]SupportedResources = append $[[ $operatorVar ]]SupportedResources [[ quote $resource ]] }}
[[- end ]]

{{- range $entry := $[[ $operatorVar ]].namespacedRbac }}
[[- /*
If resources were chosen but no namespaces were chosen, default to restricting those resources to the Release.Namespace.
*/ -]]
  {{- if and (eq (len $.Values.entry.namespaces) 0) (ge (len ($.Values.entry.resources) 0)) }}
    {{- set $[[ $operatorVar ]]NsToResources {{ .Release.Namespace }} (concat $entry.resources (get $[[ $operatorVar ]]NsToResources {{ .Release.Namespace }} | default list) | mustUniq) }}
  {{- end }}
  {{- range $ns := $entry.namespaces }}
    {{- set $[[ $operatorVar ]]NsToResources $ns (concat $entry.resources (get $[[ $operatorVar ]]NsToResources $ns | default list) | mustUniq) }}
  {{- end }}
  {{- range $resource := $entry.resources }}
    {{- if (has $resource $[[ $operatorVar ]]SupportedResources) }}
      {{- $[[ $operatorVar ]]NamespacedResources = (append $[[ $operatorVar ]]NamespacedResources $resource | mustUniq) }}
    {{- else }}
      {{- fail (cat "invalid resource name" (quote $resource) "provided to namespacedRbac field. must be one of the following:" ($[[ $operatorVar ]]SupportedResources | join ", ")) }}
    {{- end }}
  {{- end }}
{{- end }}

{{- if not (eq (len $[[ $operatorVar ]]NamespacedResources) [[ len $operator.NamespaceRbac ]]) }}
---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: [[ $operator.Name ]]-{{ .Release.Name }}-{{ .Release.Namespace }}-namespaced
  labels:
    app: [[ $operator.Name ]]
rules:
[[- range $resource, $policies := $operator.NamespaceRbac ]]
{{- if not (has [[ quote $resource ]] $[[ $operatorVar ]]NamespacedResources) }}
[[- range $policy := $policies ]]
[[ toYaml (toListItem $policy) ]]
[[- end ]]
{{- end }}
[[- end ]]

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: [[ $operator.Name ]]-{{ .Release.Name }}-{{ .Release.Namespace }}-namespaced
  labels:
    app: [[ $operator.Name ]]
subjects:
- kind: ServiceAccount
  name: [[ $operator.Name ]]
[[- if $operator.NamespaceFromValuePath ]]
  namespace: [[ printf "{{ %s | default $.Release.Namespace }}" $operator.NamespaceFromValuePath ]]
[[- else ]]
  namespace: {{ default .Release.Namespace $[[ $operatorVar ]].namespace }}
[[- end ]]
roleRef:
  kind: ClusterRole
  name: [[ $operator.Name ]]-{{ .Release.Name }}-{{ .Release.Namespace }}-namespaced
  apiGroup: rbac.authorization.k8s.io
{{- end }}

{{- range $ns, $resources := $[[ $operatorVar ]]NsToResources }}

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: [[ $operator.Name ]]-{{ $.Release.Name }}-{{ $.Release.Namespace }}-namespaced
  namespace: {{ $ns }}
  labels:
    app: [[ $operator.Name ]]
rules:
[[- range $resource, $policies := $operator.NamespaceRbac ]]
{{- if (has [[ quote $resource ]] $resources) }}
[[- range $policy := $policies ]]
[[ toYaml (toListItem $policy) ]]
[[- end ]]
{{- end }}
[[- end ]]

---

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: [[ $operator.Name ]]-{{ $.Release.Name }}-{{ $.Release.Namespace }}-namespaced
  namespace: {{ $ns }}
  labels:
    app: [[ $operator.Name ]]
subjects:
- kind: ServiceAccount
  name: [[ $operator.Name ]]
[[- if $operator.NamespaceFromValuePath ]]
  namespace: [[ printf "{{ %s | default $.Release.Namespace }}" $operator.NamespaceFromValuePath ]]
[[- else ]]
  namespace: {{ default $.Release.Namespace $[[ $operatorVar ]].namespace }}
[[- end ]]
roleRef:
  kind: Role
  name: [[ $operator.Name ]]-{{ $.Release.Name }}-{{ $.Release.Namespace }}-namespaced
  apiGroup: rbac.authorization.k8s.io

  {{- end }}[[/* range $ns, $resources := $[[ $operatorVar ]]NsToResources */]]
[[- end ]][[/* if $operator.NamespaceRbac */]]
{{- end }}[[/* $operatorEnabledCondition */]]
[[- end ]][[/* if or $operator.ClusterRbac $operator.NamespaceRbac */]]
[[- end ]][[/* range $operator := $.Operators */]]