// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

    {{ group_import_name $ }} "{{ group_import_path $ }}"

    "github.com/pkg/errors"
    "github.com/solo-io/skv2/pkg/events"
    "k8s.io/apimachinery/pkg/runtime"
    "sigs.k8s.io/controller-runtime/pkg/manager"
    "sigs.k8s.io/controller-runtime/pkg/predicate"
)

{{- range $resource := $.Resources }}

{{- $kindLowerCamel := lower_camel $resource.Kind }}

// Handle events for the {{ $resource.Kind }} Resource
// DEPRECATED: Prefer reconciler pattern.
type {{ $resource.Kind }}EventHandler interface {
    Create{{ $resource.Kind }}(obj *{{ group_import_name $ }}.{{ $resource.Kind }}) error
    Update{{ $resource.Kind }}(old, new *{{ group_import_name $ }}.{{ $resource.Kind }}) error
    Delete{{ $resource.Kind }}(obj *{{ group_import_name $ }}.{{ $resource.Kind }}) error
    Generic{{ $resource.Kind }}(obj *{{ group_import_name $ }}.{{ $resource.Kind }}) error
}

type {{ $resource.Kind }}EventHandlerFuncs struct {
    OnCreate  func(obj *{{ group_import_name $ }}.{{ $resource.Kind }}) error
    OnUpdate  func(old, new *{{ group_import_name $ }}.{{ $resource.Kind }}) error
    OnDelete  func(obj *{{ group_import_name $ }}.{{ $resource.Kind }}) error
    OnGeneric func(obj *{{ group_import_name $ }}.{{ $resource.Kind }}) error
}

func (f *{{ $resource.Kind }}EventHandlerFuncs) Create{{ $resource.Kind }}(obj *{{ group_import_name $ }}.{{ $resource.Kind }}) error {
    if f.OnCreate == nil {
        return nil
    }
    return f.OnCreate(obj)
}

func (f *{{ $resource.Kind }}EventHandlerFuncs) Delete{{ $resource.Kind }}(obj *{{ group_import_name $ }}.{{ $resource.Kind }}) error {
    if f.OnDelete == nil {
        return nil
    }
    return f.OnDelete(obj)
}

func (f *{{ $resource.Kind }}EventHandlerFuncs) Update{{ $resource.Kind }}(objOld, objNew *{{ group_import_name $ }}.{{ $resource.Kind }}) error {
    if f.OnUpdate == nil {
        return nil
    }
    return f.OnUpdate(objOld, objNew)
}

func (f *{{ $resource.Kind }}EventHandlerFuncs) Generic{{ $resource.Kind }}(obj *{{ group_import_name $ }}.{{ $resource.Kind }}) error {
    if f.OnGeneric == nil {
        return nil
    }
    return f.OnGeneric(obj)
}

type {{ $resource.Kind }}EventWatcher interface {
    AddEventHandler(ctx context.Context, h {{ $resource.Kind }}EventHandler, predicates ...predicate.Predicate) error
}

type {{ $kindLowerCamel }}EventWatcher struct {
    watcher events.EventWatcher
}

func New{{ $resource.Kind }}EventWatcher(name string, mgr manager.Manager) {{ $resource.Kind }}EventWatcher {
    return &{{ $kindLowerCamel }}EventWatcher{
        watcher: events.NewWatcher(name, mgr, &{{ group_import_name $ }}.{{ $resource.Kind }}{}),
    }
}

func (c *{{ $kindLowerCamel }}EventWatcher) AddEventHandler(ctx context.Context, h {{ $resource.Kind }}EventHandler, predicates ...predicate.Predicate) error {
	handler := generic{{ $resource.Kind }}Handler{handler: h}
    if err := c.watcher.Watch(ctx, handler, predicates...); err != nil{
        return err
    }
    return nil
}

// generic{{ $resource.Kind }}Handler implements a generic events.EventHandler
type generic{{ $resource.Kind }}Handler struct {
    handler {{ $resource.Kind }}EventHandler
}

func (h generic{{ $resource.Kind }}Handler) Create(object runtime.Object) error {
    obj, ok := object.(*{{ group_import_name $ }}.{{ $resource.Kind }})
    if !ok {
        return errors.Errorf("internal error: {{ $resource.Kind }} handler received event for %T", object)
    }
    return h.handler.Create{{ $resource.Kind }}(obj)
}

func (h generic{{ $resource.Kind }}Handler) Delete(object runtime.Object) error {
    obj, ok := object.(*{{ group_import_name $ }}.{{ $resource.Kind }})
    if !ok {
        return errors.Errorf("internal error: {{ $resource.Kind }} handler received event for %T", object)
    }
    return h.handler.Delete{{ $resource.Kind }}(obj)
}

func (h generic{{ $resource.Kind }}Handler) Update(old, new runtime.Object) error {
    objOld, ok := old.(*{{ group_import_name $ }}.{{ $resource.Kind }})
    if !ok {
        return errors.Errorf("internal error: {{ $resource.Kind }} handler received event for %T", old)
    }
    objNew, ok := new.(*{{ group_import_name $ }}.{{ $resource.Kind }})
    if !ok {
        return errors.Errorf("internal error: {{ $resource.Kind }} handler received event for %T", new)
    }
    return h.handler.Update{{ $resource.Kind }}(objOld, objNew)
}

func (h generic{{ $resource.Kind }}Handler) Generic(object runtime.Object) error {
    obj, ok := object.(*{{ group_import_name $ }}.{{ $resource.Kind }})
    if !ok {
        return errors.Errorf("internal error: {{ $resource.Kind }} handler received event for %T", object)
    }
    return h.handler.Generic{{ $resource.Kind }}(obj)
}

{{- end }}
