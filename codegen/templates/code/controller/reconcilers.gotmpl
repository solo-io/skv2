// Definitions for the Kubernetes Controllers
package controller

{{ $import_prefix := group_import_name $ }}

import (
	"context"

    {{ $import_prefix }} "{{ group_import_path $ }}"

    "github.com/pkg/errors"
    "github.com/solo-io/skv2/pkg/ezkube"
    "github.com/solo-io/skv2/pkg/reconcile"
    "sigs.k8s.io/controller-runtime/pkg/manager"
    "sigs.k8s.io/controller-runtime/pkg/predicate"
)

{{- range $resource := $.Resources }}

{{- $kindLowerCamel := lower_camel $resource.Kind }}

// Reconcile Upsert events for the {{ $resource.Kind }} Resource.
// implemented by the user
type {{ $resource.Kind }}Reconciler interface {
    Reconcile{{ $resource.Kind }}(obj *{{ $import_prefix }}.{{ $resource.Kind }}) (reconcile.Result, error)
}

// Reconcile deletion events for the {{ $resource.Kind }} Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type {{ $resource.Kind }}DeletionReconciler interface {
    Reconcile{{ $resource.Kind }}Deletion(req reconcile.Request) error
}

type {{ $resource.Kind }}ReconcilerFuncs struct {
    OnReconcile{{ $resource.Kind }} func(obj *{{ $import_prefix }}.{{ $resource.Kind }}) (reconcile.Result, error)
    OnReconcile{{ $resource.Kind }}Deletion func(req reconcile.Request) error
}

func (f *{{ $resource.Kind }}ReconcilerFuncs) Reconcile{{ $resource.Kind }}(obj *{{ $import_prefix }}.{{ $resource.Kind }}) (reconcile.Result, error) {
    if f.OnReconcile{{ $resource.Kind }} == nil {
        return reconcile.Result{}, nil
    }
    return f.OnReconcile{{ $resource.Kind }}(obj)
}

func (f *{{ $resource.Kind }}ReconcilerFuncs) Reconcile{{ $resource.Kind }}Deletion(req reconcile.Request) error {
    if f.OnReconcile{{ $resource.Kind }}Deletion == nil {
        return nil
    }
    return f.OnReconcile{{ $resource.Kind }}Deletion(req)
}

// Reconcile and finalize the {{ $resource.Kind }} Resource
// implemented by the user
type {{ $resource.Kind }}Finalizer interface {
    {{ $resource.Kind }}Reconciler

    // name of the finalizer used by this handler.
    // finalizer names should be unique for a single task
    {{ $resource.Kind }}FinalizerName() string

    // finalize the object before it is deleted.
    // Watchers created with a finalizing handler will a
    Finalize{{ $resource.Kind }}(obj *{{ $import_prefix }}.{{ $resource.Kind }}) error
}

type {{ $resource.Kind }}ReconcileLoop interface {
    Run{{ $resource.Kind }}Reconciler(ctx context.Context, rec {{ $resource.Kind }}Reconciler, predicates ...predicate.Predicate) error
}

type {{ $kindLowerCamel }}ReconcileLoop struct {
    loop reconcile.Loop
}

func New{{ $resource.Kind }}ReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) {{ $resource.Kind }}ReconcileLoop {
    return &{{ $kindLowerCamel }}ReconcileLoop{
    	// empty cluster indicates this reconciler is built for the local cluster
        loop: reconcile.NewLoop(name, "", mgr, &{{ $import_prefix }}.{{ $resource.Kind }}{}, options),
    }
}

func (c *{{ $kindLowerCamel }}ReconcileLoop) Run{{ $resource.Kind }}Reconciler(ctx context.Context, reconciler {{ $resource.Kind }}Reconciler, predicates ...predicate.Predicate) error {
    genericReconciler := generic{{ $resource.Kind }}Reconciler{
        reconciler: reconciler,
    }

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.({{ $resource.Kind }}Finalizer); ok {
        reconcilerWrapper = generic{{ $resource.Kind }}Finalizer{
            generic{{ $resource.Kind }}Reconciler: genericReconciler,
            finalizingReconciler: finalizingReconciler,
        }
    } else {
        reconcilerWrapper = genericReconciler
    }
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// generic{{ $resource.Kind }}Handler implements a generic reconcile.Reconciler
type generic{{ $resource.Kind }}Reconciler struct {
    reconciler {{ $resource.Kind }}Reconciler
}

func (r generic{{ $resource.Kind }}Reconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
    obj, ok := object.(*{{ $import_prefix }}.{{ $resource.Kind }})
    if !ok {
        return reconcile.Result{}, errors.Errorf("internal error: {{ $resource.Kind }} handler received event for %T", object)
    }
    return r.reconciler.Reconcile{{ $resource.Kind }}(obj)
}

func (r generic{{ $resource.Kind }}Reconciler) ReconcileDeletion(request reconcile.Request) error {
    if deletionReconciler, ok := r.reconciler.({{ $resource.Kind }}DeletionReconciler); ok {
        return deletionReconciler.Reconcile{{ $resource.Kind }}Deletion(request)
    }
    return nil
}

// generic{{ $resource.Kind }}Finalizer implements a generic reconcile.FinalizingReconciler
type generic{{ $resource.Kind }}Finalizer struct {
    generic{{ $resource.Kind }}Reconciler
    finalizingReconciler {{ $resource.Kind }}Finalizer
}


func (r generic{{ $resource.Kind }}Finalizer) FinalizerName() string {
    return r.finalizingReconciler.{{ $resource.Kind }}FinalizerName()
}

func (r generic{{ $resource.Kind }}Finalizer) Finalize(object ezkube.Object) error {
    obj, ok := object.(*{{ $import_prefix }}.{{ $resource.Kind }})
    if !ok {
        return errors.Errorf("internal error: {{ $resource.Kind }} handler received event for %T", object)
    }
    return r.finalizingReconciler.Finalize{{ $resource.Kind }}(obj)
}

{{- end }}
