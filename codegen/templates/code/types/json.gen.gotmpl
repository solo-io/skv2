// Generated json marshal and unmarshal functions

package {{ .PackageName }}

import (
    bytes "bytes"
    fmt "fmt"
    math "math"

    skv2jsonpb "github.com/solo-io/skv2/pkg/kube_jsonpb"
    jsonpb "github.com/golang/protobuf/jsonpb"
    proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var (
	marshaller = &skv2jsonpb.Marshaler{}
	unmarshaller = &jsonpb.Unmarshaler{
		AllowUnknownFields: true,
	}
	strictUnmarshaller = &jsonpb.Unmarshaler{}
)

{{- range $resource := $.Resources }}

{{- if or (eq $resource.Spec.Type.GoPackage "") (hasPrefix $.RootGoPackage $resource.Spec.Type.GoPackage)}}
// MarshalJSON is a custom marshaler for {{ $resource.Spec.Type.Name }}
func (this *{{ $resource.Spec.Type.Name }}) MarshalJSON() ([]byte, error) {
	str, err := marshaller.MarshalToString(this)
	return []byte(str), err
}

// UnmarshalJSON is a custom unmarshaler for {{ $resource.Spec.Type.Name }}
func (this *{{ $resource.Spec.Type.Name }}) UnmarshalJSON(b []byte) error {
{{- if $resource.StrictUnmarshal }}
	return strictUnmarshaller.Unmarshal(bytes.NewReader(b), this)
{{- else }}
	return unmarshaller.Unmarshal(bytes.NewReader(b), this)
{{- end }}
}
{{- end }}


{{- if $resource.Status }}
{{- if or (eq $resource.Status.Type.GoPackage "") (hasPrefix $.RootGoPackage $resource.Status.Type.GoPackage)}}
// MarshalJSON is a custom marshaler for {{ $resource.Status.Type.Name }}
func (this *{{ $resource.Status.Type.Name }}) MarshalJSON() ([]byte, error) {
	str, err := marshaller.MarshalToString(this)
	return []byte(str), err
}

// UnmarshalJSON is a custom unmarshaler for {{ $resource.Status.Type.Name }}
func (this *{{ $resource.Status.Type.Name }}) UnmarshalJSON(b []byte) error {
{{- if $resource.StrictUnmarshal }}
	return strictUnmarshaller.Unmarshal(bytes.NewReader(b), this)
{{- else }}
	return unmarshaller.Unmarshal(bytes.NewReader(b), this)
{{- end }}
}
{{- end }}
{{- end }}

{{- end }}
